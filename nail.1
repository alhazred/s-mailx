.\"@ nail.1 - S-nail(1) reference manual.
.\"
.\" Copyright (c) 2000-2008 Gunnar Ritter, Freiburg i. Br., Germany.
.\" Copyright (c) 2012 - 2016 Steffen (Daode) Nurpmeso <steffen@sdaoden.eu>.
.\"
.\" Copyright (c) 1980, 1990, 1993
.\"      The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"--MKREL-START--
.\"@ S-nail(1): v14.9.0-pre2 / 2016-10-31
.Dd Oct 31, 2016
.ds VV \\%v14.9.0-pre2
.\"--MKREL-END--
.\"--MKMAN-START--
.ds UU \\%S-NAIL
.ds UA \\%S-nail
.ds uA \\%s-nail
.ds UR \\%s-nail.rc
.\"--MKMAN-END--
.\" --BEGINSTRIP--
.\"
.\" If not ~/.mailrc, it breaks POSIX compatibility.  And adjust main.c.
.ds ur \\%~/.mailrc
.ds OB [Obsolete]
.ds OP [Option]
.ds IN [v15-compat]
.ds OU [no v15-compat]
.ds ID [v15 behaviour may differ]
.ds NQ [Only new quoting rules]
.ds BO (Boolean)
.ds RO (Read-only)
.
.Dt "\*(UU" 1
.Os
.Mx -enable
.
.
.Sh NAME
.Nm \*(UA \%[\*(VV]
.Nd send and receive Internet mail
.
.
.\" .Sh SYNOPSIS {{{
.Sh SYNOPSIS
.
.\" Keep in SYNC: ./nail.1:"SYNOPSIS, main()
.Nm \*(uA
.Fl h | Fl Fl help
.Nm \*(uA
.Bk -words
.Op Fl BdEFintv~
.Op Fl \&: Ar spec
.Op Fl A Ar account
.Op Fl a Ar attachment
.Op Fl b Ar bcc-addr
.Op Fl c Ar cc-addr
.Op Fl M Ar type | Fl m Ar file | Fl q Ar file | Fl t
.Op Fl r Ar from-addr
.Op Fl S Ar var Ns Op Ns = Ns Ar value
.Op Fl s Ar subject
.Op Fl X Ar cmd
.Op Fl \&.
.Ar to-addr ...
.Op Fl Fl \~ Ns Ar mta-option ...
.Ek
.Nm \*(uA
.Bk -words
.Op Fl BdEeHiNnRv~
.Op Fl \&: Ar spec
.Op Fl A Ar account
.Op Fl L Ar spec-list
.Op Fl r Ar from-addr
.Op Fl S Ar var Ns Op Ns = Ns Ar value
.Op Fl u Ar user
.Op Fl X Ar cmd
.Op Fl Fl \~ Ns Ar mta-option ...
.Ek
.Nm \*(uA
.Bk -words
.Op Fl BdEeHiNnRv~#
.Op Fl \&: Ar spec
.Op Fl A Ar account
.Fl f
.Op Fl L Ar spec-list
.Op Fl r Ar from-addr
.Op Fl S Ar var Ns Op Ns = Ns Ar value
.Op Fl X Ar cmd
.Op Ar file
.Op Fl Fl \~ Ns Ar mta-option ...
.Ek
.\" }}}
.
.
.Mx -toc -tree html pdf ps xhtml
.
.
.\" .Sh DESCRIPTION {{{
.Sh DESCRIPTION
.
.Bd -filled -compact -offset indent
.Sy Compatibility note:
S-nail (\*(UA) will wrap up into \%S-mailx in v15.0 (circa 2018).
Backward incompatibility has to be expected \(en
.Sx COMMANDS
will use
.Xr \&\&sh 1 Ns
-style argument quoting rules, for example.
New and old behaviour is flagged \*(IN and \*(OU, and setting
.Va v15-compat ,
one of the many
.Sx "INTERNAL VARIABLES" ,
will choose new behaviour when applicable.
\*(OB flags what will vanish, and enabling
.Fl d
or
.Fl v
enables obsoletion warnings.
.Ed
.
.Pp
\*(UA is a mail processing system with a command syntax reminiscent of
.Xr ed 1
with lines replaced by messages.
It is intended to provide the functionality of the POSIX
.Xr mailx 1
command, but is MIME capable and optionally offers extensions for
line editing, S/MIME, SMTP and POP3 among others.
.
.\" .Ss "Options" {{{
.Ss "Options"
.
.Bl -tag -width ".Fl _ Ar _ddr"
.Mx
.It Fl \&: Ar spec
Explicitly control which of the
.Sx "Resource files"
shall be loaded: if the letter
.Ql s
is (case-insensitively) part of the
.Ar spec
then the system wide
.Pa \*(UR
is loaded, likewise the letter
.Ql u
controls loading of the user's personal
.Pa \*(ur
file, whereas the letters
.Ql -
and
.Ql /
explicitly forbid loading of any resource files.
This option should be used by scripts: to avoid environmental noise they
should
.Dq detach
from any configuration files and create a script-local environment,
explicitly setting any of the desired
.Sx "INTERNAL VARIABLES"
via
.Fl S .
This option overrides
.Fl n .
.
.Mx
.It Fl A Ar account
Executes an
.Ic account
command for the given user email
.Ar account
after program startup is complete.
Being a special incarnation of
.Ic define Ns d
macros for the purpose of bundling longer-lived settings, activating
such an email account also switches to the accounts system
.Va inbox ,
for example.
.
.Mx
.It Fl a Ar file
Attach
.Ar file
to the message.
The same filename conventions as described in the section
.Sx COMMANDS
apply: shell word expansion is restricted to the tilde
.Ql ~ .
Shall
.Ar file
not be accessible but contain a
.Ql =
character, then anything after the
.Ql =
is assumed to specify the input character set and anything before
.Ql =
the filename: this is the only option to specify (and fixate) the input
character set of text attachments from the command line, not using the
.Ic ~@
command of and in the compose mode that follows
(see
.Sx "COMMAND ESCAPES"
for compose mode commands).
.
.Mx
.It Fl B
Make standard input and standard output line-buffered.
.
.Mx
.It Fl b Ar addr
Send a blind carbon copy to
.Ar addr Ns
ess.
May be used multiple times.
Also see the section
.Sx "On sending mail, and non-interactive mode" .
.
.Mx
.It Fl c Ar addr
Send carbon copies to the given receiver.
May be used multiple times.
.
.Mx
.It Fl d
.Ic set
the internal variable
.Va debug
which enables debug messages and disables message delivery,
among others; effectively turns almost any operation into a dry-run.
.
.Mx
.It Fl E
.Ic set
.Va skipemptybody
and thus discard messages with an empty message part body.
This is useful for sending messages from scripts.
.
.Mx
.It Fl e
Just check if mail is present (in the specified or system
.Va inbox ) :
if yes, return an exit status of zero, a non-zero value otherwise.
To restrict the set of mails to consider in this evaluation a message
specification can be added with the option
.Fl L .
.
.Mx
.It Fl F
Save the message to send in a file named after the local part of the
first recipient's address (instead of in
.Va record Ns ).
.
.Mx
.It Fl f
Read in the contents of the user's
.Ev MBOX
(or the specified file) for processing;
when \*(UA is quit, it writes undeleted messages back to this file
(but be aware of the
.Va hold
option).
Some special conventions are recognized for the optional
.Ar file
argument which are documented for the
.Ic file
command below.
Note that
.Ar file
is not a argument to the flag
.Fl \&\&f ,
but is instead taken from the command line after option processing has
been completed.
In order to use a
.Ar file
that starts with a hyphen, prefix it with a (relative) path, as in
.Ql ./-hyphenbox.mbox .
.
.Mx
.It Fl H
Display a summary of the
.Ic headers
of all messages in the specified mailbox or system
.Va inbox
and exit.
A configurable summary view is available via the
.Fl L
option.
.
.Mx
.It Fl h
Show a short usage summary.
Because of widespread use a
.Fl Fl help
argument will have the same effect.
.
.Mx
.It Fl i
.Ic set
.Va ignore
to ignore tty interrupt signals.
.
.Mx
.It Fl L Ar spec-list
Display a summary of all
.Ic headers
of only those messages in the specified mailbox or the system
.Va inbox
that match the given
.Ar spec-list ,
then exit.
See the section
.Sx "Specifying messages"
for the format of
.Ar spec-list .
If the
.Fl e
(\*(OB or
.Fl H )
option has been given in addition no header summary is produced,
but \*(UA will instead indicate via its exit status whether
.Ar spec-list
matched any messages
.Pf ( Ql 0 )
or not
.Pf ( Ql 1 ) ;
note that any verbose output is suppressed in this mode and must instead
be enabled explicitly (e.g., by using the option
.Fl v ) .
.
.Mx
.It Fl M Ar type
Special send mode that will flag standard input with the MIME
.Ql Content-Type:
set to the given
.Ar type
and use it as the main message body.
\*(ID Using this option will bypass processing of
.Va message-inject-head ,
.Va signature
and
.Va message-inject-tail .
Also see
.Fl q , m , t .
.
.Mx
.It Fl m Ar file
Special send mode that will MIME classify the specified
.Ar file
and use it as the main message body.
\*(ID Using this option will bypass processing of
.Va message-inject-head ,
.Va signature
and
.Va message-inject-tail .
Also see
.Fl q , M , t .
.
.Mx
.It Fl N
.Pf Un Ic set
.Va header
and thus inhibit initial display of message headers when reading mail or
editing a mail folder.
.
.Mx
.It Fl n
Standard flag that inhibits reading the system wide
.Pa \*(UR
upon startup.
The option
.Fl \&:
allows more control over the startup sequence; also see
.Sx "Resource files" .
.
.Mx
.It Fl q Ar file
Special send mode that will initialize the message body with the
contents of the specified
.Ar file ,
which may be standard input
.Ql -
only in non-interactive context.
Also see
.Fl M , m , t .
.
.Mx
.It Fl R
Any folder opened will be in read-only mode.
.
.Mx
.It Fl r Ar from-addr
If
.Ar from-addr
is a valid address then it specifies the envelope sender address to be
passed to a file-based
.Va mta
(Mail-Transfer-Agent) as
.Ql -f Ar address
when a message is send.
Shall
.Ar from-addr
include a user name, then the address components will be separated and
the name part will be passed to file-based
.Va mta
individually via
.Ql -F Ar name .
The given
.Ar from-addr
will also be assigned to the
.Va from
variable (as via
.Ql -Sfrom=from-addr ) ,
therefore affecting possible SMTP
.Va mta
data transfer; note this assignment does not cause value fixation.
.Pp
If instead an empty string is passed as
.Ar from-addr
then the content of the variable
.Va from
will be evaluated and used for this purpose whenever the
.Va mta
is contacted.
Note that \*(UA by default, without
.Fl \&\&r
that is, neither passes
.Fl \&\&f
nor
.Fl \&\&F
flags to a file-based MTA by itself.
.
.Mx
.It Fl S Ar var Ns Op = Ns value
.Ic set
the internal
.Ar var Ns
iable and, in case of a non-boolean variable which has a value, assign
.Ar value
to it.
Even though
.Sx "INTERNAL VARIABLES"
.Ic \&\&set
via
.Fl S
may be overwritten from within resource files,
the command line setting will be reestablished after all resource files
have been loaded.
.
.Mx
.It Fl s Ar subject
Specify the subject of the to-be-sent message.
.
.Mx
.It Fl t
The message given (on standard input) is expected to contain, separated
from the message body by an empty line, a message header with
.Ql To: ,
.Ql Cc: ,
or
.Ql Bcc:
fields giving its recipients, which will be added to any recipients
specified on the command line.
If a message subject is specified via
.Ql Subject:
then it will be used in favour of one given on the command line.
.Pp
Also understood are
.Ql Reply-To:
(possibly overriding
.Va replyto ) ,
.Ql Sender:
.Pf ( Va sender ) ,
.Ql From:
.Pf ( Va from
and / or option
.Fl r ) .
.Ql Message-ID: ,
.Ql In-Reply-To: ,
.Ql References:
and
.Ql Mail-Followup-To: ,
by default created automatically dependent on message context, will
be used if specified (a special address massage will however still occur
for the latter).
Any other (even custom) header field is passed through entirely
unchanged, and in conjunction with the option
.Fl ~
it is even possible to embed
.Sx "COMMAND ESCAPES" .
Also see
.Fl M , m , q .
.
.Mx
.It Fl u Ar user
Initially read the primary system mailbox of
.Ar user ,
appropriate privileges presumed; effectively identical to
.Ql -f %user .
.
.Mx
.It Fl V
Show \*(UA's
.Va version
and exit.
The command
.Ic version
will also show the list of
.Va features :
.Ql $ \*(uA -Xversion -Xx .
.
.Mx
.It Fl v
.Ic set Ns
ting the internal variable
.Va verbose
enables display of some informational context messages.
Using it twice increases the level of verbosity.
.
.Mx
.It Fl X Ar cmd
Add the given (or multiple for a multiline argument)
.Ar cmd
to the list of commands to be executed (as a unit, just as via
.Ic source )
before normal operation starts.
Correlates with
.Fl #
and
.Va batch-exit-on-error ;
the only possibility to execute commands in non-interactive mode when
reading startup files is actively prohibited.
.
.Mx
.It Fl ~
Enable
.Sx "COMMAND ESCAPES"
even if not in interactive mode.
This can be used to, e.g., automatically format the composed message
text before sending the message:
.Bd -literal -offset indent
$ ( echo 'line    one. Word.     Word2.'; \e
    echo '~| /usr/bin/fmt -tuw66' ) |\e
  LC_ALL=C \*(uA -:/ -Sttycharset=UTF-8 -d~ bob@exam.ple
.Ed
.
.Mx
.It Fl #
Enables batch mode.
In batch mode the full set of commands is available, just like in
interactive mode, and diverse variable settings and internal states are
adjusted for batch necessities, e.g., it
.Ic set Ns
s
.Va emptystart ,
.Pf no Va header ,
.Va quiet ,
.Va sendwait ,
.Va typescript-mode
as well as
.Ev MAIL ,
.Ev MBOX
and
.Va inbox
(the latter three to
.Pa /dev/null ) ;
processing of
.Sx "COMMAND ESCAPES"
is enabled in compose mode.
The following prepares an email message in a batched dry run:
.Bd -literal -offset indent
$ LC_ALL=C printf 'm bob\en~s ubject\enText\en~.\enx\en' | \e
  LC_ALL=C \*(uA -:/ -d# -X'alias bob bob@exam.ple'
.Ed
.
.Mx
.It Fl \&.
This flag forces termination of option processing in order to prevent
.Dq option injection
(attacks).
It also forcefully puts \*(UA into send mode, see
.Sx "On sending mail, and non-interactive mode" .
.El
.
.Pp
In the above list of supported command line options,
.Fl d , E , i , N
and
.Fl v
are implemented by means of
.Ic set Ns
ting the respective internal variable, as via
.Fl S .
.Bk -words
.Op Ar mta-option ...
.Ek
arguments that are given at the end of the command line after a
.Ql --
separator will be passed through to a file-based
.Va mta
(Mail-Transfer-Agent) and persist for an entire (interactive) session
\(en if the setting of
.Va expandargv
allows their recognition; no such constraints apply to the variable
.Va mta-arguments .
.\" }}}
.
.\" .Ss "A starter" {{{
.Ss "A starter"
.
\*(UA is a direct descendant of
.Bx
Mail, a successor of the Research
.Ux
mail which
.Dq was there from the start
according to
.Sx HISTORY .
The
.Bx
Mail reference manual begins with the following words:
.
.Bd -ragged -offset indent
Mail provides a simple and friendly environment for sending and
receiving mail.
It divides incoming mail into its constituent messages and allows the
user to deal with them in any order.
In addition, it provides a set of
.Xr ed 1 Ns
-like commands for manipulating messages and sending mail.
Mail offers the user simple editing capabilities to ease the composition
of outgoing messages, as well as providing the ability to define and
send to names which address groups of users.
.Ed
.
.Pp
\*(UA is thus the user side of the
.Ux
mail system, whereas the system side (Mail-Transfer-Agent, MTA) was
traditionally taken by
.Xr sendmail 8 ,
and most MTAs provide a binary of this name for compatibility purposes.
If the \*(OPal SMTP
.Va mta
is included in the
.Va features
of \*(UA then the system side is not a mandatory precondition for mail
delivery.
.
.Pp
Because \*(UA strives for compliance with POSIX
.Xr mailx 1
it is likely that some configuration settings have to be adjusted before
using it is a smooth experience.
The default global
.Pa \*(UR
resource file bends those standard imposed settings of the
.Sx "INTERNAL VARIABLES"
a bit towards more user friendliness and safety, however, e.g., it
.Ic set Ns s
.Va hold
and
.Va keepsave
in order to suppress the automatic moving of messages to
.Ev MBOX
that would otherwise occur (see
.Sx "Message states" ) ,
and
.Va keep
to not remove empty files in order not to mangle file permissions when
files eventually get recreated (\*(UA actively manages the file mode
creation mask via
.Va umask
upon program startup).
.
.Pp
It also enables
.Va sendwait
in order to synchronize \*(UA with the exit status report of the used
.Va mta
when sending mails.
It sets
.Va emptystart
to enter interactive startup even if the initial mailbox is empty,
.Va editheaders
to allow editing of headers as well as
.Va fullnames
to not strip down addresses in compose mode, and
.Va quote
to include the message that is being responded to when
.Ic reply Ns
ing.
The section
.Sx EXAMPLES
contains some more complete configuration examples.
.\" }}}
.
.\" .Ss "On sending mail, and non-interactive mode" {{{
.Ss "On sending mail, and non-interactive mode"
.
To send a message to one or more people, using a local or a builtin
.Va mta
(Mail-Transfer-Agent) transport to actually deliver the generated mail
message, \*(UA can be invoked with arguments which are the names of
people to whom the mail will be sent, and the command line options
.Fl b
and
.Fl c
can be used to add (blind) carbon copy receivers:
.
.Bd -literal -offset indent
$ \*(uA -s ubject -a ttach.txt bill@exam.ple
# But... try it in an isolated dry-run mode first
$ LC_ALL=C \*(uA -:/ -d -vv -Ssendwait \e
   -b bcc@exam.ple -c cc@exam.ple -. \e
   '(Lovely) Bob <bob@exam.ple>' eric@exam.ple
# With SMTP
$ LC_ALL=C \*(uA -:/ -d -vv -Sv15-compat -Ssendwait \e
    -S 'mta=smtps://mylogin@exam.ple:465' -Ssmtp-auth=login \e
    -S 'from=scriptreply@exam.ple' \e
    -a /etc/mail.rc \e
    -. eric@exam.ple
.Ed
.
.Pp
If standard input is a terminal rather than the message to be sent,
the user is expected to type in the message contents.
In this compose mode \*(UA treats lines beginning with the character
.Ql ~
special \(en these are so-called
.Sx "COMMAND ESCAPES"
which can be used to read in files, process shell commands, add and edit
attachments and more; e.g., the command escape
.Ql Ic ~e
will start the text editor to revise the message in its current state,
.Ql Ic ~h
allows editing of the most important message headers and
.Ql Ic ~?
gives an overview of available command escapes.
Typing
.Ql control-D
.Pf ( Ql ^D )
at the beginning of an empty line leaves compose mode and causes the
message to be sent, whereas typing
.Ql control-C
.Pf ( Ql ^C )
twice will abort the current letter (saving its contents in the file
denoted by
.Ev DEAD
unless
.Pf no Va save
is set).
Messages are sent asynchronously, without supervision, unless the variable
.Va sendwait
is set, therefore send errors are not recognizable until then.
.
.Pp
A number of
.Sx ENVIRONMENT
and
.Sx "INTERNAL VARIABLES"
can be used to alter default behavior; e.g.,
.Ic set Ns
ting (also via
.Fl S )
.Va editalong
will automatically startup a text editor when compose mode is entered,
.Va editheaders
allows editing of headers additionally to plain body content,
.Va askcc
will cause the user to be prompted actively for carbon-copy recipients
and setting
.Va dot
will allow leaving compose mode by writing a line consisting solely of
a dot
.Pf ( Ql \&. ) .
.Va on-compose-enter
and
.Va on-compose-leave
hook macros may be set to automatically adjust some settings dependent
on receiver, sender or subject contexts.
.
.Pp
Especially for using public mail provider accounts with the SMTP
.Va mta
it is often necessary to set
.Va from ,
and saving a copy of sent messages in a
.Va record
may be desirable \(en as for most mailbox file targets some special
syntax conventions are recognized (see the
.Ic file
command for more on that).
Defining user email
.Ic account Ns s
for the purpose of arranging a complete environment of settings that can
be switched to with a single command or command line option may be
useful (the section
.Sx EXAMPLES
contains example configurations for sending messages via some of the
well-known public mail providers and also gives a compact overview on
how to setup a secure SSL/TLS environment).
Performing some
.Fl d
or
.Va debug
sandbox dry-run tests first will prove correctness.
.
.Pp
The section
.Sx "On URL syntax and credential lookup"
will spread light on the different ways of how to specify user email
account credentials, the
.Ql USER@HOST
variable chains, and accessing protocol-specific resources,
the section
.Sx "Character sets"
goes into the details of character encoding and how to use them for
representing messages and MIME part contents by specifying them in
.Va sendcharsets ,
and reading the section
.Sx "The mime.types files"
should help to understand how the MIME-type of outgoing attachments are
classified, and what can be done for fine-tuning.
Over the wire an intermediate, configurable
.Pf content-transfer-\: Va encoding
may be applied to the raw message part data.
.
.Pp
Message recipients (as specified on the command line or defined in
.Ql To: ,
.Ql Cc:
or
.Ql Bcc: )
may not only be email addressees but can also be names of mailboxes and
even complete shell command pipe specifications.
If the variable
.Va expandaddr
is not set then only network addresses (see
.Xr mailaddr 7
for a description of mail addresses) and plain user names (including MTA
aliases) may be used, other types will be filtered out, giving a warning
message.
.
.\" When changing any of the following adjust any RECIPIENTADDRSPEC;
.\" grep the latter for the complete picture
.Pp
If the variable
.Va expandaddr
is set then extended recipient addresses will optionally be accepted:
Any name which starts with a vertical bar
.Ql |
character specifies a command pipe \(en the command string following the
.Ql |
is executed and the message is sent to its standard input;
Likewise, any name that starts with the character solidus
.Ql /
or the character sequence dot solidus
.Ql ./
is treated as a file, regardless of the remaining content;
likewise a name that solely consists of a hyphen
.Ql - .
Any other name which contains an at sign
.Ql @
character is treated as a network address;
Any other name which starts with a plus sign
.Ql +
character specifies a mailbox name;
Any other name which contains a solidus
.Ql /
character but no exclamation mark
.Ql \&!
or percent sign
.Ql %
character before also specifies a mailbox name;
What remains is treated as a network address.
.
.Bd -literal -offset indent
$ echo bla | \*(uA -Sexpandaddr -s test ./mbox.mbox
$ echo bla | \*(uA -Sexpandaddr -s test '|cat >> ./mbox.mbox'
$ echo safe | LC_ALL=C \e
    \*(uA -:/ -Sv15-compat -Ssendwait -Snosave \e
      -Sexpandaddr=fail,-all,+addr -s test \e
      -. bob@exam.ple
.Ed
.
.Pp
It is possible to create personal distribution lists via the
.Ic alias
command, so that, for instance, the user can send mail to
.Ql cohorts
and have it go to a group of people.
These aliases have nothing in common with the system wide aliases that
may be used by the MTA, which are subject to the
.Ql name
constraint of
.Va expandaddr
and are often tracked in a file
.Pa /etc/aliases
(and documented in
.Xr aliases 5
and
.Xr sendmail 1 ) .
Personal aliases will be expanded by \*(UA before the message is sent,
and are thus a convenient alternative to specifying each addressee by
itself:
.
.Pp
.Dl alias cohorts bill jkf mark kridle@ucbcory ~/mail/cohorts.mbox
.
.Pp
To avoid environmental noise scripts should
.Dq detach
\*(UA from any configuration files and create a script-local
environment, ideally with the command line options
.Fl \&:
to disable any configuration file in conjunction with repetitions of
.Fl S
to specify variables:
.
.Bd -literal -offset indent
$ env LC_ALL=C \*(uA -:/ \e
    -Sv15-compat -Ssendwait -Snosave -Sttycharset=utf-8 \e
    -Sexpandaddr=fail,-all,+addr \e
    -S 'mta=smtps://mylogin@exam.ple:465' -Ssmtp-auth=login \e
    -S 'from=scriptreply@exam.ple' \e
    -s 'subject' -a attachment_file \e
    -. "Recipient 1 <rec1@exam.ple>" rec2@exam.ple \e
    < content_file
.Ed
.
.Pp
As shown, scripts can
.Dq fake
a locale environment, the above specifies the all-compatible 7-bit clean
.Ev LC_ALL
.Dq C ,
but will nonetheless take and send UTF-8 in the message text by using
.Va ttycharset .
In interactive mode, which is introduced in the next section, messages
can be sent by calling the
.Ic mail
command with a list of recipient addresses \(em the semantics are
completely identical to non-interactive message sending:
.
.Bd -literal -offset indent
$ \*(uA -d -Squiet -Semptystart
"/var/spool/mail/user": 0 messages
? mail "Recipient 1 <rec1@exam.ple>", rec2@exam.ple
? # Will do the right thing (tm)
? m rec1@exam.ple rec2@exam.ple
.Ed
.\" }}}
.
.\" .Ss "On reading mail, and interactive mode" {{{
.Ss "On reading mail, and interactive mode"
.
When invoked without addressees \*(UA enters interactive mode in which
mails may be read.
When used like that the user's system
.Va inbox
(see the command
.Ic file
for an in-depth description of the different mailbox types that exist)
is read in and a one line header of each message therein is displayed.
The visual style of this summary of
.Ic headers
can be adjusted through the variable
.Va headline
and the possible sorting criterion via
.Va autosort .
Scrolling through
.Va screen Ns
fuls of
.Ic headers
can be performed with the command
.Ic z .
If the initially opened mailbox is empty \*(UA will instead exit
immediately (after displaying a message) unless the variable
.Va emptystart
is set.
.
.Pp
At the
.Va prompt
the command
.Ic list
will give a listing of all available commands and
.Ic help
will give a summary of some common ones.
If the \*(OPal documentation strings are available one can type
.Ql help X
.Pf "(or " Ql ?X )
and see the actual expansion of
.Ql X
and what its purpose is, i.e., commands can be abbreviated
(note that POSIX defines some abbreviations, so that the alphabetical
order of commands does not necessarily relate to the abbreviations; it is
possible to define overwrites with the
.Ic ghost
command, however).
These commands can also produce a more
.Va verbose
output.
.
.Pp
Messages are given numbers (starting at 1) which uniquely identify
messages; the current message \(en the
.Dq dot
\(en will either be the first new message, or the first unread message,
or the first message of the mailbox; the internal variable
.Va showlast
will instead cause usage of the last message for this purpose.
The command
.Ic headers
will display a
.Va screen Ns
ful of header summaries containing the
.Dq dot ,
whereas
.Ic from
will display only the summaries of the given messages, defaulting to the
.Dq dot .
.
.Pp
Message content can be displayed on the users' terminal with the
.Ic type
command (shortcut
.Ql t ) .
If instead the command
.Ic top
is used, only the first
.Va toplines
of a message will be shown.
By default the current message
.Pf ( Dq dot )
is displayed, but like with many other commands it is possible to give
a fancy message specification (see
.Sx "Specifying messages" ) ,
e.g.,
.Ql t:u
will display all unread messages,
.Ql t.
will display the
.Dq dot ,
.Ql t 1 5
will type the messages 1 and 5,
.Ql t 1-5
will type the messages 1 through 5, and
.Ql t-
and
.Ql t+
will display the last and the next message, respectively.
The command
.Ic search
(a more substantial alias of the standard command
.Ic from )
will display a header summary of the given message specification list
instead of their content, e.g., the following will search for subjects:
.
.Pp
.Dl from "'@Some subject to search for'"
.
.Pp
In the default setup all header fields of a message will be
.Ic type Ns
d, but this can be changed: either by blacklisting a list of fields via
.Ic ignore ,
or by whitelisting only a given list with the
.Ic retain
command, e.g.,
.Ql Ic \:retain Ns \0from_ date from to cc subject .
In order to display all header fields of a message regardless of
currently active ignore or retain lists, use the commands
.Ic Type
and
.Ic Top .
The variable
.Va crt
controls whether and when \*(UA will use the configured
.Ev PAGER
for display instead of directly writing to the user terminal
.Va screen
(generally speaking).
Note that historically the global
.Pa \*(UR
not only adjusts the list of displayed headers, but also sets
.Va crt .
.
.Pp
Dependent upon the configuration a line editor (see the section
.Sx "On terminal control and line editor" )
aims at making user experience with the many
.Sx COMMANDS
a bit nicer.
When reading the system
.Va inbox
or when
.Fl f
(or
.Ic file )
specified a mailbox explicitly prefixed with the special
.Ql %:
modifier (propagating the mailbox to a primary one) then messages which
have been read will be moved to a secondary mailbox, the user's
.Ev MBOX
file, automatically when the mailbox is left, either by changing the
active mailbox or by quitting \*(UA (also see
.Sx "Message states" )
\(en this automatic moving from a system or primary to the secondary
mailbox is not performed when the variable
.Va hold
is set.
.
.Pp
After examining a message the user can also
.Ic delete Ql d
the message,
.Ic reply Ql r
to the sender and all recipients or
.Ic Reply Ql R
exclusively to the sender(s).
Messages can also be
.Ic forward Ns
ed (shorter alias is
.Ic fwd Ns ).
Note that when replying to or forwarding a message recipient addresses
will be stripped from comments and names unless the internal variable
.Va fullnames
is set.
Deletion causes \*(UA to forget about the message;
This is not irreversible, though, one can
.Ic undelete Ql u
the message by giving its number,
or the \*(UA session can be ended by giving the
.Ic exit Ql x
command.
.
.Pp
To end a mail processing session one may either issue
.Ic quit Ql q
to cause a full program exit, which possibly includes
automatic moving of read messages to
.Ev MBOX
as well as updating the \*(OPal line editor
.Va history-file ,
or use the command
.Ic exit Ql x
instead in order to prevent any of these actions.
.\" }}}
.
.\" .Ss "HTML mail and MIME attachments" {{{
.Ss "HTML mail and MIME attachments"
.
Messages which are HTML-only get more and more common and of course many
messages come bundled with a bouquet of MIME attachments.
Whereas \*(UA \*(OPally supports a simple HTML-to-text converter to deal
with HTML messages (see
.Sx "The mime.types files" ) ,
it normally cannot deal with any of these itself, but instead programs
need to become registered to deal with specific MIME types or file
extensions.
These programs may either prepare plain text versions of their input
in order to enable \*(UA to display the content on the terminal,
or display the content themselves, for example in a graphical window.
.
.Pp
To install an external handler program for a specific MIME type set an
according
.Va pipe-TYPE/SUBTYPE
variable; to instead define a handler for a specific file extension set
the respective
.Va pipe-EXTENSION
variable \(en these handlers take precedence.
\*(OPally \*(UA supports mail user agent configuration as defined in
RFC 1524; this mechanism, documented in the section
.Sx "The Mailcap files" ,
will be queried for display or quote handlers if none of the former two
.\" TODO v15-compat "will be" -> "is"
did; it will be the sole source for handlers of other purpose.
A last source for handlers may be the MIME type definition itself, if
the \*(UA specific type-marker extension was used when defining the type
with the command
.Ic mimetype .
(Many of the builtin MIME types do so by default.)
.
.Pp
The variable
.Va mime-counter-evidence
can be set to improve dealing with faulty MIME part declarations as are
often seen in real-life messages.
E.g., to display a HTML message inline (that is, converted to a more
fancy plain text representation than the builtin converter is capable to
produce) with either of the text-mode browsers
.Xr lynx 1
or
.Xr elinks 1 ,
teach \*(UA about MathML documents and make it display them as plain
text, and to open PDF attachments in an external PDF viewer,
asynchronously and with some other magic attached:
.
.Bd -literal -offset indent
if $features !@ +filter-html-tagsoup
  #set pipe-text/html='elinks -force-html -dump 1'
  set pipe-text/html='lynx -stdin -dump -force_html'
  # Display HTML as plain text instead
  #set pipe-text/html=@
endif
mimetype '@ application/mathml+xml mathml'
wysh set pipe-application/pdf='@&=@ \e
  trap "rm -f \e"${NAIL_FILENAME_TEMPORARY}\e"" EXIT;\e
  trap "trap \e"\e" INT QUIT TERM; exit 1" INT QUIT TERM;\e
  mupdf "${NAIL_FILENAME_TEMPORARY}"'
.Ed
.
.Pp
Note: special care must be taken when using such commands as mail
viruses may be distributed by this method: if messages of type
.Ql application/x-sh
or files with the extension
.Ql .sh
were blindly filtered through the shell, for example, a message sender
could easily execute arbitrary code on the system \*(UA is running on.
For more on MIME, also in respect to sending of messages, see the
sections
.Sx "The mime.types files" ,
.Sx "The Mailcap files"
and the command
.Ic mimetype .
.\" }}}
.
.\" .Ss "Mailing lists" {{{
.Ss "Mailing lists"
.
\*(UA offers some support to ease handling of mailing lists.
The command
.Ic mlist
promotes all given arguments to known mailing lists, and
.Ic mlsubscribe
sets their subscription attribute, creating them first as necessary.
(On the other hand
.Ic unmlsubscribe
does not
.Ic unmlist
automatically, but only resets the subscription attribute.)
Using the commands without arguments will show (a subset of) all
currently defined mailing lists.
The
.Va headline
format
.Ql \&%T
can be used to mark out messages with configured list addresses
in the header display.
.
.Pp
\*(OPally mailing lists may also be specified as (extended) regular
expressions, which allows matching of many addresses with a single
expression.
However, all fully qualified list addresses are matched via a fast
dictionary, whereas expressions are placed in (a) list(s) which is
(are) matched sequentially.
.
.Bd -literal -offset indent
set followup-to followup-to-honour=ask-yes reply-to-honour=ask-yes
wysh mlist a1@b1.c1 a2@b2.c2 '.*@lists\e.c3$'
mlsubscribe a4@b4.c4 exact@lists.c3
.Ed
.
.Pp
The variable
.Va followup-to-honour
will ensure that a
.Ql Mail-\:Followup-\:To:
header is honoured when the message is being replied to (via
.Ic reply
and
.Ic Lreply )
and
.Va followup-to
controls whether this header is created when sending mails; it will be
created automatically for a couple of reasons, too, like when the
special
.Dq mailing list specific
respond command
.Ic Lreply
is used, when
.Ic reply
is used to respond to a message with its
.Ql Mail-Followup-To:
being honoured etc.
.
.Pp
A difference in between the handling of known and subscribed lists is
that the address of the sender is usually not part of a generated
.Ql Mail-Followup-To:
when addressing the latter, whereas it is for the former kind of lists.
Usually because there are exceptions: say, if multiple lists are
addressed and not all of them are subscribed lists.
.Pp
For convenience \*(UA will, temporarily, automatically add a list
address that is presented in the
.Ql List-To:
header of a message that is being responded to to the list of known
mailing lists.
Shall that header have existed \*(UA will instead, dependent on the
variable
.Va reply-to-honour ,
use an also set
.Ql Reply-To:
for this purpose in order to accept a list administrators' wish that
is supposed to have been manifested like that (but only if it provides
a single address which resides on the same domain as what is stated in
.Ql List-To: ) .
.\" }}}
.
.\" .Ss "Resource files" {{{
.Ss "Resource files"
.
Upon startup \*(UA reads in several resource files:
.
.Bl -tag -width ".It Pa _AIL_EXTRA_R_"
.Mx
.It Pa \*(UR
System wide initialization file.
Reading of this file can be suppressed, either by using the
.Fl \&:
or
.Fl n
command line options, or by setting the
.Sx ENVIRONMENT
variable
.Ev NAIL_NO_SYSTEM_RC .
.
.Mx
.It Pa \*(ur
File giving initial commands.
A different file can be chosen by setting the
.Sx ENVIRONMENT
variable
.Ev MAILRC .
Reading of this file can be suppressed with the
.Fl \&:
command line option.
.
.It Va NAIL_EXTRA_RC
Can be used to define an optional startup file to be read after all
other resource files.
It can be used to specify settings that are not understood by other
.Xr mailx 1
implementations, for example.
This variable is only honoured when defined in a resource file, e.g.,
it is one of the
.Sx "INTERNAL VARIABLES" .
.El
.
.Pp
The content of these files is interpreted as follows:
.
.Pp
.Bl -bullet -compact
.It
A lines' leading whitespace is removed.
.It
Empty lines are ignored.
.It
Any other line is interpreted as a command.
It may be spread over multiple input lines if the newline character is
.Dq escaped
by placing a reverse solidus character
.Ql \e
as the last character of the line; whereas any leading whitespace of
follow lines is ignored, trailing whitespace before a escaped newline
remains in the input.
.It
If the line (content) starts with the number sign
.Ql #
then it is a comment-command \(en a real command! \(en and also ignored.
This command is the only form of comment that is understood.
.El
.
.Pp
Unless \*(UA is about to enter interactive mode syntax errors that occur
while loading these files are treated as errors and cause program exit.
More files with syntactically equal content can be
.Ic source Ns ed .
The following, saved in a file, would be an examplary content:
.
.Bd -literal -offset indent
 # This line is a comment command.  And y\e
    es, it is really continued here.
set debug \e
    verbose
    set editheaders
.Ed
.\" }}}
.
.\" .Ss "Character sets" {{{
.Ss "Character sets"
.
\*(OP \*(UA detects the character set of the terminal by using
mechanisms that are controlled by the
.Ev LC_CTYPE
locale setting
(the manual for
.Xr setlocale 3
should give an overview); the \*(UA internal variable
.Va ttycharset
will be set to the detected terminal character set accordingly
and will thus show up in the output of the commands
.Ic set
and
.Ic varshow .
.
.Pp
However, a user supplied
.Va ttycharset
value is not overwritten by this detection mechanism: this
.Dq feature
must be used if the detection does not work properly,
and it may be used to adjust the name of the locale character set.
E.g., on BSD systems one may use a locale with the character set
ISO8859-1, which is not a valid name for this character set; to be on
the safe side, one may set
.Va ttycharset
to the correct name, which is ISO-8859-1.
.
.Pp
Note that changing the value does not mean much beside that,
since several aspects of the real character set are implied by the
locale environment of the system,
and that stays unaffected by the content of an overwritten
.Va ttycharset
variable.
(This is mostly an issue when interactively using \*(UA, though.
It is actually possible to send mail in a completely
.Dq faked
locale environment, an option that \*(UA's test-suite uses excessively.)
.
.Pp
If no character set conversion capabilities have been compiled into
\*(UA
.Pf ( Va features
does not include the term
.Ql +iconv ) ,
then
.Va ttycharset
will be the only supported character set,
it is simply assumed that it can be used to exchange 8-bit messages
(over the wire an intermediate
.Pf content-transfer-\: Va encoding
may be applied),
and the rest of this section does not apply;
it may however still be necessary to explicitly set it if automatic
detection fails, since in that case it defaults to the mentioned
.\" (Keep in SYNC: ./nail.1:"Character sets", ./nail.h:CHARSET_*!)
ISO-8859-1.
.
.Pp
When reading messages, their text is converted into
.Va ttycharset
as necessary in order to display them on the users terminal.
Unprintable characters and invalid byte sequences are detected
and replaced by proper substitution characters (unless the variable
.Va print-all-chars
was set once \*(UA was started).
Also see
.Va charset-unknown-8bit
to deal with another hairy aspect of message interpretation.
.
.Pp
When sending messages all their parts and attachments are classified.
Whereas no character set conversion is performed on those parts which
appear to be binary data,
the character set being used must be declared within the MIME header of
an outgoing text part if it contains characters that do not conform to
the set of characters that are allowed by the email standards.
Permissible values for character sets can be declared using the
.Va sendcharsets
variable, and
.Va charset-8bit ,
which defines a catch-all last-resort fallback character set that is
implicitly appended to the list of character-sets in
.Va sendcharsets .
.
.Pp
When replying to a message and the variable
.Va reply-in-same-charset
is set then the character set of the message being replied to is tried
first.
And it is also possible to make \*(UA work even more closely related to
the current locale setting automatically by using the variable
.Va sendcharsets-else-ttycharset ,
please see there for more information.
.
.Pp
All the specified character sets are tried in order unless the
conversion of the part or attachment succeeds.
If none of the tried (8-bit) character sets is capable to represent the
content of the part or attachment,
then the message will not be sent and its text will optionally be
.Va save Ns d
in
.Ev DEAD .
In general, if the message
.Dq Cannot convert from a to b
appears, either some characters are not appropriate for the currently
selected (terminal) character set,
or the needed conversion is not supported by the system.
In the first case, it is necessary to set an appropriate
.Ev LC_CTYPE
locale and/or the variable
.Va ttycharset .
.
.Pp
The best results are usually achieved when \*(UA is run in a UTF-8
locale on a UTF-8 capable terminal, in which case the full Unicode
spectrum of characters is available.
In this setup characters from various countries can be displayed,
while it is still possible to use more simple character sets for sending
to retain maximum compatibility with older mail clients.
.
.Pp
On the other hand the POSIX standard defines a locale-independent 7-bit
.Dq portable character set
that should be used when overall portability is an issue, the even more
restricted subset named
.Dq portable filename character set
consisting of A-Z, a-z, 0-9, period
.Ql \&. ,
underscore
.Ql _
and
.Ql -
hyphen.
.\" }}}
.
.\" .Ss "Message states" {{{
.Ss "Message states"
.
\*(UA differentiates in between several different message states;
the current state will be reflected in header summary displays if
.Va headline
is configured to do so (via the internal variable
.Va attrlist ) ,
and messages can also be selected and be acted upon depending on their
state (see
.Sx "Specifying messages" ) .
When operating on the system
.Va inbox
or in primary mailboxes opened with the special prefix
.Ql %:
(see
.Ic file )
special actions, like the automatic moving of messages to the secondary
.Ev MBOX
mailbox may be applied when the mailbox is left (also implicitly via
a successful exit of \*(UA, but not if the special command
.Ic exit
is used) \(en however, because this may be irritating to users which
are used to
.Dq more modern
mail-user-agents, the default global
.Pa \*(UR
sets the internal
.Va hold
and
.Va keepsave
variables in order to suppress this behaviour.
.
.Bl -tag -width ".It Ql _reserved"
.It Ql new
Message has neither been viewed nor moved to any other state.
Such messages are retained even in the primary system mailbox.
.
.It Ql unread
Message has neither been viewed nor moved to any other state, but the
message was present already when the mailbox has been opened last:
Such messages are retained even in the primary system mailbox.
.
.It Ql read
The message has been processed by one of the following commands:
.Ic ~f ,
.Ic ~m ,
.Ic ~F ,
.Ic ~M ,
.Ic copy ,
.Ic mbox ,
.Ic next ,
.Ic pipe  ,
.Ic Print ,
.Ic print ,
.Ic top ,
.Ic Type ,
.Ic type ,
.Ic undelete .
The
.Ic delete ,
.Ic dp ,
and
.Ic dt
commands may also cause the next message to be marked as read, depending
on the value of the
.Va autoprint
variable.
Except when the
.Ic exit
command is used, messages that are in the primary system mailbox or in
mailboxes which were opened with the special
.Ql %:
prefix and are in
.Ql read
state when the mailbox is left will be saved in
.Ev MBOX
unless the internal variable
.Va hold
it set.
.
.It Ql deleted
The message has been processed by one of the following commands:
.Ic delete ,
.Ic dp ,
.Ic dt .
Only
.Ic undelete
can be used to access such messages.
.
.It Ql preserved
The message has been processed by a
.Ic preserve
command and it will be retained in its current location.
.
.It Ql saved
The message has been processed by one of the following commands:
.Ic save
or
.Ic write .
Unless when the
.Ic exit
command is used, messages that are in the primary system mailbox or in
mailboxes which were opened with the special
.Ql %:
prefix and are in
.Ql saved
state when the mailbox is left will be deleted; they will be saved in
.Ev MBOX
when the internal variable
.Va keepsave
is set.
.El
.\" }}}
.
.\" .Ss "Specifying messages" {{{
.Ss "Specifying messages"
.
Commands such as
.Ic from ,
.Ic type
and
.Ic delete
can be given a list of message numbers as arguments to apply to a number
of messages at once.
Thus
.Ql delete 1 2
deletes messages 1 and 2,
whereas
.Ql delete 1-5
will delete the messages 1 through 5.
In sorted or threaded mode (see the
.Ic sort
command),
.Ql delete 1-5
will delete the messages that are located between (and including)
messages 1 through 5 in the sorted/threaded order, as shown in the
.Ic headers
summary.
The following special message names exist:
.
.
.Bl -tag -width ".It Ar _n_u"
.It Ar \&.
The current message, the so-called
.Dq dot .
.
.It Ar \&;
The message that was previously the current message.
.
.It Ar \&,
The parent message of the current message,
that is the message with the Message-ID given in the
.Ql In-Reply-To:
field or the last entry of the
.Ql References:
field of the current message.
.
.It Ar -
The next previous undeleted message,
or the next previous deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the next previous such message in the sorted/threaded order.
.
.It Ar +
The next undeleted message,
or the next deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the next such message in the sorted/threaded order.
.
.It Ar ^
The first undeleted message,
or the first deleted message for the
.Ic undelete
command.
In sorted/threaded mode,
the first such message in the sorted/threaded order.
.
.It Ar $
The last message.
In sorted/threaded mode,
the last message in the sorted/threaded order.
.
.It Ar & Ns Ar x
In threaded mode,
selects the message addressed with
.Ar x ,
where
.Ar x
is any other message specification,
and all messages from the thread that begins at it.
Otherwise it is identical to
.Ar x .
If
.Ar x
is omitted,
the thread beginning with the current message is selected.
.
.It Ar *
All messages.
.It Ar `
All messages that were included in the message list for the previous
command.
.
.It Ar x-y
An inclusive range of message numbers.
Selectors that may also be used as endpoints include any of
.Ar .;-+^$ .
.
.It Ar address
A case-insensitive
.Dq any substring matches
search against the
.Ql From:
header, which will match addresses (too) even if
.Va showname
is set (and POSIX says
.Dq any address as shown in a header summary shall be matchable in this form ) ;
However, if the
.Va allnet
variable is set, only the local part of the address is evaluated
for the comparison, not ignoring case, and the setting of
.Va showname
is completely ignored.
For finer control and match boundaries use the
.Ql @
search expression.
.
.It Ar / Ns Ar string
All messages that contain
.Ar string
in the subject field (case ignored).
See also the
.Va searchheaders
variable.
If
.Ar string
is empty,
the string from the previous specification of that type is used again.
.
.It Xo Op Ar @ Ns Ar name-list Ns
.Ar @ Ns Ar expr
.Xc
All messages that contain the given case-insensitive search
.Ar expr Ns
ession; if the \*(OPal regular expression (see
.Xr re_format 7 )
support is available
.Ar expr
will be interpreted as (an extended) one if any of the
.Dq magical
(extended) regular expression characters is seen.
If the optional
.Ar @ Ns Ar name-list
part is missing, the search is restricted to the subject field body,
but otherwise
.Ar name-list
specifies a comma-separated list of header fields to search, as in
.Pp
.Dl '@to,from,cc@Someone i ought to know'
.Pp
In order to search for a string that includes a
.Ql @
(commercial at) character the
.Ar name-list
is effectively non-optional, but may be given as the empty string.
Some special header fields may be abbreviated:
.Ql f ,
.Ql t ,
.Ql c ,
.Ql b
and
.Ql s
will match
.Ql From ,
.Ql To ,
.Ql Cc ,
.Ql Bcc
and
.Ql Subject ,
respectively and case-insensitively.
The special names
.Ql header
or
.Ql <
can be used to search in (all of) the header(s) of the message, and the
special names
.Ql body
or
.Ql >
and
.Ql text
or
.Ql =
can be used to perform full text searches \(en whereas the former
searches only the body, the latter also searches the message header.
.Pp
This message specification performs full text comparison, but even with
regular expression support it is almost impossible to write a search
expression that savely matches only a specific address domain.
To request that the content of the header is treated as a list of
addresses, and to strip those down to the plain email address which the
search expression is to be matched against, prefix the header name
(abbreviation) with a tilde
.Ql ~ :
.Pp
.Dl @~f@@a\e.safe\e.domain\e.match$
.
.It Ar :c
All messages of state
.Ql c ,
where
.Ql c
is one or multiple of the following colon modifiers:
.Pp
.Bl -tag -compact -width ".It Ar :M"
.It Ar n
.Ql new
messages.
.It Ar o
Old messages (any not in state
.Ql read
or
.Ql new ) .
.It Ar u
.Ql unread
messages.
.It Ar d
.Ql deleted
messages (for the
.Ic undelete
and
.Ic from
commands only).
.It Ar r
.Ql read
messages.
.It Ar f
.Ic flag Ns
ged messages.
.It Ar a
Answered messages
(cf. the
.Va markanswered
variable).
.It Ar t
Messages marked as draft.
.It Ar s
\*(OP Messages classified as spam.
.It Ar S
\*(OP Messages with unsure spam classification.
.El
.El
.
.
.Pp
\*(OP IMAP-style SEARCH expressions may also be used.
This addressing mode is available with all types of folders;
\*(UA will perform the search locally as necessary.
Strings must be enclosed by double quotes
.Ql \&"
in their entirety if they contain white space or parentheses;
within the quotes, only reverse solidus
.Ql \e
is recognized as an escape character.
All string searches are case-insensitive.
When the description indicates that the
.Dq envelope
representation of an address field is used,
this means that the search string is checked against both a list
constructed as
.
.Bd -literal -offset indent
(\*qname\*q \*qsource\*q \*qlocal-part\*q \*qdomain-part\*q)
.Ed
.
.Pp
for each address,
and the addresses without real names from the respective header field.
These search expressions can be nested using parentheses, see below for
examples.
.
.Pp
.Bl -tag -compact -width ".It Ar _n_u"
.It Ar ( criterion )
All messages that satisfy the given
.Ar criterion .
.It Ar ( criterion1 criterion2 ... criterionN )
All messages that satisfy all of the given criteria.
.
.It Ar ( or criterion1 criterion2 )
All messages that satisfy either
.Ar criterion1
or
.Ar criterion2 ,
or both.
To connect more than two criteria using
.Ql or
specifications have to be nested using additional parentheses,
as with
.Ql (or a (or b c)) ,
since
.Ql (or a b c)
really means
.Ql ((a or b) and c) .
For a simple
.Ql or
operation of independent criteria on the lowest nesting level,
it is possible to achieve similar effects by using three separate
criteria, as with
.Ql (a) (b) (c) .
.
.It Ar ( not criterion )
All messages that do not satisfy
.Ar criterion .
.It Ar ( bcc \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql Bcc:
field.
.It Ar ( cc \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql Cc:
field.
.It Ar ( from \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql From:
field.
.It Ar ( subject \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the
.Ql Subject:
field.
.It Ar ( to \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the envelope representation of the
.Ql To:
field.
.It Ar ( header name \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in the specified
.Ql Name:
field.
.It Ar ( body \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their body.
.It Ar ( text \*q Ns Ar string Ns Ar \*q )
All messages that contain
.Ar string
in their header or body.
.It Ar ( larger size )
All messages that are larger than
.Ar size
(in bytes).
.It Ar ( smaller size )
All messages that are smaller than
.Ar size
(in bytes).
.
.It Ar ( before date )
All messages that were received before
.Ar date ,
which must be in the form
.Ql d[d]-mon-yyyy ,
where
.Ql d
denotes the day of the month as one or two digits,
.Ql mon
is the name of the month \(en one of
.Ql Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec ,
and
.Ql yyyy
is the year as four digits, e.g.,
.Ql 28-Dec-2012 .
.
.It Ar ( on date )
All messages that were received on the specified date.
.It Ar ( since date )
All messages that were received since the specified date.
.It Ar ( sentbefore date )
All messages that were sent on the specified date.
.It Ar ( senton date )
All messages that were sent on the specified date.
.It Ar ( sentsince date )
All messages that were sent since the specified date.
.It Ar ()
The same criterion as for the previous search.
This specification cannot be used as part of another criterion.
If the previous command line contained more than one independent
criterion then the last of those criteria is used.
.El
.\" }}}
.
.\" .Ss "On URL syntax and credential lookup" {{{
.Ss "On URL syntax and credential lookup"
.
\*(IN For accessing protocol-specific resources usage of Uniform
Resource Locators (URL, RFC 1738) has become omnipresent.
\*(UA expects and understands URLs in the following form;
parts in brackets
.Ql []
denote optional parts, optional either because there also exist other
ways to define the information in question or because support of the
part is protocol-specific (e.g.,
.Ql /path
is used by the IMAP protocol but not by POP3);
If any of
.Ql USER
and
.Ql PASSWORD
are specified they must be given in URL percent encoded form (RFC 3986;
the commands
.Ic urlcodec
may be helpful):
.
.Pp
.Dl PROTOCOL://[USER[:PASSWORD]@]server[:port][/path]
.
.Pp
Note that these \*(UA URLs most often do not conform to any real
standard, but instead represent a normalized variant of RFC 1738 \(en
they are not used in data exchange but only meant as a compact,
easy-to-use way of defining and representing information in
a well-known notation.
.
.Pp
Many internal variables of \*(UA exist in multiple versions, called
variable chains for the rest of this document: the plain
.Ql variable
as well as
.Ql variable-HOST
and
.Ql variable-USER@HOST .
Here
.Ql HOST
indeed means
.Ql server:port
if a
.Ql port
had been specified in the respective URL, otherwise it refers to the plain
.Ql server .
Also,
.Ql USER
is not truly the
.Ql USER
that had been found when doing the user chain lookup as is described
below, i.e., this
.Ql USER
will never be in URL percent encoded form, whether it came from an URL
or not; i.e., variable chain name extensions of
.Sx "INTERNAL VARIABLES"
must not be URL percent encoded.
.
.Pp
For example, whether an hypothetical URL
.Ql smtp://hey%3Ayou@our.house
had been given that includes a user, or whether the URL was
.Ql smtp://our.house
and the user had been found differently, to lookup the variable chain
.Va smtp-use-starttls
\*(UA first looks for whether
.Ql smtp-\:use-\:starttls-\:hey:you@our.house
is defined, then whether
.Ql smtp-\:use-\:starttls-\:our.house
exists before finally ending up looking at the plain variable itself.
.
.Pp
\*(UA obeys the following logic scheme when dealing with the
necessary credential information of an account:
.
.Bl -bullet
.It
If no
.Ql USER
has been given in the URL the variables
.Va user-HOST
and
.Va user
are looked up; if no such variable(s) can be found then \*(UA will,
when enforced by the \*(OPal variables
.Va netrc-lookup-HOST
or
.Va netrc-lookup ,
search the users
.Pa .netrc
file for a
.Ql HOST
specific entry which provides a
.Ql login
name: this lookup will only succeed if unambiguous (one possible matching
entry for
.Ql HOST ) .
It is possible to load encrypted
.Pa .netrc
files via
.Va netrc-pipe .
.Pp
If there is still no
.Ql USER
then \*(UA will fall back to the user who is supposed to run \*(UA,
the identity of which has been fixated during \*(UA startup and is
known to be a valid user on the current host.
.
.It
Authentication: unless otherwise noted this will lookup the
.Va PROTOCOL-auth-USER@HOST , PROTOCOL-auth-HOST , PROTOCOL-auth
variable chain, falling back to a protocol-specific default should this
have no success.
.
.It
If no
.Ql PASSWORD
has been given in the URL, then if the
.Ql USER
has been found through the \*(OPal
.Va netrc-lookup
that may have already provided the password, too.
Otherwise the variable chain
.Va password-USER@HOST , password-HOST , password
is looked up and used if existent.
.Pp
Afterwards the complete \*(OPal variable chain
.Va netrc-lookup-USER@HOST , netrc-lookup-HOST , netrc-lookup
is looked up.
If set, the
.Pa .netrc
cache is searched for a password only (multiple user accounts for
a single machine may exist as well as a fallback entry without user
but with a password).
.Pp
If at that point there is still no password available, but the
(protocols') chosen authentication type requires a password, then in
interactive mode the user will be prompted on the terminal.
.El
.
.Pp
.Sy Note:
S/MIME verification works relative to the values found in the
.Ql From:
(or
.Ql Sender: )
header field(s), which means that the values of
.Va smime-sign , smime-sign-cert , smime-sign-include-certs
and
.Va smime-sign-message-digest
will not be looked up using the
.Ql USER
and
.Ql HOST
chains from above but instead use the corresponding values from the
message that is being worked on.
In unusual cases multiple and different
.Ql USER
and
.Ql HOST
combinations may therefore be involved \(en on the other hand those
unusual cases become possible.
The usual case is as short as:
.
.Pp
.Dl set mta=smtp://USER:PASS@HOST smtp-use-starttls \e
.Dl \ \ \ \ smime-sign smime-sign-cert=+smime.pair
.
.Pp
The section
.Sx EXAMPLES
contains complete example configurations.
.\" }}}
.
.\" .Ss "On terminal control and line editor" {{{
.Ss "On terminal control and line editor"
.
\*(OP Terminal control will be realized through one of the standard
.Ux
libraries, either the
.Lb libtermcap ,
or, alternatively, the
.Lb libterminfo ,
both of which will be initialized to work with the environment variable
.Ev TERM .
Terminal control will enhance or enable interactive usage aspects, e.g.,
.Sx "Coloured display" ,
and extend behaviour of the Mailx-Line-Editor (MLE), which may learn the
byte-sequences of keys like the cursor and function keys, and which will
automatically enter the so-called
.Dq ca-mode
alternative screen shall the terminal support it.
The internal variable
.Va termcap
can be used to overwrite settings or to learn (correct(ed)) keycodes.
Actual interaction with the chosen library can be disabled completely by
setting the internal variable
.Va termcap-disable ;
.Va termcap
will be queried regardless, even if the \*(OPal support for the
libraries has not been enabled at configuration time.
.
.Pp
\*(OP The builtin \*(UA Mailx-Line-Editor (MLE) should work in all
environments which comply to the ISO C standard
.St -isoC-amd1 ,
and will support wide glyphs if possible (the necessary functionality
had been removed from ISO C, but was included in
.St -xpg4 ) .
Prevent usage of a line editor in interactive mode by setting the
internal variable
.Va line-editor-disable .
Especially if the \*(OPal terminal control support is missing setting
entries in the internal variable
.Va termcap
will help shall the MLE misbehave, see there for more.
The MLE can support a little bit of
.Ic colour .
.
.Pp
\*(OP If the
.Ic history
feature is available then input from line editor prompts will be saved
in a history list that can be searched in and be expanded from.
Such saving can be prevented by prefixing input with any amount of
whitespace.
Aspects of history, like allowed content and maximum size, as well as
whether history shall be saved persistently, can be configured with the
internal variables
.Va history-file ,
.Va history-gabby ,
.Va history-gabby-persist
and
.Va history-size .
.
.Pp
The MLE supports a set of editing and control commands.
By default (as) many (as possible) of these will be assigned to a set of
single-letter control codes, which should work on any terminal (and can
be generated by holding the
.Dq control
key while pressing the key of desire, e.g.,
.Ql control-D ) .
If the \*(OPal
.Ic bind
command is available then the MLE commands can also be accessed freely
by assigning the command name, which is shown in parenthesis in the list
below, to any desired key-sequence, and the MLE will instead and also use
.Ic bind
to establish its builtin key bindings
(more of them if the \*(OPal terminal control is available),
an action which can then be suppressed completely by setting
.Va line-editor-no-defaults .
The following uses the
.Xr sh 1 Ns
ell-style quote notation that is documented in the introduction of
.Sx COMMANDS ;
combinations not mentioned either cause job control signals or do not
generate a (unique) keycode:
.
.
.Pp
.Bl -tag -compact -width "Ql _M"
.It Ql \ecA
Go to the start of the line
.Pf ( Cd mle-go-home ) .
.
.It Ql \ecB
Move the cursor backward one character
.Pf ( Cd mle-go-bwd ) .
.
.It Ql \ecD
Forward delete the character under the cursor;
quits \*(UA if used on the empty line unless the internal variable
.Va ignoreeof
is set
.Pf ( Cd mle-del-fwd ) .
.
.It Ql \ecE
Go to the end of the line
.Pf ( Cd mle-go-end ) .
.
.It Ql \ecF
Move the cursor forward one character
.Pf ( Cd mle-go-fwd ) .
.
.It Ql \ecG
Cancel current operation, full reset.
If there is an active history search or tabulator expansion then this
command will first reset that, reverting to the former line content;
thus a second reset is needed for a full reset in this case
.Pf ( Cd mle-reset ) .
.
.It Ql \ecH
Backspace: backward delete one character
.Pf ( Cd mle-del-bwd ) .
.
.It Ql \ecI
\*(NQ
Horizontal tabulator:
try to expand the word before the cursor, also supporting \*(UA
.Ic file
expansions
.Pf ( Cd mle-complete ) .
This is affected by
.Cd mle-quote-rndtrip .
.
.It Ql \ecJ
Newline:
commit the current line
.Pf ( Cd mle-commit ) .
.
.It Ql \ecK
Cut all characters from the cursor to the end of the line
.Pf ( Cd mle-snarf-end ) .
.
.It Ql \ecL
Repaint the line
.Pf ( Cd mle-repaint ) .
.
.It Ql \ecN
\*(OP Go to the next history entry
.Pf ( Cd mle-hist-fwd ) .
.
.It Ql \ecO
Invokes the command
.Ql Ic dt .
.
.It Ql \ecP
\*(OP Go to the previous history entry
.Pf ( Cd mle-hist-bwd ) .
.
.It Ql \ecQ
Toggle roundtrip mode shell quotes, where produced,
on and off
.Pf ( Cd mle-quote-rndtrip ) .
This setting is temporary, and will be forgotten once the command line
is committed.
.
.It Ql \ecR
\*(OP Complete the current line from (the remaining) older history entries
.Pf ( Cd mle-hist-srch-bwd ) .
.
.It Ql \ecS
\*(OP Complete the current line from (the remaining) newer history entries
.Pf ( Cd mle-hist-srch-fwd ) .
.
.It Ql \ecT
Paste the snarf buffer
.Pf ( Cd mle-paste ) .
.
.It Ql \ecU
The same as
.Ql \ecA
followed by
.Ql \ecK
.Pf ( Cd mle-snarf-line ) .
.
.It Ql \ecV
Prompts for a Unicode character (its hexadecimal number) to be inserted
.Pf ( Cd mle-prompt-char ) .
Note this command needs to be assigned to a single-letter control code
in order to become recognized and executed during input of
a key-sequence (only three single-letter control codes can be used for
that shortcut purpose); this control code is special-treated and cannot
be part of any other sequence, because any occurrence will perform the
.Cd mle-prompt-char
function immediately.
.
.It Ql \ecW
Cut the characters from the one preceding the cursor to the preceding
word boundary
.Pf ( Cd mle-snarf-word-bwd ) .
.
.It Ql \ecX
Move the cursor forward one word boundary
.Pf ( Cd mle-go-word-fwd ) .
.
.It Ql \ecY
Move the cursor backward one word boundary
.Pf ( Cd mle-go-word-bwd ) .
.
.It Ql \ec[
Escape: reset a possibly used multibyte character input state machine
and \*(OPally a lingering, incomplete key binding
.Pf ( Cd mle-cancel ) .
This command needs to be assigned to a single-letter control code in
order to become recognized and executed during input of a key-sequence
(only three single-letter control codes can be used for that shortcut
purpose).
This control code may also be part of a multi-byte sequence, but if
a sequence is active and the very control code is currently also an
expected input, then it will first be consumed by the active sequence.
.
.It Ql \ec\e
Invokes the command
.Ql Ic z Ns + .
.
.It Ql \ec]
Invokes the command
.Ql Ic z Ns $ .
.
.It Ql \ec^
Invokes the command
.Ql Ic z Ns 0 .
.
.It Ql \ec_
Cut the characters from the one after the cursor to the succeeding word
boundary
.Pf ( Cd mle-snarf-word-fwd ) .
.
.It Ql \ec?
Backspace:
.Cd mle-del-bwd .
.
.It \(en
.Cd mle-fullreset :
in difference to
.Cd mle-reset
this will immediately reset a possibly active search etc.
.
.It \(en
.Cd mle-bell :
ring the audible bell.
.El
.\" }}}
.
.\" .Ss "Coloured display" {{{
.Ss "Coloured display"
.
\*(OP \*(UA can be configured to support a coloured display and font
attributes by emitting ANSI / ISO 6429 SGR (select graphic rendition)
escape sequences.
Usage of colours and font attributes solely depends upon the
capability of the detected terminal type that is defined by the
environment variable
.Ev TERM
and which can be fine-tuned by the user via the internal variable
.Va termcap .
.
.Pp
On top of what \*(UA knows about the terminal the boolean variable
.Va colour-pager
defines whether the actually applicable colour and font attribute
sequences should also be generated when output is going to be paged
through the external program defined by the environment variable
.Ev PAGER
(also see
.Va crt Ns
).
This is not enabled by default because different pager programs need
different command line switches or other configuration in order to
support those sequences.
\*(UA however knows about some widely used pagers and in a clean
environment it is often enough to simply set
.Va colour-pager ;
please refer to that variable for more on this topic.
.
.Pp
If the variable
.Va colour-disable
is set then any active usage of colour and font attribute sequences
is suppressed, but without affecting possibly established
.Ic colour
mappings.
.
.Pp
To define and control colours and font attributes a single multiplexer
command family exists:
.Ic colour
shows or defines colour mappings for the given colour type (e.g.,
monochrome) and
.Ic uncolour
can be used to remove mappings of a given colour type.
Since colours are only available in interactive mode, it may make
sense to conditionalize the colour setup by encapsulating it with
.Ic if :
.
.Bd -literal -offset indent
if terminal && $features =@ +colour
  colour iso  view-msginfo  ft=bold,fg=green
  colour iso  view-header   ft=bold,fg=red   "from,subject"
  colour iso  view-header   fg=red

  uncolour iso view-header  from,subject
  colour iso  view-header   ft=bold,fg=magenta,bg=cyan
  colour 256  view-header   ft=bold,fg=208,bg=230 subject,from
  colour mono view-header   ft=bold
  colour mono view-header   ft=bold,ft=reverse subject,from
endif
.Ed
.\" }}}
.\" }}} (DESCRIPTION)
.
.
.\" .Sh COMMANDS {{{
.Sh COMMANDS
.
Each command is typed on a line by itself,
and may take arguments following the command word.
Command names may be abbreviated, in which case the first command that
matches the given prefix will be used.
The command
.Ic list
can be used to show the list of all commands, either alphabetically
sorted or in prefix search order (these do not match, also because the
POSIX standard prescribes a set of abbreviations).
\*(OPally the command
.Ic help
(or
.Ic \&? ) ,
when given an argument, will show a documentation string for the
command matching the expanded argument, as in
.Ql ?t ,
which should be a shorthand of
.Ql ?type .
Both commands support a more
.Va verbose
listing mode which includes the argument type of the command.
.
.Pp
For commands which take message lists as arguments, the next message
forward that satisfies the command's requirements will be used shall no
explicit message list have been specified.
If there are no messages forward of the current message,
the search proceeds backwards,
and if there are no good messages at all,
\*(UA shows an error message and aborts the command.
\*(ID Non-message-list arguments can be quoted using the following methods:
.
.Pp
.Bl -bullet -compact -offset indent
.It
An argument can be enclosed between paired double-quotes
.Ql """argument"""
or
single-quotes
.Ql 'argument' ;
any white space, shell word expansion, or reverse solidus characters
(except as described next) within the quotes are treated literally as
part of the argument.
A double-quote will be treated literally within single-quotes and vice
versa.
Inside such a quoted string the actually used quote character can be
used nonetheless by escaping it with a reverse solidus
.Ql \e ,
as in
.Ql """y\e""ou""" .
.
.It
An argument that is not enclosed in quotes, as above, can usually still
contain space characters if those spaces are reverse solidus escaped, as in
.Ql you\e are .
.
.It
A reverse solidus outside of the enclosing quotes is discarded
and the following character is treated literally as part of the argument.
.El
.
.
.Pp
Some commands which do not take message-list arguments can also be
prefixed with the special keyword
.Ic \&\&wysh
to choose \*(INible argument quoting rules, and some new commands only
support the new rules (without that keyword) and are flagged \*(NQ.
In the future \*(UA will (mostly) use
.Xr sh 1
compatible argument parsing:
Non-message-list arguments can be quoted using the following shell-style
mechanisms: the escape character, single-quotes, double-quotes and
dollar-single-quotes; any unquoted number sign
.Ql #
that parses as a new token starts a comment that ends argument processing.
The overall granularity of error reporting and diagnostics, also
regarding function arguments and their content, will improve.
.
.
.Pp
.Bl -bullet -compact -offset indent
.It
The literal value of any character can be preserved by preceding it
with the escape character reverse solidus
.Ql \e .
An unquoted dollar
.Ql $
will cause variable expansion of the given name: \*(UA
.Sx "INTERNAL VARIABLES"
as well as
.Sx ENVIRONMENT
(shell) variables can be accessed through this mechanism, brace
enclosing the name is supported.
.
.It
Arguments which are enclosed in
.Ql 'single-\:quotes'
retain their literal value.
A single-quote cannot occur within single-quotes.
.
.It
The literal value of all characters enclosed in
.Ql \(dqdouble-\:quotes\(dq
is retained, with the exception of dollar
.Ql $ ,
which will cause variable expansion, as above, backquote (grave accent)
.Ql ` ,
(which not yet means anything special), reverse solidus
.Ql \e ,
which will escape any of the characters dollar
.Ql $
(to prevent variable expansion), backquote (grave accent)
.Ql ` ,
double-quote
.Ql \(dq
(to prevent ending the quote) and reverse solidus
.Ql \e
(to prevent escaping, i.e., to embed a reverse solidus character as-is),
but has no special meaning otherwise.
.
.It
Arguments enclosed in
.Ql $'dollar-\:single-\:quotes'
extend normal single quotes in that reverse solidus escape sequences are
expanded as follows:
.Pp
.Bl -tag -compact -width "Ql \eNNN"
.It Ql \ea
alerts (bell).
.It Ql \eb
emits a backspace.
.It Ql \eE
an escape character.
.It Ql \ee
an escape character.
.It Ql \ef
form feed.
.It Ql \en
new line.
.It Ql \er
carriage return.
.It Ql \et
horizontal tab.
.It Ql \ev
vertical tab.
.It Ql \e\e
emits a reverse solidus character.
.It Ql \e'
single quote.
.It Ql \e"
double quote (escaping is optional).
.It Ql \eNNN
eight-bit byte with the octal value
.Ql NNN
(one to three octal digits), optionally prefixed by an additional
.Ql 0 .
A 0 byte will suppress further output for the quoted argument.
.It Ql \exHH
eight-bit byte with the hexadecimal value
.Ql HH
(one or two hexadecimal characters).
A 0 byte will suppress further output for the quoted argument.
.It Ql \eUHHHHHHHH
the Unicode / ISO-10646 character with the hexadecimal codepoint value
.Ql HHHHHHHH
(one to eight hexadecimal digits) \(em note that Unicode defines the
maximum codepoint to be ever supported as
.Ql 0x10FFFF
(in planes of
.Ql 0xFFFF
characters each).
This escape is only supported in locales which support Unicode (see
.Sx "Character sets" ) ,
in other cases the sequence will remain unexpanded unless the given code
point is ASCII compatible or can be represented in the current locale.
The character NUL will suppress further output for the quoted argument.
.It Ql \euHHHH
Identical to
.Ql \eUHHHHHHHH
except it takes only one to four hexadecimal digits.
.It Ql \ecX
A mechanism that allows usage of the non-printable (ASCII and
compatible) control codes 0 to 31: to create the printable
representation of a control code the numeric value 64 is added, and the
resulting ASCII character set code point is then printed, e.g., BEL is
.Ql 7 + 64 = 71 = G .
Whereas historically circumflex notation has often been used for
visualization purposes of control codes, e.g.,
.Ql ^G ,
the reverse solidus notation has been standardized:
.Ql \ecG .
Some control codes also have standardized (ISO 10646, ISO C) alias
representations, as shown above (e.g.,
.Ql \ea ,
.Ql \en ,
.Ql \et ) :
whenever such an alias exists \*(UA will use it for display purposes.
The control code NUL
.Pf ( Ql \ec@ )
ends argument processing without producing further output.
.It Ql \e$NAME
Non-standard extension: expand the given variable name, as above.
Brace enclosing the name is supported.
.It Ql \e`{command}
Not yet supported, just to raise awareness: Non-standard extension.
.El
.El
.
.
.Pp
.Sy Compatibility notes:
\*(ID Note these are new mechanisms which are not supported by all
commands.
Round-tripping (feeding in things shown in list modes again) are not yet
stable or possible at all.
On new-style command lines it is wise to quote semicolon
.Ql \&;
and vertical bar
.Ql |
characters in order to ensure upward compatibility: the author would
like to see things like
.Ql ? echo $'trouble\etahead' | cat >> in_the_shell.txt
and
.Ql ? top 2 5 10; type 3 22
become possible.
Before \*(UA will switch entirely to shell-style argument parsing there
will be a transition phase where using
.Ic \&\&wysh
will emit obsoletion warnings.
.
.Bd -literal -offset indent
echo 'Quotes '${HOME}' and 'tokens" differ!"# no comment
echo Quotes ${HOME} and tokens differ! # comment
echo Don"'"t you worry$'\ex21' The sun shines on us. $'\eu263A'
.Ed
.
.Pp
In any event an unquoted reverse solidus at the end of a command line is
discarded and the next line continues the command.
\*(ID Note that line continuation is handled before the above parsing is
applied, i.e., the parsers documented above will see merged lines.
Filenames, where expected, are subsequently subjected to the following
transformations, in sequence:
.
.Pp
.Bl -bullet -compact -offset indent
.It
If the filename begins with an unquoted plus sign, and the
.Va folder
variable is defined,
the plus sign will be replaced by the value of the
.Va folder
variable followed by a solidus.
If the
.Va folder
variable is unset or is set to null, the filename will be unchanged.
.
.It
Meta expansions are applied to the filename: a leading tilde
.Ql ~
character will be replaced by the expansion of
.Ev HOME ,
except when followed by a valid user name, in which case the home
directory of the given user is used instead.
Any occurrence of
.Ql $VARIABLE
(or
.Ql ${VARIABLE} )
will be replaced by the expansion of the variable, if possible; \*(UA
.Sx "INTERNAL VARIABLES"
as well as
.Sx ENVIRONMENT
(shell) variables can be accessed through this mechanism, and the usual
escape mechanism has to be applied to prevent interpretation.
If the fully expanded filename results in multiple pathnames and the
command is expecting only one file, an error results.
.Pp
In interactive context, in order to allow simple value acceptance (via
.Dq ENTER ) ,
arguments will usually be displayed in a properly quoted form, e.g., a file
.Ql diet\e is \ecurd.txt
may be displayed as
.Ql 'diet\e is \ecurd.txt' .
.El
.
.Pp
The following commands are available:
.
.Bl -tag -width ".Ic _ccount"
.Mx
.It Ic \&!
Executes the
.Ev SHELL
(see
.Xr sh 1 Ns
) command which follows.
.
.Mx
.It Ic #
The comment-command causes the entire line to be ignored.
.Sy Note:
this really is a normal command which' purpose is to discard its
arguments, not a
.Dq comment-start
indicating special character, which means that, e.g., trailing comments
on a line are not possible.
.
.Mx
.It Ic +
Goes to the next message in sequence and types it
(like
.Dq ENTER ) .
.
.Mx
.It Ic -
Display the preceding message, or the n'th previous message if given
a numeric argument n.
.
.Mx
.It Ic =
Show the current message number (the
.Dq dot ) .
.
.Mx
.It Ic \&?
Show a brief summary of commands.
A more
.Va verbose
output is available.
\*(OP Given an argument a synopsis for the command in question is
shown instead; commands can be abbreviated in general and this command
can be used to see the full expansion of an abbreviation including the
synopsis, try, e.g.,
.Ql ?h ,
.Ql ?hel
and
.Ql ?help
and see how the output changes.
.
.Mx
.It Ic \&|
A synonym for the
.Ic pipe
command.
.
.Mx
.It Ic ~
Interprets the remainder of the word as a macro name and passes it
through to the
.Ic call
command; e.g.,
.Ql ~ Ns Ar mymacro
is a shorter synonym for
.Ql call Ar mymacro .
.
.Mx
.It Ic account
(ac) Creates, selects or lists (an) account(s).
Accounts are special incarnations of
.Ic define Ns d
macros and group commands and variable settings which together usually
arrange the environment for the purpose of creating an email account.
Different to normal macros settings which are covered by
.Ic localopts
\(en here by default enabled! \(en will not be reverted before the
.Ic account
is changed again.
The special account
.Ql null
(case-insensitive) always exists, and all but it can be deleted via
.Ic unaccount .
.Pp
Without arguments a listing of all defined accounts is shown.
With one argument the given account is activated: the system
.Va inbox
of that account will be activated (as via
.Ic file ) ,
and a possibly installed
.Va folder-hook
will be run.
The two argument form is identical to defining a macro as via
.Ic define :
.Bd -literal -offset indent
account myisp {
  set folder=~/mail inbox=+syste.mbox record=+sent.mbox
  set from='myname@myisp.example (My Name)'
  set mta=smtp://mylogin@smtp.myisp.example
}
.Ed
.
.Mx
.It Ic alias
(a) With no arguments, shows all currently-defined aliases.
With one argument, shows that alias.
With more than one argument,
creates a new alias or appends to an existing one.
.Ic unalias
can be used to delete aliases.
.
.Mx
.It Ic alternates
(alt) Manage a list of alternate addresses / names of the active user,
members of which will be removed from recipient lists when replying to
messages (and the
.Va metoo
variable is not set).
If arguments are given the set of alternate names is replaced by them,
without arguments the current set is displayed.
.
.Mx
.It Ic answered
Takes a message list and marks each message as having been answered.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.
.
.Mx
.It Ic bind
\*(OP\*(NQ The bind command extends the MLE (see
.Sx "On terminal control and line editor" )
with freely configurable key bindings.
With one argument all bindings for the given context are shown,
specifying an asterisk
.Ql *
will show the bindings of all contexts; a more verbose listing will be
produced if either of
.Va debug
or
.Va verbose
are set.
With two or more arguments a binding is (re)established:
the first argument is the context to which the binding shall apply,
the second argument is a comma-separated list of the
.Dq keys
which form the binding, and any remaining arguments form the expansion.
To indicate that a binding shall not be auto-committed, but that the
expansion shall instead be furtherly editable by the user, an at-sign
.Ql @
(that will be removed) can be placed last in the expansion, from which
leading and trailing whitespace will finally be removed.
Reverse solidus cannot be used as the last character of expansion.
.
.Pp
Contexts define when a binding applies, i.e., a binding will not be seen
unless the context for which it is defined for is currently active.
This is not true for the shared binding
.Ql base ,
which is the foundation for all other bindings and as such always
applies, its bindings, however, only apply secondarily.
The available contexts are the shared
.Ql base ,
the
.Ql default
context which is used in all not otherwise documented situations, and
.Ql compose ,
which applies to compose-mode only.
.
.Pp
.Dq Keys
which form the binding are specified as a comma-separated list of
byte-sequences, where each list entry corresponds to one key(press).
\*(OPally a list entry may, indicated by a leading colon character
.Ql \&: ,
also refer to the name of a terminal capability;
several dozen names will be compiled into \*(UA and may be specified
either by their
.Xr terminfo 5 ,
or, if existing, by their
.Xr termcap 5
name, regardless of the actually used terminal control library.
It is however possible to use any capability, as long as the name is
resolvable by the control library or defined in the internal variable
.Va termcap .
Input sequences are not case-normalized, so that an exact match is
required to update or remove a binding.
Examples:
.
.Bd -literal -offset indent
bind base $'\eE',d mle-snarf-word-fwd # Esc(ape)
bind base $'\eE',$'\ec?' mle-snarf-word-bwd # Esc, Delete
bind default $'\ecA',:khome,w 'echo An editable binding@'
bind default a,b,c rm -rf / @  # Another editable binding
bind default :kf1 File %
bind compose :kf1 ~e
.Ed
.
.Pp
Note that the entire comma-separated list is first parsed (over) as a
shell-token with whitespace as the field separator, before being parsed
and expanded for real with comma as the field separator, therefore
whitespace needs to be properly quoted:
shell-style quoting is documented in the introduction of
.Sx COMMANDS .
Using Unicode reverse solidus escape sequences renders a binding
defunctional if the locale does not support Unicode (see
.Sx "Character sets" ) ,
and using terminal capabilities does so if no terminal control support
is (currently) available.
.
.Pp
The following terminal capability names are builtin and can be used in
.Xr terminfo 5
or (if available) the two-letter
.Xr termcap 5
notation regardless of the actually used library.
See the respective manual for a list of capabilities.
The program
.Xr infocmp 1
can be used to show all the capabilities of
.Ev TERM
or the given terminal type;
using the
.Fl \&\&x
flag will also show supported (non-standard) extensions.
.
.Pp
.Bl -tag -compact -width kcuuf_or_kcuuf
.It Cd kbs Ns \0or Cd kb
Backspace.
.It Cd kdch1 Ns \0or Cd kD
Delete character.
.It Cd kDC Ns \0or Cd *4
\(em shifted variant.
.It Cd kel Ns \0or Cd kE
Clear to end of line.
.It Cd kext Ns \0or Cd @9
Exit.
.It Cd kich1 Ns \0or Cd kI
Insert character.
.It Cd kIC Ns \0or Cd #3
\(em shifted variant.
.It Cd khome Ns \0or Cd kh
Home.
.It Cd kHOM Ns \0or Cd #2
\(em shifted variant.
.It Cd kend Ns \0or Cd @7
End.
.It Cd knp Ns \0or Cd kN
Next page.
.It Cd kpp Ns \0or Cd kP
Previous page.
.It Cd kcub1 Ns \0or Cd kl
Left cursor (with more modifiers: see below).
.It Cd kLFT Ns \0or Cd #4
\(em shifted variant.
.It Cd kcuf1 Ns \0or Cd kr
Right cursor (ditto).
.It Cd kRIT Ns \0or Cd %i
\(em shifted variant.
.It Cd kcud1 Ns \0or Cd kd
Down cursor (ditto).
.It Cd kDN
\(em shifted variant (only terminfo).
.It Cd kcuu1 Ns \0or Cd ku
Up cursor (ditto).
.It Cd kUP
\(em shifted variant (only terminfo).
.It Cd kf0 Ns \0or Cd k0
Function key 0.
Add one for each function key up to
.Cd kf9
and
.Cd k9 ,
respectively.
.It Cd kf10 Ns \0or Cd k;
Function key 10.
.It Cd kf11 Ns \0or Cd F1
Function key 11.
Add one for each function key up to
.Cd kf19
and
.Cd F9 ,
respectively.
.El
.
.Pp
Some terminals support key-modifier combination extensions, e.g.,
.Ql Alt+Shift+xy .
For example, the delete key,
.Cd kdch1 :
in its shifted variant, the name is mutated to
.Cd  kDC ,
then a number is appended for the states
.Ql Alt
.Pf ( Cd kDC3 ) ,
.Ql Shift+Alt
.Pf ( Cd kDC4 ) ,
.Ql Control
.Pf ( Cd kDC5 ) ,
.Ql Shift+Control
.Pf ( Cd kDC6 ) ,
.Ql Alt+Control
.Pf ( Cd kDC7 ) ,
finally
.Ql Shift+Alt+Control
.Pf ( Cd kDC8 ) .
The same for the left cursor key,
.Cd kcub1 :
.Cd KLFT , KLFT3 , KLFT4 , KLFT5 , KLFT6 , KLFT7 , KLFT8 .
.
.Pp
Key bindings can be removed with the command
.Ic unbind .
It is advisable to use an initial escape or other control character (e.g.,
.Ql \ecA )
for bindings which describe user key combinations (as opposed to purely
terminal capability based ones), in order to avoid ambiguities whether
input belongs to key sequences or not; it also reduces search time.
Adjusting
.Va bind-timeout
may help shall keys and sequences be falsely recognized.
.
.
.Mx
.It Ic call
Calls a macro that has been created via
.Ic define .
.
.Mx
.It Ic cd
(ch) Change the working directory to
.Ev HOME
or the given argument.
Synonym for
.Ic chdir .
.
.Mx
.It Ic certsave
\*(OP Only applicable to S/MIME signed messages.
Takes a message list and a file name and saves the certificates
contained within the message signatures to the named file in both
human-readable and PEM format.
The certificates can later be used to send encrypted messages to the
respective message senders by setting
.Va smime-encrypt-USER@HOST
variables.
.
.Mx
.It Ic chdir
(ch) Change the working directory to
.Ev HOME
or the given argument.
Synonym for
.Ic cd .
.
.Mx
.It Ic collapse
Only applicable to threaded mode.
Takes a message list and makes all replies to these messages invisible
in header summaries, unless they are in state
.Ql new .
.
.
.Mx
.It Ic colour
\*(OP\*(NQ Manage colour mappings for the type of colour given as the
(case-insensitive) first argument, which must be one of
.Ql 256
for 256-colour terminals,
.Ql 8 ,
.Ql ansi
or
.Ql iso
for the standard 8-colour ANSI / ISO 6429 color palette and
.Ql 1
or
.Ql mono
for monochrome terminals.
Monochrome terminals cannot deal with colours, but only (some) font
attributes.
.
.Pp
Without further arguments the list of all currently defined mappings
for the given colour type is shown (as a special case giving
.Ql all
or
.Ql *
will iterate over all types in order).
Otherwise the second argument defines the mappable slot, the third
argument a (comma-separated list of) colour and font attribute
specification(s), and the optional fourth argument can be used to
specify a precondition: if conditioned mappings exist they are tested in
(creation) order unless a (case-insensitive) match has been found, and
the default mapping (if any has been established) will only be chosen as
a last resort.
The types of precondition available depend on the mappable slot, the
following of which exist:
.
.Pp
Mappings prefixed with
.Ql mle-
are used for the \*(OPal builtin Mailx-Line-Editor (MLE, see
.Sx "On terminal control and line editor" )
and do not support preconditions.
.Pp
.Bl -tag -compact -width view-partinfo
.It Cd mle-position
This mapping is used for the position indicator that is visible when
a line cannot be fully displayed on the screen.
.It Cd mle-prompt
Used for the
.Va prompt .
.El
.
.Pp
Mappings prefixed with
.Ql sum-
are used in header summaries, and they all understand the preconditions
.Ql dot
(the current message) and
.Ql older
for elder messages (only honoured in conjunction with
.Va datefield-markout-older ) .
.Pp
.Bl -tag -compact -width view-partinfo
.It Cd sum-dotmark
This mapping is used for the
.Dq dotmark
that can be created with the
.Ql %>
or
.Ql %<
formats of the variable
.Va headline .
.It Cd sum-header
For the complete header summary line except the
.Dq dotmark
and the thread structure.
.It Cd sum-thread
For the thread structure which can be created with the
.Ql %i
format of the variable
.Va headline .
.El
.
.Pp
Mappings prefixed with
.Ql view-
are used when displaying messages.
.Pp
.Bl -tag -compact -width view-partinfo
.It Cd view-from_
This mapping is used for so-called
.Ql From_
lines, which are MBOX file format specific header lines.
.It Cd view-header
For header lines.
A comma-separated list of headers to which the mapping applies may be
given as a precondition; if the \*(OPal regular expression support is
available then if any of the
.Dq magical
(extended) regular expression characters is seen the precondition will
be evaluated as (an extended) one.
.It Cd view-msginfo
For the introductional message info line.
.It Cd view-partinfo
For MIME part info lines.
.El
.
.Pp
The following (case-insensitive) colour definitions and font attributes
are understood, multiple of which can be specified in a comma-separated
list:
.
.Bl -tag -width ft=
.It Cd ft=
a font attribute:
.Ql bold ,
.Ql reverse
or
.Ql underline .
It is possible (and often applicable) to specify multiple font
attributes for a single mapping.
.
.It Cd fg=
foreground colour attribute:
.Ql black ,
.Ql blue ,
.Ql green ,
.Ql red ,
.Ql brown ,
.Ql magenta ,
.Ql cyan
or
.Ql white .
To specify a 256-color mode a decimal number colour specification in
the range 0 to 255, inclusive, is supported, and interpreted as follows:
.Pp
.Bl -tag -compact -width "999 - 999"
.It 0 - 7
the standard ISO 6429 colors, as above.
.It 8 - 15
high intensity variants of the standard colors.
.It 16 - 231
216 colors in tuples of 6.
.It 232 - 255
grayscale from black to white in 24 steps.
.El
.Bd -literal -offset indent
#!/bin/sh -
fg() { printf "\e033[38;5;${1}m($1)"; }
bg() { printf "\e033[48;5;${1}m($1)"; }
i=0
while [ $i -lt 256 ]; do fg $i; i=$(($i + 1)); done
printf "\e033[0m\en"
i=0
while [ $i -lt 256 ]; do bg $i; i=$(($i + 1)); done
printf "\e033[0m\en"
.Ed
.
.It Cd bg=
background colour attribute (see
.Cd fg=
for possible values).
.El
.
.Pp
Mappings may be removed with the command
.Ic uncolour .
For a generic overview see the section
.Sx "Coloured display" .
.
.
.Mx
.It Ic Copy
(C) Copy messages to files whose names are derived from the author of
the respective message and do not mark them as being saved;
otherwise identical to
.Ic Save .
.
.Mx
.It Ic copy
(c) Copy messages to the named file and do not mark them as being saved;
otherwise identical to
.Ic save .
.
.Mx
.It Ic customhdr
\*(NQ With no arguments, shows all currently-defined custom headers.
With one argument, shows that custom header.
With more than one argument, creates a new or replaces an existing
custom header with the name given as the first argument, the content of
which being defined by the concatenated remaining arguments.
.Ic uncustomhdr
can be used to delete custom headers.
\*(ID Overwriting of automatically managed headers is neither supported
nor prevented.
Defined custom headers will be injected into newly composed or forwarded
messages, e.g.:
.Pp
.Dl customhdr OpenPGP id=12345678; url=http://www.YYY.ZZ
.Pp
The \*(OB variable
.Va customhdr
may also be used to inject custom headers; it is covered by
.Ic localopts .
.
.Mx
.It Ic cwd
Show the name of the current working directory.
.
.Mx
.It Ic Decrypt
\*(OP For unencrypted messages this command is identical to
.Ic Copy ;
Encrypted messages are first decrypted, if possible, and then copied.
.
.Mx
.It Ic decrypt
\*(OP For unencrypted messages this command is identical to
.Ic copy ;
Encrypted messages are first decrypted, if possible, and then copied.
.
.Mx
.It Ic define
Without arguments the current list of macros, including their content,
is shown, otherwise a macro is defined.
A macro definition is a sequence of commands in the following form:
.Bd -literal -offset indent
define name {
  command1
  command2
  ...
  commandN
}
.Ed
.Pp
A defined macro can be invoked explicitly by using the
.Ic call
or
.Ic ~
commands, or implicitly if a macro hook is triggered, e.g., a
.Va folder-hook .
Note that interpretation of
.Ic localopts
depends on how (i.e.,
.Dq as what :
normal macro, folder hook, hook, account switch) the macro is invoked.
Macros can be deleted via
.Ic undefine .
.Pp
.Sy \*(ID:
Macro behaviour, including option localization, will change in v15.
Please be aware of that and possibly embed a version check in a resource
file of yours!
.
.Mx
.It Ic delete
(d) Marks the given message list as
.Ql deleted .
Deleted messages will neither be saved in
.Ev MBOX
nor will they be available for most other commands.
.
.Mx
.It Ic discard
(di) Identical to
.Ic ignore .
Also see
.Ic retain .
.
.Mx
.Mx
.It Ic dp , dt
Deletes the current message and displays the next message.
If there is no next message, \*(UA says
.Dq at EOF .
.
.Mx
.It Ic dotmove
Move the
.Dq dot
up or down by one message when given
.Ql +
or
.Ql -
argument, respectively.
.
.Mx
.It Ic draft
Takes a message list and marks each given message as a draft.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.
.Mx
.It Ic echo
(ec) Echoes its arguments after applying
.Xr sh 1 Ns -style
expansions and filename transformations, as documented for
.Sx COMMANDS .
.
.Mx
.It Ic edit
(e) Point the text editor (as defined in
.Ev EDITOR )
at each message from the given list in turn.
Modified contents are discarded unless the
.Va writebackedited
variable is set.
.
.Mx
.It Ic elif
Part of the
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional \(em if the condition of a preceding
.Ic if
was false, check the following condition and execute the following block
if it evaluates true.
.
.Mx
.It Ic else
(el) Part of the
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional \(em if none of the conditions of the preceding
.Ic if
and
.Ic elif
commands was true, the
.Ic else
block is executed.
.
.Mx
.It Ic endif
(en) Marks the end of an
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional execution block.
.
.
.Mx
.It Ic environ
\*(NQ \*(UA has a strict notion about which variables are
.Sx "INTERNAL VARIABLES"
and which are managed in the program
.Sx ENVIRONMENT .
Since some of the latter are a vivid part of \*(UAs functioning,
however, they are transparently integrated into the normal handling of
internal variables via
.Ic set
and
.Ic unset .
To integrate other environment variables of choice into this
transparent handling, and also to export internal variables into the
process environment where they normally are not, a
.Ql link
needs to become established with this command, as in, e.g.,
.
.Pp
.Dl environ link PERL5LIB from TZ
.
.Pp
Afterwards changing such variables with
.Ic set
will cause automatic updates of the program environment, and therefore
be inherited by newly created child processes.
Sufficient system support provided (it was in BSD as early as 1987, and
is standardized since Y2K) removing such variables with
.Ic unset
will remove them also from the program environment, but in any way
the knowledge they ever have been
.Ql link Ns
ed will be lost.
Note this implies that
.Ic localopts
may cause loss of links.
.
.Pp
The command
.Ql unlink
will remove an existing link, but leaves the variables as such intact.
Additionally the subcommands
.Ql set
and
.Ql unset
are provided, which work exactly the same as the documented commands
.Ic set
and
.Ic unset ,
but (additionally) link the variable(s) with the program environment and
thus immediately export them to, or remove them from (if possible),
respectively, the program environment.
.
.
.Mx
.It Ic errors
\*(OP Since \*(UA uses the console as a user interface it can happen
that messages scroll by too fast to become recognized.
Optionally an error message ring queue is available which stores
duplicates of any error message and notifies the user in interactive
sessions whenever a new error has occurred.
The queue is finite: if its maximum size is reached any new message
replaces the eldest.
The command
.Ic errors
can be used to manage this message queue: if given
.Ar show
or no argument the queue will be displayed and cleared,
.Ar clear
will only clear all messages from the queue.
.
.Mx
.It Ic exit
(ex or x) Exit from \*(UA without changing the active mailbox and skip
any saving of messages in
.Ev MBOX
as well as a possibly tracked line editor history file.
.
.Mx
.It Ic File
(Fi) Like
.Ic file ,
but open the mailbox readonly.
.
.Mx
.It Ic file
(fi) The file command switches to a new mailbox.
Without arguments it shows status information of the current mailbox.
If an argument is given, it will write out changes (such as deletions)
the user has made and open a new mailbox.
Some special conventions are recognized for the
.Ar name
argument:
.Pp
.Bl -tag -compact -width ".Ar %:__lespec"
.It Ar #
(number sign) means the previous file,
.It Ar %
(percent sign) means the invoking user's system mailbox, which either
is the (itself expandable)
.Va inbox
if that is set, the standardized absolute pathname indicated by
.Ev MAIL
if that is set, or a builtin compile-time default otherwise.
.It Ar %user
means the primary system mailbox of
.Ar user
(and never the value of
.Va inbox ,
regardless of its actual setting),
.It Ar &
(ampersand) means the invoking user's
.Ev MBOX
file and
.It Ar +file
means a
.Ar file
in the
.Va folder
directory.
.It Ar %:filespec
expands to the same value as
.Ar filespec ,
but the file is handled as a primary system mailbox by, e.g., the
.Ic mbox
and
.Ic save
commands, meaning that messages that have been read in the current
session will be moved to the
.Ev MBOX
mailbox instead of simply being flagged as read.
.El
.Pp
If the name matches one of the strings defined with the command
.Ic shortcut ,
it is replaced by its long form and expanded.
If the name ends with
.Ql .gz ,
.Ql .bz2
or
.Ql .xz
it is treated as being compressed with
.Xr gzip 1 ,
.Xr bzip2 1
or
.Xr xz 1 ,
respectively, and transparently handled through an intermediate
(un)compression step (using a temporary file) with the according
facility, sufficient support provided.
Likewise, if the named file does not exist, but a file with one of the
mentioned compression extensions does, then the name is automatically
expanded and the compressed file is used.
.Pp
Otherwise, if the name ends with an extension for which
.Va file-hook-load-EXTENSION
and
.Va file-hook-save-EXTENSION
variables are set, then the given hooks will be used to load and save
.Dq name ,
and \*(UA will work with an intermediate temporary file.
.Pp
MBOX files (flat file-based mailboxes) are generally locked during file
operations in order to avoid inconsistencies due to concurrent
modifications.
\*(OPal Mailbox files which \*(UA treats as the system
.Va inbox
.Pf ( Ev MAIL )
and primary mailboxes will also be protected by so-called dotlock
files, the traditional way of mail spool file locking: for any file
.Ql a
a lock file
.Ql a.lock
will be created for the duration of the synchronization \(em
as necessary a privilege-separated dotlock child process will be used
to accommodate for necessary privilege adjustments in order to create
the dotlock file in the same directory
and with the same user and group identities as the file of interest.
.Pp
If
.Ar name
refers to a directory with the subdirectories
.Ql tmp ,
.Ql new
and
.Ql cur ,
then it is treated as a folder in
.Dq Maildir
format; \*(ID the variable
.Va newfolders
can be used to control the format of yet non-existent folders.
A name of the form
.Pp
.Dl \*(IN protocol://[user[:password]@]host[:port][/path]
.Dl \*(OU protocol://[user@]host[:port][/path]
.Pp
is taken as an Internet mailbox specification.
The \*(OPally supported protocols are
.Ar pop3
(POP3) and
.Ar pop3s
(POP3 with SSL/TLS encrypted transport).
The
.Ar [/path]
part is valid only for IMAP; there it defaults to
.Ar INBOX .
Also see the section
.Sx "On URL syntax and credential lookup" .
.Pp
\*(OU If
.Ar user
contains special characters, in particular
.Ql /
or
.Ql % ,
they must be escaped in URL notation \(en the command
.Ic urlcodec
can be used to show the necessary conversion.
.
.Mx
.It Ic flag
Takes a message list and marks the messages as
.Ic flag Ns
ged for urgent/special attention.
This mark has no technical meaning in the mail system;
it just causes messages to be highlighted in the header summary,
and makes them specially addressable.
.
.Mx
.It Ic folder
(fold) The same as
.Ic file .
.
.Mx
.It Ic folders
With no arguments, list the names of the folders in the folder directory.
With an existing folder as an argument,
lists the names of folders below the named folder.
.
.Mx
.It Ic Followup
(F) Similar to
.Ic Respond ,
but saves the message in a file named after the local part of the first
recipient's address (instead of in
.Va record Ns ).
.
.Mx
.It Ic followup
(fo) Similar to
.Ic respond ,
but saves the message in a file named after the local part of the first
recipient's address (instead of in
.Va record Ns ).
.
.Mx
.It Ic followupall
Similar to
.Ic followup ,
but responds to all recipients regardless of the
.Va flipr
variable.
.
.Mx
.It Ic followupsender
Similar to
.Ic Followup ,
but responds to the sender only regardless of the
.Va flipr
variable.
.
.Mx
.It Ic Forward
Alias for
.Ic Fwd .
.
.Mx
.It Ic forward
Alias for
.Ic fwd .
.
.Mx
.It Ic from
(f) Takes a list of message specifications and displays a summary of
their message headers, exactly as via
.Ic headers .
An alias of this command is
.Ic search .
Also see
.Sx "Specifying messages" .
.
.Mx
.It Ic Fwd
Similar to
.Ic fwd ,
but saves the message in a file named after the local part of the
recipient's address (instead of in
.Va record Ns ).
.
.Mx
.It Ic fwd
Takes a message and the address of a recipient
and forwards the message to him.
The text of the original message is included in the new one,
with the value of the
.Va fwdheading
variable preceding it.
The
.Ic fwdignore
and
.Ic fwdretain
commands specify which header fields are included in the new message.
Only the first part of a multipart message is included unless
.Va forward-as-attachment ,
and recipient addresses will be stripped from comments, names etc.
unless the internal variable
.Va fullnames
is set .
.
.Mx
.It Ic fwdignore
Specifies which header fields are to be ignored with the command
.Ic fwd .
This command has no effect when the internal variable
.Va forward-as-attachment
is set.
.
.Mx
.It Ic fwdretain
Specifies which header fields are to be retained with the command
.Ic fwd .
.Ic fwdretain
overrides
.Ic fwdignore .
This command has no effect when the internal variable
.Va forward-as-attachment
is set.
.
.Mx
.It Ic ghost
Define or list command aliases, so-called ghosts.
Without arguments a list of all currently known aliases is shown.
With one argument the expansion of the given alias is shown.
With two or more arguments a command alias is defined or updated: the
first argument is the name under which the remaining command line should
be accessible, the content of which can be just about anything.
A ghost can be used everywhere a normal command can be used, but always
takes precedence; any arguments that are given to the command alias are
joined onto the alias content, and the resulting string forms the
command line that is, in effect, executed.
Also see
.Ic unghost .
.Bd -literal -offset indent
? gh xx
`ghost': no such alias: "xx"
? gh xx echo hello,
? gh xx
ghost xx "echo hello,"
? xx
hello,
? xx world
hello, world
.Ed
.
.Mx
.It Ic headers
(h) Show the current group of headers, the size of which depends on
the variable
.Va screen
and the style of which can be adjusted with the variable
.Va headline .
If a message-specification is given the group of headers containing the
first message therein is shown and the message at the top of the screen
becomes the new
.Dq dot .
.
.Mx
.It Ic help
(hel) A synonym for
.Ic \&? .
.
.Mx
.It Ic history
\*(OP Either
.Ar show
or
.Ar clear
the list of history entries;
a decimal
.Ar NUMBER
argument selects and shows the respective history entry \(en
press
.Dq ENTER
to accept it, and the history entry will become the new history top.
The default mode if no arguments are given is
.Ar show .
.
.Mx
.It Ic hold
(ho, also
.Ic preserve )
Takes a message list and marks each message therein to be saved in the
user's system
.Va inbox
instead of in
.Ev MBOX .
Does not override the
.Ic delete
command.
\*(UA deviates from the POSIX standard with this command, because a
.Ic next
command issued after
.Ic hold
will display the following message, not the current one.
.
.
.Mx
.It Ic if
(i) Part of the nestable
.Ic if Ns / Ns Ic elif Ns / Ns Ic else Ns / Ns Ic endif
conditional execution construct \(em if the given condition is true then
the encapsulated block is executed.
POSIX only supports the (case-insensitive) conditions
.Ql r Ns
eceive
and
.Ql s Ns
end, all remaining conditions are non-portable extensions; note that
falsely specified conditions cause the execution of the entire
conditional construct until the (matching) closing
.Ic endif
command to be suppressed.
The syntax of the nestable
.Ic if
conditional execution construct requires that each condition and syntax
element is surrounded by whitespace.
.
.Bd -literal -offset indent
if receive
  commands ...
else
  commands ...
endif
.Ed
.
.Pp
The (case-insensitive) condition
.Ql t Ns
erminal will evaluate to true if the standard input is a terminal, i.e.,
in interactive sessions.
Another condition can be any boolean value (see the section
.Sx "INTERNAL VARIABLES"
for textual boolean representations) to mark an enwrapped block as
.Dq never execute
or
.Dq always execute .
It is possible to check
.Sx "INTERNAL VARIABLES"
as well as
.Sx ENVIRONMENT
variables for existence or compare their expansion against a user given
value or another variable by using the
.Ql $
.Pf ( Dq variable next )
conditional trigger character;
a variable on the right hand side may be signalled using the same
mechanism.
The variable names may be enclosed in a pair of matching braces.
.
.Pp
The available comparison operators are
.Ql <
(less than),
.Ql <=
(less than or equal to),
.Ql ==
(equal),
.Ql !=
(not equal),
.Ql >=
(greater than or equal to),
.Ql >
(greater than),
.Ql =@
(is substring of) and
.Ql !@
(is not substring of).
The values of the left and right hand side are treated as strings and
are compared 8-bit byte-wise, ignoring case according to the rules of
the US-ASCII encoding (therefore, dependent on the active locale,
possibly producing false results for strings in the locale encoding).
Except for the substring checks the comparison will instead be performed
arithmetically if both, the user given value as well as the variable
content, can be parsed as numbers (integers).
An unset variable is treated as the empty string.
.
.Pp
When the \*(OPal regular expression support is available, the additional
test cases
.Ql =~
and
.Ql !~
can be used.
They treat the right hand side as an extended regular expression that is
matched case-insensitively and according to the active
.Ev LC_CTYPE
locale, meaning that strings in the locale encoding should be matched
correctly.
.
.Pp
Conditions can be joined via AND-OR lists (where the AND operator is
.Ql &&
and the OR operator is
.Ql || ) ,
which have equal precedence and will be evaluated with left
associativity, thus using the same syntax that is known for the
.Xr sh 1 .
It is also possible to form groups of conditions and lists by enclosing
them in pairs of brackets
.Ql [\ \&.\&.\&.\ ] ,
which may be interlocked within each other, and also be joined via
AND-OR lists.
.
.Pp
The results of individual conditions and entire groups may be modified
via unary operators: the unary operator
.Ql \&!
will reverse the result.
.
.Bd -literal -offset indent
if $debug
  echo *debug* is set
endif
if $ttycharset == "UTF-8"
  echo *ttycharset* is set to UTF-8, case-insensitively
endif
set t1=one t2=one
if ${t1} == ${t2}
  echo These two variables are equal
endif
if $version-major >= 15
  echo Running a new version..
  if $features =@ +regex
    if $TERM =~ "^xterm\&.*"
      echo ..in an X terminal
    endif
  endif
  if [ [ true ] && [ [ ${debug} ] || [ $verbose ] ] ]
    echo Noisy, noisy
  endif
  if true && $debug || ${verbose}
    echo Left associativity, as is known from the shell
  endif
  if ! ! true && ! [ ! $debug && ! $verbose ]
    echo Unary operator support
  endif
endif
.Ed
.
.
.Mx
.It Ic ignore
Without arguments the list of ignored header fields is shown,
otherwise the given list of header fields is added to the ignore list:
Header fields in the ignore list are not shown on the terminal when
a message is displayed.
To display a message in its entirety, use the commands
.Ic Type
or
.Ic Print .
Also see
.Ic discard
and
.Ic retain .
.
.Mx
.It Ic list
Shows the names of all available commands, alphabetically sorted.
If given any non-whitespace argument the list will be shown in the order
in which command prefixes are searched.
A more
.Va verbose
output is available.
.
.Mx
.It Ic localopts
This command can be used to localize changes to variables, meaning that
their state will be reverted to the former one once the covered scope
is left.
It can only be used inside of macro definition blocks introduced by
.Ic account
or
.Ic define ,
and is interpreted as a boolean (string, see
.Sx "INTERNAL VARIABLES" ) ;
the
.Dq covered scope
of an account is left once it is switched off again.
.Bd -literal -offset indent
define temporary_settings {
  set global_option1
  localopts on
  set local_option1
  set local_option2
  localopts off
  set global_option2
}
.Ed
.Pp
.Sy Note
that this setting
.Dq stacks up :
i.e., if
.Ql macro1
enables change localization and calls
.Ql macro2 ,
which explicitly resets localization, then any value changes within
.Ql macro2
will still be reverted by
.Ql macro1 !
\*(ID Once the outermost level, the one which enabled localization
first, is left, but no earlier, all adjustments will be unrolled.
\*(ID Likewise worth knowing, if in this example
.Ql macro2
changes to a different
.Ic account
which sets some variables that are yet covered by localizations, their
scope will be extended, and in fact leaving the
.Ic account
will (thus) restore settings in (likely) global scope which actually
were defined in a local, private context.
.
.Mx
.It Ic Lreply
Reply to messages that come in via known
.Pf ( Ic mlist )
or subscribed
.Pf ( Ic mlsubscribe )
mailing lists, or pretend to do so (see
.Sx "Mailing lists" ) :
on top of the usual
.Ic reply
functionality this will actively resort and even remove message
recipients in order to generate a message that is supposed to be sent to
a mailing list.
For example it will also implicitly generate a
.Ql Mail-Followup-To:
header if that seems useful, regardless of the setting of the variable
.Va followup-to .
.
.Mx
.It Ic Mail
Similar to
.Ic mail ,
but saves the message in a file named after the local part of the first
recipient's address (instead of in
.Va record Ns ).
.
.Mx
.It Ic mail
(m) Takes a (list of) recipient address(es) as (an) argument(s),
or asks on standard input if none were given;
then collects the remaining mail content and sends it out.
.
.Mx
.It Ic mbox
(mb) The given message list is to be sent to
.Ev MBOX
when \*(UA is quit; this is the default action unless the variable
.Va hold
is set.
\*(ID This command can only be used in a primary system mailbox (see
.Ic file ) .
.
.Mx
.It Ic mimetype
Without any arguments the content of the MIME type cache will displayed.
Otherwise each argument defines a complete MIME type specification of
a type that shall be added (prepended) to the cache.
In any event MIME type sources are loaded first as necessary \(en
.Va mimetypes-load-control
can be used to fine-tune which sources are actually loaded.
Refer to the section on
.Sx "The mime.types files"
for more on MIME type specifications and this topic in general.
MIME type unregistration and cache resets can be triggered with
.Ic unmimetype .
.
.Mx
.It Ic mlist
Without arguments the list of all currently defined mailing lists
(and their attributes, if any) is shown; a more verbose listing will be
produced if either of
.Va debug
or
.Va verbose
are set.
Otherwise all given arguments (which need not be quoted except for
whitespace) will be added and henceforth be recognized as mailing lists.
Mailing lists may be removed via the command
.Ic unmlist .
.Pp
If the \*(OPal regular expression support is available then mailing
lists may also be specified as (extended) regular expressions (see
.Xr re_format 7
for more on those).
.
.Mx
.It Ic mlsubscribe
Without arguments the list of all currently defined mailing lists which
have a subscription attribute is shown; a more verbose listing will be
produced if either of
.Va debug
or
.Va verbose
are set.
Otherwise this attribute will be set for all given mailing lists,
newly creating them as necessary (as via
.Ic mlist ) .
Subscription attributes may be removed via the command
.Ic unmlsubscribe .
Also see
.Va followup-to .
.
.Mx
.It Ic Move
Similar to
.Ic move ,
but moves the messages to a file named after the local part of the
sender address of the first message (instead of in
.Va record Ns ).
.
.Mx
.It Ic move
Acts like
.Ic copy
but marks the messages for deletion if they were transferred
successfully.
.
.Mx
.It Ic More
Like
.Ic more ,
but also displays ignored header fields and all MIME parts.
Identical to
.Ic Page .
.
.Mx
.It Ic more
Invokes the
.Ev PAGER
on the given messages, even in non-interactive mode and as long as the
standard output is a terminal.
Identical to
.Ic page .
.
.Mx
.It Ic netrc
\*(OP When used without arguments or if
.Ar show
has been given the content of the
.Pa .netrc
cache is shown, loading it first as necessary.
If the argument is
.Ar load
then the cache will only be initialized and
.Ar clear
will remove its contents.
Note that \*(UA will try to load the file only once, use
.Ql Ic \&\&netrc Ns \:\0\:clear
to unlock further attempts.
See
.Va netrc-lookup ,
.Va netrc-pipe
and the section
.Sx "On URL syntax and credential lookup" ;
the section
.Sx "The .netrc file"
documents the file format in detail.
.
.Mx
.It Ic newmail
Checks for new mail in the current folder without committing any changes
before.
If new mail is present, a message is shown.
If the
.Va header
variable is set,
the headers of each new message are also shown.
This command is not available for all mailbox types.
.
.Mx
.It Ic next
(n) (like
.Ql +
or
.Dq ENTER )
Goes to the next message in sequence and types it.
With an argument list, types the next matching message.
.
.Mx
.It Ic New
Same as
.Ic Unread .
.
.Mx
.It Ic new
Same as
.Ic unread .
.
.Mx
.It Ic noop
If the current folder is accessed via a network connection, a
.Dq NOOP
command is sent, otherwise no operation is performed.
.
.Mx
.It Ic Page
Like
.Ic page ,
but also displays ignored header fields and all MIME parts.
Identical to
.Ic More .
.
.Mx
.It Ic page
Invokes the
.Ev PAGER
on the given messages, even in non-interactive mode and as long as the
standard output is a terminal.
Identical to
.Ic more .
.
.Mx
.It Ic Pipe
Like
.Ic pipe
but also pipes ignored header fields and all parts of MIME
.Ql multipart/alternative
messages.
.
.Mx
.It Ic pipe
(pi) Takes a message list and a shell command
and pipes the messages through the command.
Without an argument the current message is piped through the command
given by the
.Va cmd
variable.
If the
.Va page
variable is set,
every message is followed by a formfeed character.
.
.Mx
.It Ic preserve
(pre) A synonym for
.Ic hold .
.
.Mx
.It Ic Print
(P) Alias for
.Ic Type .
.
.Mx
.It Ic print
(p) Research
.Ux
equivalent of
.Ic type .
.
.Mx
.It Ic quit
(q) Terminates the session, saving all undeleted, unsaved messages in
the current
.Ev MBOX ,
preserving all messages marked with
.Ic hold
or
.Ic preserve
or never referenced in the system
.Va inbox ,
and removing all other messages from the primary system mailbox.
If new mail has arrived during the session,
the message
.Dq You have new mail
will be shown.
If given while editing a mailbox file with the command line flag
.Fl f ,
then the edit file is rewritten.
A return to the shell is effected,
unless the rewrite of edit file fails,
in which case the user can escape with the exit command.
.
.Mx
.It Ic redirect
Same as
.Ic resend .
.
.Mx
.It Ic Redirect
Same as
.Ic Resend .
.
.Mx
.It Ic remove
Removes the named files or directories.
If a name refer to a mailbox, e.g., a Maildir mailbox, then a mailbox
type specific removal will be performed, deleting the complete mailbox.
The user is asked for confirmation in interactive mode.
.
.Mx
.It Ic rename
Takes the name of an existing folder
and the name for the new folder
and renames the first to the second one.
Both folders must be of the same type.
.
.Mx
.It Ic Reply
(R) Reply to originator.
Does not reply to other recipients of the original message.
.Va flipr
will exchange this command with
.Ic reply .
Unless the internal variable
.Va fullnames
is set the recipient address will be stripped from comments, names etc.
.
.Mx
.It Ic reply
(r) Take a message and group-responds to it by addressing the sender
and all recipients.
.Va followup-to ,
.Va followup-to-honour ,
.Va reply-to-honour
as well as
.Va recipients-in-cc
influence response behaviour.
The command
.Ic Lreply
offers special support for replying to mailing lists.
Unless the internal variable
.Va fullnames
is set recipient addresses will be stripped from comments, names etc.
If
.Va flipr
is set the commands
.Ic Reply
and
.Ic reply
are exchanged.
.
.Mx
.It Ic replyall
Similar to
.Ic reply ,
but initiates a group-reply regardless of the value of
.Va flipr .
.
.Mx
.It Ic replysender
Similar to
.Ic Reply ,
but responds to the sender only regardless of the value of
.Va flipr .
.
.Mx
.It Ic Resend
Like
.Ic resend ,
but does not add any header lines.
This is not a way to hide the sender's identity,
but useful for sending a message again to the same recipients.
.
.Mx
.It Ic resend
Takes a list of messages and a user name
and sends each message to the named user.
.Ql Resent-From:
and related header fields are prepended to the new copy of the message.
.
.Mx
.It Ic Respond
Same as
.Ic Reply .
.
.Mx
.It Ic respond
Same as
.Ic reply .
.
.Mx
.It Ic respondall
Same as
.Ic replyall .
.
.Mx
.It Ic respondsender
Same as
.Ic replysender .
.
.Mx
.It Ic retain
(ret) Without arguments the list of retained header fields is shown,
otherwise the given list of header fields is added to the retain list:
Header fields in the retain list are shown on the terminal when
a message is displayed, all other header fields are suppressed.
To display a message in its entirety, use the commands
.Ic Type
or
.Ic Print .
Also see
.Ic discard
and
.Ic ignore ;
.Ic retain
takes precedence over the mentioned.
.
.Mx
.It Ic Save
(S) Similar to
.Ic save,
but saves the messages in a file named after the local part of the
sender of the first message instead of (in
.Va record
and) taking a filename argument.
.
.Mx
.It Ic save
(s) Takes a message list and a filename and appends each message in turn
to the end of the file.
If no filename is given, the
.Ev MBOX
file is used.
The filename in quotes, followed by the generated character count
is echoed on the user's terminal.
If editing a primary system mailbox the messages are marked for deletion.
Filename interpretation as described for the
.Ic file
command is performed.
.
.Mx
.It Ic savediscard
Same as
.Ic saveignore .
.
.Mx
.It Ic saveignore
Is to
.Ic save
what
.Ic ignore
is to
.Ic print
and
.Ic type .
Header fields thus marked are filtered out when saving a message by
.Ic save
or when automatically saving to
.Ev MBOX .
This command should only be applied to header fields that do not contain
information needed to decode the message,
as MIME content fields do.
.
.Mx
.It Ic saveretain
Is to
.Ic save
what
.Ic retain
is to
.Ic print
and
.Ic type .
Header fields thus marked are the only ones saved with a message when
saving by
.Ic save
or when automatically saving to
.Ev MBOX .
.Ic saveretain
overrides
.Ic saveignore .
The use of this command is strongly discouraged since it may strip
header fields that are needed to decode the message correctly.
.
.Mx
.It Ic search
Takes a message specification (list) and displays a header summary of
all matching messages, as via
.Ic headers .
This command is an alias of
.Ic from .
Also see
.Sx "Specifying messages" .
.
.Mx
.It Ic seen
Takes a message list and marks all messages as having been read.
.
.Mx
.It Ic set
(se) Without arguments this command shows all internal variables which
are currently known to \*(UA (they have been set).
A more verbose listing will be produced if either of
.Va debug
or
.Va verbose
are set, in which case variables may be preceded with a comment line
that gives some context of what \*(UA knows about the given variable.
.Pp
Otherwise the given variables (and arguments) are set or adjusted.
Arguments are of the form
.Ql name=value
(no space before or after
.Ql = ) ,
or plain
.Ql name
if there is no value, i.e., a boolean variable.
Quotation marks may be placed around any part of the assignment
statement to quote blanks or tabs, e.g.,
.Pp
.Dl set indentprefix='->'
.Pp
If an argument begins with
.Ql no ,
as in
.Ql set nosave ,
the effect is the same as invoking the
.Ic unset
command with the remaining part of the variable
.Pf ( Ql unset save ) .
.Pp
Any
.Ql name
that is known to map to an environment variable will automatically cause
updates in the program environment (unsetting a variable in the
environment requires corresponding system support).
Please use the command
.Ic environ
for further environmental control.
Also see
.Ic varedit ,
.Ic varshow
and the sections
.Sx "INTERNAL VARIABLES"
and
.Sx ENVIRONMENT .
.
.Mx
.It Ic shell
(sh) Invokes an interactive version of the shell.
.
.Mx
.It Ic shortcut
Without arguments the list of all currently defined shortcuts is
shown.
Otherwise all given arguments (which need not be quoted except for
whitespace) are treated as pairs of shortcuts and their expansions,
creating new or changing already existing shortcuts, as necessary.
Shortcuts may be removed via the command
.Ic unshortcut .
The expansion strings should be in the syntax that has been described
for the
.Ic file
command.
.
.Mx
.It Ic show
Like
.Ic type ,
but performs neither MIME decoding nor decryption, so that the raw
message text is shown.
.
.Mx
.It Ic size
(si) Shows the size in characters of each message of the given
message-list.
.
.Mx
.It Ic sort
Shows the current sorting criterion when used without an argument.
Otherwise creates a sorted representation of the current folder,
and changes the
.Ic next
command and the addressing modes such that they refer to messages in
the sorted order.
Message numbers are the same as in regular mode.
If the
.Va header
variable is set,
a header summary in the new order is also displayed.
Automatic folder sorting can be enabled by setting the
.Va autosort
variable, as in, e.g.,
.Ql set autosort=thread .
Possible sorting criterions are:
.Pp
.Bl -tag -compact -width "subject"
.It date
Sort the messages by their
.Ql Date:
field, that is by the time they were sent.
.It from
Sort messages by the value of their
.Ql From:
field, that is by the address of the sender.
If the
.Va showname
variable is set, the sender's real name (if any) is used.
.It size
Sort the messages by their size.
.It spam
\*(OP Sort the message by their spam score, as has been classified by
.Ic spamrate .
.It status
Sort the messages by their message status.
.It subject
Sort the messages by their subject.
.It thread
Create a threaded display.
.It to
Sort messages by the value of their
.Ql To:
field, that is by the address of the recipient.
If the
.Va showname
variable is set, the recipient's real name (if any) is used.
.El
.
.Mx
.It Ic source
(so) The source command reads commands from the given file, which is
subject to the usual filename expansions (see introductional words of
.Sx COMMANDS ) .
If the given argument ends with a vertical bar
.Ql |
then the argument will instead be interpreted as a shell command and
\*(UA will read the output generated by it.
Interpretation of commands read is stopped when an error is encountered.
\*(ID Note that
.Ic \&\&source
cannot be used from within macros that execute as
.Va folder-hook Ns s
or
.Ic account Ns s ,
i.e., it can only be called from macros that were
.Ic call Ns ed .
.
.Mx
.It Ic source_if
The difference to
.Ic source
(beside not supporting pipe syntax aka shell command input) is that
this command will not generate an error if the given file argument
cannot be opened successfully.
.
.Mx
.It Ic spamclear
\*(OP Takes a list of messages and clears their
.Ql is-spam
flag.
.
.Mx
.It Ic spamforget
\*(OP Takes a list of messages and causes the
.Va spam-interface
to forget it has ever used them to train its Bayesian filter.
Unless otherwise noted the
.Ql is-spam
flag of the message is inspected to chose whether a message shall be
forgotten to be
.Dq ham
or
.Dq spam .
.
.Mx
.It Ic spamham
\*(OP Takes a list of messages and informs the Bayesian filter of the
.Va spam-interface
that they are
.Dq ham .
This also clears the
.Ql is-spam
flag of the messages in question.
.
.Mx
.It Ic spamrate
\*(OP Takes a list of messages and rates them using the configured
.Va spam-interface ,
without modifying the messages, but setting their
.Ql is-spam
flag as appropriate; because the spam rating headers are lost the rate
will be forgotten once the mailbox is left.
Refer to the manual section
.Sx "Handling spam"
for the complete picture of spam handling in \*(UA.
.
.Mx
.It Ic spamset
\*(OP Takes a list of messages and sets their
.Ql is-spam
flag.
.
.Mx
.It Ic spamspam
\*(OP Takes a list of messages and informs the Bayesian filter of the
.Va spam-interface
that they are
.Dq spam .
This also sets the
.Ql is-spam
flag of the messages in question.
.
.Mx
.It Ic thread
\*(OB The same as
.Ql sort thread
(consider using a
.Ql ghost
as necessary).
Create a threaded representation of the current folder,
i.\|e. indent messages that are replies to other messages in the header
display and change the
.Ic next
command and the addressing modes such that they refer to messages in the
threaded order.
Message numbers are the same as in unthreaded mode.
If the
.Va header
variable is set,
a header summary in threaded order is also displayed.
.
.Mx
.It Ic Top
Like
.Ic top
but honours
.Ic ignore
and
.Ic retain
filter lists.
.
.Mx
.It Ic top
(to) Takes a message list and types out the first
.Va toplines
lines of each message on the users' terminal.
The only header fields that are displayed are
.Ql From: ,
.Ql To: ,
.Ql CC: ,
and
.Ql Subject:
.Pf ( Ic Top
will instead honour configured lists).
It is possible to apply compression to what is displayed by setting
.Va topsqueeze .
Messages are decrypted and converted to the terminal character set
if necessary.
.
.Mx
.It Ic touch
(tou) Takes a message list and marks the messages for saving in
.Ev MBOX .
\*(UA deviates from the POSIX standard with this command,
as a following
.Ic next
command will display the following message instead of the current one.
.
.Mx
.It Ic Type
(T) Like
.Ic type
but also displays out ignored header fields and all parts of MIME
.Ql multipart/alternative
messages.
.
.Mx
.It Ic type
(t) Takes a message list and types out each message on the users'
terminal, honouring
.Ic ignore
and
.Ic retain
lists.
For MIME multipart messages, all parts with a content type of
.Ql text
or
.Ql message
are shown, the other are hidden except for their headers.
Messages are decrypted and converted to the terminal character set
if necessary.
.
.Mx
.It Ic unaccount
Delete all given accounts.
An error message is shown if a given account is not defined.
The special name
.Ql *
will discard all existing accounts.
.
.Mx
.It Ic unalias
(una) Takes a list of names defined by alias commands
and discards the remembered groups of users.
The special name
.Ql *
will discard all existing aliases.
.
.Mx
.It Ic unanswered
Takes a message list and marks each message as not having been answered.
.
.Mx
.It Ic unbind
Forget about a key
.Ic bind Ns
ing, specified by its context and input sequence, both of which may be
specified as a wildcard (asterisk,
.Ql * ) ,
e.g.,
.Ql unbind * *
will remove all bindings of all contexts.
.
.Mx
.It Ic uncollapse
Only applicable to threaded mode.
Takes a message list and makes the message and all replies to it visible
in header summaries again.
When a message becomes the current message,
it is automatically made visible.
Also when a message with collapsed replies is displayed,
all of these are automatically uncollapsed.
.
.Mx
.It Ic uncolour
Forget about a
.Ic colour
mapping for the given colour type (see
.Ic colour
for a list of types) and mapping; if the optional precondition argument
is used then only the exact tuple of mapping and precondition is removed.
The special name
.Ql *
will remove all mappings (no precondition allowed).
Also see
.Sx "Coloured display"
for the general picture.
.
.Mx
.It Ic uncustomhdr
Deletes the custom headers given as arguments.
The special name
.Ql *
will remove all custom headers.
.
.Mx
.It Ic undefine
Undefine all given macros.
An error message is shown if a given macro is not defined.
The special name
.Ql *
will discard all existing macros.
.
.Mx
.It Ic undelete
(u) Takes a message list and marks each message as not being deleted.
.
.Mx
.It Ic undraft
Takes a message list and
.Pf un Ic draft Ns
s each message.
.
.Mx
.It Ic unflag
Takes a message list and marks each message as not being
.Ic flag Ns ged .
.
.Mx
.It Ic unfwdignore
Removes the header field names from the list of ignored fields for the
.Ic forward
command.
The special name
.Ql *
will remove all fields.
.
.Mx
.It Ic unfwdretain
Removes the header field names from the list of retained fields for the
.Ic forward
command.
The special name
.Ql *
will remove all fields.
.
.Mx
.It Ic unghost
Remove all the given command
.Ic ghost Ns s Ns .
The special name
.Ql *
will remove all ghosts.
.
.Mx
.It Ic unignore
Removes the header field names from the list of ignored fields.
The special name
.Ql *
will remove all fields.
.
.Mx
.It Ic unmimetype
Delete all given MIME types, e.g.,
.Ql unmimetype text/plain
will remove all registered specifications for the MIME type
.Ql text/plain .
The special name
.Ql *
will discard all existing MIME types, just as will
.Ql reset ,
but which also reenables cache initialization via
.Va mimetypes-load-control .
.
.Mx
.It Ic unmlist
Forget about all the given mailing lists.
The special name
.Ql *
will remove all lists.
Also see
.Ic mlist .
.
.Mx
.It Ic unmlsubscribe
Remove the subscription attribute from all given mailing lists.
The special name
.Ql *
will clear the attribute from all lists which have it set.
Also see
.Ic mlsubscribe .
.
.Mx
.It Ic Unread
Same as
.Ic unread .
.
.Mx
.It Ic unread
Takes a message list and marks each message as not having been read.
.
.Mx
.It Ic unretain
Removes the header field names from the list of retained fields.
The special name
.Ql *
will remove all fields.
.
.Mx
.It Ic unsaveignore
Removes the header field names from the list of ignored fields for
saving.
The special name
.Ql *
will remove all fields.
.
.Mx
.It Ic unsaveretain
Removes the header field names from the list of retained fields for
saving.
The special name
.Ql *
will remove all fields.
.
.Mx
.It Ic unset
(uns) Takes a list of internal variable names and discards their
remembered values; the reverse of
.Ic set .
Also see
.Ic environ .
.
.Mx
.It Ic unshortcut
Deletes the shortcut names given as arguments.
The special name
.Ql *
will remove all shortcuts.
.
.Mx
.It Ic unsort
Disable sorted or threaded mode
(see the
.Ic sort
and
.Ic thread
commands),
return to normal message order and,
if the
.Va header
variable is set,
displays a header summary.
.
.Mx
.It Ic unthread
\*(OB
Same as
.Ic unsort .
.
.Mx
.It Ic urlcodec
Perform URL percent codec operations, rather according to RFC 3986,
on all given strings.
This is character set agnostic and thus locale dependent, and it may
decode bytes which are invalid in the current locale, unless the input
solely consists of characters in the portable character set, see
.Sx "Character sets" .
The first argument specifies the operation:
.Ar enc[ode]
or
.Ar dec[code]
perform plain URL percent en- and decoding, respectively.
.Ar p[ath]enc[ode]
and
.Ar p[ath]dec[ode]
perform a slightly modified operation which should be better for
pathnames: it does not allow a tilde
.Ql ~ ,
and will neither accept hyphen
.Ql -
nor dot
.Ql .
as an initial character.
.
.Mx
.It Ic varedit
Edit the values of or create the given variable(s) in the
.Ev EDITOR .
Boolean variables cannot be edited.
.
.Mx
.It Ic varshow
This command produces the same output as the listing mode of
.Ic set ,
including
.Va verbose Ns
ity adjustments, but only for the given variables.
.
.Mx
.It Ic verify
\*(OP Takes a message list and verifies each message.
If a message is not a S/MIME signed message,
verification will fail for it.
The verification process checks if the message was signed using a valid
certificate,
if the message sender's email address matches one of those contained
within the certificate,
and if the message content has been altered.
.
.Mx
.It Ic version
Shows the
.Va version
and
.Va features
of \*(UA.
.
.Mx
.It Ic visual
(v) Takes a message list and invokes the display editor on each message.
Modified contents are discarded unless the
.Va writebackedited
variable is set.
.
.Mx
.It Ic write
(w) For conventional messages the body without all headers is written.
The original message is never marked for deletion in the originating
mail folder.
The output is decrypted and converted to its native format as necessary.
If the output file exists, the text is appended.
If a message is in MIME multipart format its first part is written to
the specified file as for conventional messages, handling of the remains
depends on the execution mode.
No special handling of compressed files is performed.
.Pp
In interactive mode the user is consecutively asked for the filenames of
the processed parts.
For convience saving of each part may be skipped by giving an empty
value, the same result as writing it to
.Pa /dev/null .
Shell piping the part content by specifying a leading vertical bar
.Ql |
character for the filename is supported.
Other user input is expanded as usually for folders, e.g., tilde
expansion is performed, and contents of the destination file are
overwritten if the file previously existed.
.Pp
\*(ID In non-interactive mode any part which does not specify a filename
is ignored, and suspicious parts of filenames of the remaining parts are
URL percent encoded (as via
.Ic urlencode )
to prevent injection of malicious character sequences, resulting in
a filename that will be written into the current directory.
Existing files will not be overwritten, instead the part number or
a dot are appended after a number sign
.Ql #
to the name until file creation succeeds (or fails due to other
reasons).
.
.Mx
.It Ic xit
(x) A synonym for
.Ic exit .
.
.Mx
.It Ic z
\*(UA presents message headers in
.Va screen Ns
fuls as described under the
.Ic headers
command.
Without arguments this command scrolls to the next window of messages,
likewise if the argument is
.Ql + .
An argument of
.Ql -
scrolls to the last,
.Ql ^
scrolls to the first, and
.Ql $
to the last
.Va \&\&screen
of messages.
A number argument prefixed by
.Ql +
or
.Ql \-
indicates that the window is calculated in relation to the current
position, and a number without a prefix specifies an absolute position.
.
.Mx
.It Ic Z
Similar to
.Ic z ,
but scrolls to the next or previous window that contains at least one
.Ql new
or
.Ic flag Ns
ged message.
.El
.\" }}}
.
.
.\" .Sh COMMAND ESCAPES {{{
.Sh "COMMAND ESCAPES"
.
Here is a summary of the command escapes available in compose mode,
which are used to perform special functions when composing messages.
Command escapes are only recognized at the beginning of lines.
The actual escape character can be set via the internal variable
.Va escape ,
it defaults to the tilde
.Ql ~ .
.
.Bl -tag -width ".Ic __ filename"
.Mx
.It Ic ~~ Ar string
Insert the string of text in the message prefaced by a single
.Ql ~ .
(If the escape character has been changed,
that character must be doubled
in order to send it at the beginning of a line.)
.
.Mx
.It Ic ~! Ar command
Execute the indicated shell
.Ar command ,
then return to the message.
.
.Mx
.It Ic ~.
Same effect as typing the end-of-file character.
.
.Mx
.It Ic ~: Ar \*(UA-command Ns \0or Ic ~_ Ar \*(UA-command
Execute the given \*(UA command.
Not all commands, however, are allowed.
.
.Mx
.It Ic ~?
Write a summary of command escapes.
.
.Mx
.It Ic ~< Ar filename
Identical to
.Ic ~r .
.
.Mx
.It Ic ~<! Ar command
.Ar command
is executed using the shell.
Its standard output is inserted into the message.
.
.Mx
.It Ic ~@ Op Ar filename...
With no arguments, edit the attachment list interactively.
If an attachment's file name is left empty,
that attachment is deleted from the list.
When the end of the attachment list is reached,
\*(UA will ask for further attachments until an empty name is given.
If a given file name solely consists of the number sign
.Ql #
followed by a valid message number of the currently active mailbox, then
the given message is attached as a MIME
.Ql message/rfc822
and the rest of this section does not apply.
.Pp
If character set conversion has been compiled into \*(UA, then this mode
gives the user the option to specify input and output character sets,
unless the file extension indicates binary content, in which case \*(UA
asks whether this step shall be skipped for the attachment in question.
If not skipped, then the charset that succeeds to represent the
attachment data will be used in the
.Ql charset=
MIME parameter of the mail message:
.Pp
.Bl -bullet -compact
.It
If input and output character sets are specified, then the conversion is
performed on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
If only an output character set is specified, then the input is assumed
to be in the
.Va ttycharset
charset and will be converted to the given output charset on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
If no character sets are specified at all then the algorithm that is
documented in the section
.Sx "Character sets"
is applied, but directly and on the fly.
The user will be asked repeatedly until the desired conversion succeeds.
.It
Finally, if an input-, but no output character set is specified, then no
conversion is ever performed, but the
.Ql charset=
MIME parameter value will still be set to the user input.
.It
The character set selection loop can be left by typing
.Ql control-C ,
i.e., causing an interrupt.
.\" \*(OU next sentence
Note that before \*(UA version 15.0 this terminates the entire
current attachment selection, not only the character set selection.
.El
.Pp
Without character set conversion support, \*(UA will ask for the input
character set only, and it will set the
.Ql charset=
MIME parameter value to the given input, if any;
if no user input is seen then the
.Va ttycharset
character set will be used for the parameter value instead.
Note that the file extension check is not performed in this mode, since
no conversion will take place anyway.
.Pp
Note that in non-interactive mode, for reproduceabilities sake, there
will always be two questions for each attachment, regardless of whether
character set conversion is available and what the file extension is.
The first asks for the filename, and the second asks for the input
character set to be passed through to the corresponding MIME parameter;
no conversion will be tried if there is input to the latter question,
otherwise the usual conversion algorithm, as above, is applied.
For message attachments, the answer to the second question is completely
ignored.
.Pp
If (instead)
.Ar filename
arguments are specified for the
.Ic \&\&~@
command they are treated as a file list of
.Xr sh 1 Ns
-style quoted arguments, optionally also separated by commas, which are
expanded and then appended to the existing list of message attachments.
Message attachments can only be added via the first method.
In this mode the (text) attachments are assumed to be in
.Va ttycharset
encoding, and will be evaluated as documented in the section
.Sx "Character sets" .
.
.Mx
.It Ic ~A
Inserts the string contained in the
.Va Sign
variable (same as
.Ql Ic ~i Ns \0Sign ) .
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.
.Mx
.It Ic ~a
Inserts the string contained in the
.Va sign
variable (same as
.Ql Ic ~i Ns \0sign ) .
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.
.Mx
.It Ic ~b Ar name ...
Add the given names to the list of blind carbon copy recipients.
.
.Mx
.It Ic ~c Ar name ...
Add the given names to the list of carbon copy recipients.
.
.Mx
.It Ic ~d
Read the file specified by the
.Ev DEAD
variable into the message.
.
.Mx
.It Ic ~e
Invoke the text editor on the message collected so far.
After the editing session is finished,
the user may continue appending text to the message.
.
.Mx
.It Ic ~F Ar messages
Read the named messages into the message being sent, including all
message headers and MIME parts.
If no messages are specified, read in the current message.
.
.Mx
.It Ic ~f Ar messages
Read the named messages into the message being sent.
If no messages are specified, read in the current message.
.Ic ignore
and
.Ic retain
lists are used to modify the message headers.
For MIME multipart messages,
only the first displayable part is included.
.
.Mx
.It Ic ~H
Edit the message header fields
.Ql From: ,
.Ql Reply-To:
and
.Ql Sender:
by typing each one in turn and allowing the user to edit the field.
The default values for these fields originate from the
.Va from , replyto
and
.Va sender
variables.
.
.Mx
.It Ic ~h
Edit the message header fields
.Ql To: ,
.Ql Cc: ,
.Ql Bcc:
and
.Ql Subject:
by typing each one in turn and allowing the user to edit the field.
.
.Mx
.It Ic ~i Ar variable
Insert the value of the specified variable into the message,
adding a newline character at the end.
The message remains unaltered if the variable is unset or empty.
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.
.Mx
.It Ic ~M Ar messages
Read the named messages into the message being sent,
indented by
.Va indentprefix .
If no messages are specified, read the current message.
.
.Mx
.It Ic ~m Ar messages
Read the named messages into the message being sent,
indented by
.Va indentprefix .
If no messages are specified, read the current message.
.Ic ignore
and
.Ic retain
lists are used to modify the message headers.
For MIME multipart messages,
only the first displayable part is included.
.
.Mx
.It Ic ~p
Display the message collected so far,
prefaced by the message header fields
and followed by the attachment list, if any.
.
.Mx
.It Ic ~q
Abort the message being sent,
copying it to the file specified by the
.Ev DEAD
variable if
.Va save
is set.
.
.Mx
.It Ic ~R Ar filename
Read the named file into the message, indented by
.Va indentprefix .
.
.Mx
.It Ic ~r Ar filename
Read the named file into the message.
.
.Mx
.It Ic ~s Ar string
Cause the named string to become the current subject field.
.
.Mx
.It Ic ~t Ar name ...
Add the given name(s) to the direct recipient list.
.
.Mx
.It Ic ~U Ar messages
Read in the given / current message(s) excluding all headers, indented by
.Va indentprefix .
.
.Mx
.It Ic ~u Ar messages
Read in the given / current message(s), excluding all headers.
.
.Mx
.It Ic ~v
Invoke an alternate editor (defined by the
.Ev VISUAL
environment variable) on the message collected so far.
Usually, the alternate editor will be a screen editor.
After the editor is quit,
the user may resume appending text to the end of the message.
.
.Mx
.It Ic ~w Ar filename
Write the message onto the named file.
If the file exists,
the message is appended to it.
.
.Mx
.It Ic ~x
Same as
.Ic ~q ,
except that the message is not saved at all.
.
.Mx
.It Ic ~| Ar command
Pipe the message through the specified filter command.
If the command gives no output or terminates abnormally,
retain the original text of the message.
E.g., the command
.Xr fmt 1
is often used as a rejustifying filter.
.El
.\" }}}
.
.
.\" .Sh INTERNAL VARIABLES {{{
.Sh "INTERNAL VARIABLES"
.
Internal \*(UA variables are controlled via the
.Ic set
and
.Ic unset
commands; prefixing a variable name with the string
.Ql no
and calling
.Ic set
has the same effect as using
.Ic unset :
.Ql unset crt
and
.Ql set nocrt
do the same thing.
Creation or editing of variables can be performed in the
.Ev EDITOR
with the command
.Ic varedit .
.Ic varshow
will give more insight on the given variable(s), and
.Ic set ,
when called without arguments, will show a listing of all variables.
Both commands support a more
.Va verbose
listing mode.
Some well-known variables will also become inherited from the
program
.Sx ENVIRONMENT
implicitly, others can be explicitly imported with the command
.Ic environ
and henceforth share the said properties.
.
.Pp
Two different kind of internal variables exist.
There are boolean variables, which can only be in one of the two states
.Dq set
and
.Dq unset ,
and value variables with a(n optional) string value.
For the latter proper quoting is necessary upon assignment time, the
introduction of the section
.Sx COMMANDS
documents the supported quoting rules.
.
.Bd -literal -offset indent
wysh set one=val\e 1 two="val 2" \e
    three='val "3"' four=$'val \e'4\e''
varshow one two three four
unset one two three four
.Ed
.
.Pp
Dependent upon the actual option the string values will be interpreted
as numbers, colour names, normal text etc., but there also exists
a special kind of string value, the
.Dq boolean string ,
which must either be a decimal integer (in which case
.Ql 0
is false and
.Ql 1
and any other value is true) or any of the (case-insensitive) strings
.Ql off ,
.Ql no ,
.Ql n
and
.Ql false
for a false boolean and
.Ql on ,
.Ql yes ,
.Ql y
and
.Ql true
for a true boolean; a special kind of boolean string is the
.Dq quadoption ,
which is a boolean string that can optionally be prefixed with the
(case-insensitive) term
.Ql ask- ,
as in
.Ql ask-yes ,
which causes prompting of the user in interactive mode, with the given
boolean as the default value.
.
.\" .Ss "Initial settings" {{{
.\" (Keep in SYNC: ./nail.h:okeys, ./nail.rc, ./nail.1:"Initial settings")
.Ss "Initial Settings"
.
The standard POSIX 2008/Cor 2-2016 mandates the following initial
variable settings:
.Pf no Va allnet ,
.Pf no Va append ,
.Va asksub ,
.Pf no Va askbcc ,
.Pf no Va autoprint ,
.Pf no Va bang ,
.Pf no Va cmd ,
.Pf no Va crt ,
.Pf no Va debug ,
.Pf no Va dot ,
.Va escape
set to
.Ql ~ ,
.Pf no Va flipr ,
.Pf no Va folder ,
.Va header ,
.Pf no Va hold ,
.Pf no Va ignore ,
.Pf no Va ignoreeof ,
.Pf no Va keep ,
.Pf no Va keepsave ,
.Pf no Va metoo ,
.Pf no Va outfolder ,
.Pf no Va page ,
.Va prompt
set to
.Ql ?\0 ,
.Pf no Va quiet ,
.Pf no Va record ,
.Va save ,
.Pf no Va sendwait ,
.Pf no Va showto ,
.Pf no Va Sign ,
.Pf no Va sign ,
.Va toplines
set to
.Ql 5 .
.
.Pp
Notes: \*(UA does not support the
.Pf no Va onehop
variable \(en use command line options or
.Va mta-arguments
to pass options through to a
.Va mta .
And the default global
.Pa \*(UR
file (which is loaded unless the
.Fl n
command line flag has been used or the
.Ev NAIL_NO_SYSTEM_RC
environment variable is set) bends those initial settings a bit, e.g.,
it sets the variables
.Va hold ,
.Va keepsave
and
.Va keep ,
to name a few, calls
.Ic retain
etc., and should thus be taken into account.
.\" }}}
.
.\" .Ss "Variables" {{{
.Ss "Variables"
.
.Bl -tag -width ".It Va _utoprin_"
.Mx
.It Va -account-name
\*(RO Is set to the active
.Ic account .
.
.Mx
.It Va -exit-status
\*(RO The status of the last command.
.
.Mx
.It Va -folder-resolved
\*(RO Set to the fully resolved path of
.Va folder
once that evaluation has occurred; rather internal.
.
.Mx
.It Va -mailbox-display
\*(RO The name of the current mailbox
.Pf ( Ic file ) ,
possibly abbreviated for display purposes.
.
.Mx
.It Va -mailbox-resolved
\*(RO The fully resolved path of the current mailbox.
.
.Mx
.It Va add-file-recipients
\*(BO When file or pipe recipients have been specified,
mention them in the corresponding address fields of the message instead
of silently stripping them from their recipient list.
By default such addressees are not mentioned.
.
.Mx
.It Va allnet
\*(BO Causes only the local part to be evaluated
when comparing addresses.
.
.Mx
.It Va append
\*(BO Causes messages saved in
.Ev MBOX
to be appended to the end rather than prepended.
This should always be set.
.
.Mx
.It Va ask
\*(BO Causes \*(UA to prompt for the subject of each message sent.
If the user responds with simply a newline,
no subject field will be sent.
.
.Mx
.It Va askatend
\*(BO Causes the prompts for
.Ql Cc:
and
.Ql Bcc:
lists to appear after the message has been edited.
.
.Mx
.It Va askattach
\*(BO If set, \*(UA asks for files to attach at the end of each message,
shall the list be found empty at that time.
An empty line finalizes the list.
.
.Mx
.It Va askcc
\*(BO Causes the user to be prompted for carbon copy recipients
(at the end of each message if
.Va askatend
or
.Va bsdcompat
are set) shall the list be found empty (at that time).
An empty line finalizes the list.
.
.Mx
.It Va askbcc
\*(BO Causes the user to be prompted for blind carbon copy
recipients (at the end of each message if
.Va askatend
or
.Va bsdcompat
are set) shall the list be found empty (at that time).
An empty line finalizes the list.
.
.Mx
.It Va asksign
\*(BO\*(OP Causes the user to be prompted if the message is to be
signed at the end of each message.
The
.Va smime-sign
variable is ignored when this variable is set.
.
.Mx
.It Va asksub
\*(BO Alternative name for
.Va ask .
.
.Mx
.Mx
.Mx
.Mx
.It Va attachment-ask-content-description , \
  attachment-ask-content-disposition , \
  attachment-ask-content-id , \
  attachment-ask-content-type
\*(BO If set then the user will be prompted for some attachment
information when editing the attachment list.
It is advisable to not use these but for the first of the variables;
even for that it has to be noted that the data is used
.Dq as is .
.
.
.Mx
.It Va attrlist
A sequence of characters to display in the
.Ql attribute
column of the
.Va headline
as shown in the display of
.Ic headers ;
each for one type of messages (see
.Sx "Message states" ) ,
with the default being
.Ql NUROSPMFAT+\-$~
or
.Ql NU\ \ *HMFAT+\-$~
if the
.Va bsdflags
variable is set, in the following order:
.Pp
.Bl -tag -compact -width ".It Ql _"
.It Ql N
new.
.It Ql U
unread but old.
.It Ql R
new but read.
.It Ql O
read and old.
.It Ql S
saved.
.It Ql P
preserved.
.It Ql M
mboxed.
.It Ql F
flagged.
.It Ql A
answered.
.It Ql T
draft.
.It Ql +
start of a collapsed thread.
.It Ql -
an uncollapsed thread (TODO ignored for now).
.It Ql $
classified as spam.
.It Ql ~
classified as possible spam.
.El
.
.
.Mx
.It Va autobcc
Specifies a list of recipients to which a blind carbon copy of each
outgoing message will be sent automatically.
.
.Mx
.It Va autocc
Specifies a list of recipients to which a carbon copy of each outgoing
message will be sent automatically.
.
.Mx
.It Va autocollapse
\*(BO Causes threads to be collapsed automatically when threaded mode
is entered (see the
.Ic collapse
command).
.
.Mx
.It Va autoprint
\*(BO Causes the delete command to behave like
.Ql dp - ;
thus, after deleting a message the next one will be typed automatically.
.
.Mx
.It Va autothread
\*(BO\*(OB Causes threaded mode (see the
.Ic thread
command) to be entered automatically when a folder is opened.
The same as
.Ql autosort=thread .
.
.Mx
.It Va autosort
Causes sorted mode (see the
.Ic sort
command) to be entered automatically with the value of this variable as
sorting method when a folder is opened, e.g.,
.Ql set autosort=thread .
.
.Mx
.It Va bang
\*(BO Enables the substitution of
.Ql \&!
by the contents of the last command line in shell escapes.
.
.Mx
.It Va batch-exit-on-error
\*(BO If the batch mode has been enabled via the
.Fl #
command line option, then this variable will be consulted whenever \*(UA
completes one operation (returns to the command prompt); if it is set
then \*(UA will terminate if the last operation generated an error.
.
.Mx
.It Va bind-timeout
\*(OP Terminals generate multi-byte sequences for certain forms of
input, for example for function and other special keys.
Some terminals however do not write these multi-byte sequences as
a whole, but byte-by-byte, and the latter is what \*(UA actually reads.
This variable specifies the timeout in milliseconds that the MLE (see
.Sx "On terminal control and line editor" )
waits for more bytes to arrive unless it considers a sequence
.Dq complete .
The default is 200.
.
.Mx
.It Va bsdannounce
\*(BO Causes automatic display of a header summary after executing a
.Ic file
command, and thus complements the standard variable
.Va header ,
which controls header summary display on program startup.
It is only meaningful if
.Va header
is also set.
.
.Mx
.It Va bsdcompat
\*(BO Sets some cosmetical features to traditional BSD style;
has the same affect as setting
.Va askatend
and all other variables prefixed with
.Ql bsd ;
it also changes the behaviour of
.Va emptystart
(which does not exist in BSD).
.
.Mx
.It Va bsdflags
\*(BO Changes the letters shown in the first column of a header
summary to traditional BSD style.
.
.Mx
.It Va bsdheadline
\*(BO Changes the display of columns in a header summary to traditional
BSD style.
.
.Mx
.It Va bsdmsgs
\*(BO Changes some informational messages to traditional BSD style.
.
.Mx
.It Va bsdorder
\*(BO Causes the
.Ql Subject:
field to appear immediately after the
.Ql To:
field in message headers and with the
.Ic ~h
.Sx "COMMAND ESCAPES" .
.
.Mx
.It Va charset-7bit
The value that should appear in the
.Ql charset=
parameter of
.Ql Content-Type:
MIME header fields when no character set conversion of the message data
was performed.
This defaults to US-ASCII, and the chosen character set should be
US-ASCII compatible.
.
.Mx
.It Va charset-8bit
\*(OP The default 8-bit character set that is used as an implicit last
member of the variable
.Va sendcharsets .
This defaults to UTF-8.
If no character set conversion capabilities are available in \*(UA then
the only supported character set is
.Va ttycharset .
Refer to the section
.Sx "Character sets"
for the complete picture of character set conversion in \*(UA.
.
.Mx
.It Va charset-unknown-8bit
\*(OP RFC 1428 specifies conditions when internet mail gateways shall
.Dq upgrade
the content of a mail message by using a character set with the name
.Ql unknown-8bit .
Because of the unclassified nature of this character set \*(UA will not
be capable to convert this character set to any other character set.
If this variable is set any message part which uses the character set
.Ql unknown-8bit
is assumed to really be in the character set given in the value,
otherwise the (final) value of
.Va charset-8bit
is used for this purpose.
.Pp
This variable will also be taken into account if a MIME type (see
.Sx "The mime.types files" )
of a MIME message part that uses the
.Ql binary
character set is forcefully treated as text.
.
.Mx
.It Va cmd
The default value for the
.Ic pipe
command.
.
.Mx
.It Va colour-disable
\*(BO\*(OP Forcefully disable usage of colours.
Also see the section
.Sx "Coloured display" .
.
.Mx
.It Va colour-pager
\*(BO\*(OP Whether colour shall be used for output that is paged through
.Ev PAGER .
Note that pagers may need special flags, e.g.,
.Xr less 1
requires the option
.Fl \&\&R
and
.Xr lv 1
the option
.Fl \&\&c
in order to support colours.
Often doing manual adjustments is unnecessary since \*(UA may perform
adjustments dependent on the value of the environment variable
.Ev PAGER
(see there for more).
.
.Mx
.It Va crt
In a(n interactive) terminal session, then if this valued variable is
set it will be used as a threshold to determine how many lines the given
output has to span before it will be displayed via the configured
.Ev PAGER ;
Usage of the
.Ev PAGER
can be forced by setting this to the value
.Ql 0 ,
setting it without a value will deduce the current height of the
terminal screen to compute the treshold (see
.Ev LINES ,
.Va screen
and
.Xr stty 1 ) .
.
.Mx
.It Va customhdr
\*(OB A variable counterpart of the
.Ic customhdr
command (see there for documentation), interpreted as a comma-separated
list of custom headers to be injected, to include commas in the header
bodies escape them with reverse solidus, e.g.:
.Pp
.Dl set customhdr='Hdr1: Body1-1\e, Body1-2,  Hdr2: Body2'
.
.Mx
.It Va datefield
In the summary of
.Ic headers
the message date, if any is to be displayed according to the format of
.Va headline ,
is by default taken from the
.Ql From_
line of the message.
If this variable is set the date as given in the
.Ql Date:
header field is used instead, converted to local time.
To control the display format of the date assign a valid
.Xr strftime 3
format string.
(Note that the
.Ql %n
format should not be used, because \*(UA does not take embedded newlines
into account when calculating how many lines fit onto the screen.)
Also see
.Va datefield-markout-older .
.
.Mx
.It Va datefield-markout-older
This variable, when set in addition to
.Va datefield ,
is used to display
.Dq older
messages (concept is rather comparable to the
.Fl \&\&l
option of the POSIX utility
.Xr ls 1 ) .
The content interpretation is identical to
.Va \&\&datefield .
.
.Mx
.It Va debug
\*(BO Enables debug messages and obsoletion warnings, disables the
actual delivery of messages and also implies
.Pf no Va record
as well as
.Pf no Va save .
.
.Mx
.It Va disposition-notification-send
\*(BO\*(OP Emit a
.Ql Disposition-Notification-To:
header (RFC 3798) with the message.
This requires the
.Va from
variable to be set.
.\" TODO .It Va disposition-notification-send-HOST
.\"Overrides
.\".Va disposition-notification-send
.\" for SMTP accounts on a specific host.
.\" TODO .It Va disposition-notification-send-USER@HOST
.\"Overrides
.\".Va disposition-notification-send
.\"for a specific account.
.
.Mx
.It Va dot
\*(BO When dot is set, a period
.Ql \&.
on a line by itself during message input in (interactive) compose mode
will be treated as end-of-message (in addition to the normal end-of-file
condition).
If
.Va ignoreeof
is set
.Pf no Va dot
is ignored.
.
.Mx
.It Va dotlock-ignore-error
\*(BO\*(OP Synchronization of mailboxes which \*(UA treats as system
mailboxes (see the command
.Ic file )
will be protected with so-called dotlock files\(emthe traditional mail
spool file locking method\(emin addition to system file locking.
Because \*(UA ships with a privilege-separated dotlock creation program
that should always be able to create such a dotlock file there is no
good reason to ignore dotlock file creation errors, and thus these are
fatal unless this variable is set.
.
.Mx
.It Va editalong
\*(BO If this variable is set then the editor is started automatically
when a message is composed in interactive mode, as if the
.Ic ~e
.Sx "COMMAND ESCAPES"
had been specified.
The
.Va editheaders
variable is implied for this automatically spawned editor session.
.
.Mx
.It Va editheaders
\*(BO When a message is edited while being composed,
its header is included in the editable text.
The
.Ql To: ,
.Ql Cc: ,
.Ql Bcc: ,
.Ql Subject: ,
.Ql From: ,
.Ql Reply-To:
and
.Ql Sender:
fields are accepted within the header, other fields are ignored.
.
.Mx
.It Va emptystart
\*(BO When entering interactive mode \*(UA normally writes
.Dq \&No mail for user
and exits immediately if a mailbox is empty or does not exist.
If this variable is set \*(UA starts even with an empty or nonexistent
mailbox (the latter behaviour furtherly depends upon
.Va bsdcompat ,
though).
.
.Mx
.It Va encoding
The MIME
.Ql Content-Transfer-Encoding
to use in outgoing text messages and message parts, where applicable.
(7-bit clean text messages are sent as-is, without a transfer encoding.)
Valid values are:
.Pp
.Bl -tag -compact -width "_%%_"
.It Ql 8bit
.Pf (Or\0 Ql 8b . )
8-bit transport effectively causes the raw data be passed through
unchanged, but may cause problems when transferring mail messages over
channels that are not ESMTP (RFC 1869) compliant.
Also, several input data constructs are not allowed by the
specifications and may cause a different transfer-encoding to be used.
.It Ql quoted-printable
.Pf (Or\0 Ql qp . )
Quoted-printable encoding is 7-bit clean and has the property that ASCII
characters are passed through unchanged, so that an english message can
be read as-is; it is also acceptible for other single-byte locales that
share many characters with ASCII, like, e.g., ISO-8859-1.
The encoding will cause a large overhead for messages in other character
sets: e.g., it will require up to twelve (12) bytes to encode a single
UTF-8 character of four (4) bytes.
.It Ql base64
.Pf (Or\0 Ql b64 . )
The default encoding, it is 7-bit clean and will always be used for
binary data.
This encoding has a constant input:output ratio of 3:4, regardless of
the character set of the input data it will encode three bytes of input
to four bytes of output.
This transfer-encoding is not human readable without performing
a decoding step.
.El
.
.Mx
.It Va escape
If defined, the first character of the value of this variable
gives the character to use in place of
.Ql ~
to denote
.Sx "COMMAND ESCAPES" .
.
.Mx
.It Va expandaddr
If not set then file and command pipeline targets are not allowed,
and any such address will be filtered out, giving a warning message.
If set without a value then all possible recipient address
specifications will be accepted \(en see the section
.Sx "On sending mail, and non-interactive mode"
for more on this.
To accept them, but only in interactive mode, or when tilde commands
were enabled explicitly by using one of the command line options
.Fl ~
or
.Fl # ,
set this to the (case-insensitive) value
.Ql restrict
(note right now this is actually like setting
.Ql restrict,-all,+name,+addr ) .
.Pp
In fact the value is interpreted as a comma-separated list of values.
If it contains
.Ql fail
then the existence of disallowed specifications is treated as a hard
send error instead of only filtering them out.
The remaining values specify whether a specific type of recipient
address specification is allowed (optionally indicated by a plus sign
.Ql +
prefix) or disallowed (prefixed with a hyphen
.Ql - ) .
The value
.Ql all
addresses all possible address specifications,
.Ql file
file targets,
.Ql pipe
command pipeline targets,
.Ql name
plain user names and (MTA) aliases (\*(OB
.Ql noalias
may be used as an alternative syntax to
.Ql -name )
and
.Ql addr
network addresses.
These kind of values are interpreted in the given order, so that
.Ql restrict,\:fail,\:+file,\:-all,\:+addr
will cause hard errors for any non-network address recipient address
unless \*(UA is in interactive mode or has been started with the
.Fl ~
or
.Fl #
command line option; in the latter case(s) any address may be used, then.
.
.Mx
.It Va expandargv
Unless this variable is set additional
.Va mta
(Mail-Transfer-Agent)
arguments from the command line, as can be given after a
.Fl \&\&-
separator, are ignored due to safety reasons.
However, if set to the special (case-insensitive) value
.Ql fail ,
then the presence of additional MTA arguments is treated as a hard
error that causes \*(UA to exit with failure status.
A lesser strict variant is the otherwise identical
.Ql restrict ,
which does accept such arguments in interactive mode, or if tilde
commands were enabled explicitly by using one of the command line options
.Fl ~
or
.Fl # .
.
.Mx
.It Va features
\*(RO String giving a list of features \*(UA, preceded with a plus-sign
.Ql +
if the feature is available, and a minus-sign
.Ql -
otherwise.
The output of the command
.Ic version
will include this information.
.
.Mx
.It Va flipr
\*(BO This setting reverses the meanings of a set of reply commands,
turning the lowercase variants, which by default address all recipients
included in the header of a message
.Pf ( Ic reply , respond , followup )
into the uppercase variants, which by default address the sender only
.Pf ( Ic Reply , Respond , Followup )
and vice versa.
The commands
.Ic replysender , respondsender , followupsender
as well as
.Ic replyall , respondall , followupall
are not affected by the current setting of
.Va flipr .
.
.Mx
.Mx
.It Va file-hook-load-EXTENSION , file-hook-save-EXTENSION
It is possible to install file hooks which will be used by the
.Ic file
command in order to be able to transparently handle (through an
intermediate temporary file) files with specific
.Ql EXTENSION Ns
s: the variable values can include shell snippets and are expected to
write data to standard output / read data from standard input,
respectively.
\*(ID The variables may not be changed while there is a mailbox
attendant.
.Bd -literal -offset indent
set file-hook-load-xy='echo >&2 XY-LOAD; gzip -cd' \e
    file-hook-save-xy='echo >&2 XY-SAVE; gzip -c' \e
    record=+null-sent.xy
.Ed
.
.Mx
.It Va folder
The default path under which mailboxes are to be saved:
file names that begin with the plus-sign
.Ql +
will be expanded by prefixing them with the value of this variable.
The same special syntax conventions as documented for the
.Ic file
command may be used; if the non-empty value does not start with a solidus
.Ql / ,
then the value of
.Ev HOME
will be prefixed automatically.
If unset or the empty string any
.Ql +
prefixing file names will remain unexpanded.
.
.Mx
.It Va folder-hook
This variable can be set to the name of a
.Ic define Ns d
macro which will be called whenever a
.Ic file
is opened.
The macro will also be invoked when new mail arrives,
but message lists for commands executed from the macro
only include newly arrived messages then.
.Ic localopts
are activated by default in a folder hook, causing the covered settings
to be reverted once the folder is left again.
.Pp
.Sy \*(ID:
Macro behaviour, including option localization, will change in v15.
Please be aware of that and possibly embed a version check in a resource
file of yours.
.
.Mx
.It Va folder-hook-FOLDER
Overrides
.Va folder-hook
for a folder named
.Ql FOLDER .
Unlike other folder specifications, the fully expanded name of a folder,
without metacharacters, is used to avoid ambiguities.
However, if the mailbox resides under
.Va folder
then the usual
.Ql +
specification is tried in addition, e.g., if
.Va \&\&folder
is
.Dq mail
(and thus relative to the user's home directory) then
.Pa /home/usr1/mail/sent
will be tried as
.Ql folder-hook-/home/usr1/mail/sent
first, but then followed by
.Ql folder-hook-+sent .
.
.Mx
.It Va followup-to
\*(BO Controls whether a
.Ql Mail-Followup-To:
header is generated when sending messages to known mailing lists.
Also see
.Va followup-to-honour
and the commands
.Ic mlist , mlsubscribe , reply
and
.Ic Lreply .
.
.Mx
.It Va followup-to-honour
Controls whether a
.Ql Mail-Followup-To:
header is honoured when group-replying to a message via
.Ic reply
or
.Ic Lreply .
This is a quadoption; if set without a value it defaults to
.Dq yes .
Also see
.Va followup-to
and the commands
.Ic mlist
and
.Ic mlsubscribe .
.
.Mx
.It Va forward-as-attachment
\*(BO Original messages are normally sent as inline text with the
.Ic forward
command,
and only the first part of a multipart message is included.
With this setting enabled messages are sent as unmodified MIME
.Ql message/rfc822
attachments with all of their parts included.
.
.Mx
.It Va from
The address (or a list of addresses) to put into the
.Ql From:
field of the message header, quoting RFC 5322:
the author(s) of the message, that is, the mailbox(es) of the person(s)
or system(s) responsible for the writing of the message.
When
.Ic reply Ns
ing to messages these addresses are handled as if they were in the
.Ic alternates
list.
.Pp
If the machine's hostname is not valid at the Internet (for example at
a dialup machine) then either this variable or
.Va hostname
(\*(IN and with a defined SMTP protocol in
.Va mta
.Va smtp-hostname
adds even more fine-tuning capabilities),
have to be set.
If
.Va \&\&from
contains more than one address,
setting the
.Va sender
variable is required (according to the standard RFC 5322).
.
.Mx
.It Va fullnames
\*(BO When replying to or forwarding a message \*(UA normally removes
the comment and name parts of email addresses.
If this variable is set such stripping is not performed,
and comments, names etc. are retained.
.
.Mx
.It Va fwdheading
The string to put before the text of a message with the
.Ic forward
command
(unless the
.Va forward-as-attachment
variable is set).
Defaults to
.Dq -------- Original Message --------
if unset; No heading is put if it is set to the empty string.
.
.Mx
.It Va header
\*(BO Causes the header summary to be written at startup and after
commands that affect the number of messages or the order of messages in
the current folder; enabled by default.
The command line option
.Fl N
can be used to set
.Pf no Va header .
The variable
.Va bsdannounce
complements this and controls header summary display on folder changes.
.
.
.Mx
.It Va headline
A format string to use for the summary of
.Ic headers ,
similar to the ones used for
.Xr printf 3
formats.
Format specifiers in the given string start with a percent character
.Ql %
and may be followed by an optional decimal number indicating the field
width \(em if that is negative, the field is to be left-aligned.
Valid format specifiers are:
.
.Pp
.Bl -tag -compact -width "_%%_"
.It Ql %%
A plain percent character.
.It Ql %>
.Dq Dotmark :
a space character but for the current message
.Pf ( Dq dot ) ,
for which it expands to
.Ql > .
.It Ql %<
.Dq Dotmark :
a space character but for the current message
.Pf ( Dq dot ) ,
for which it expands to
.Ql < .
.It Ql %$
\*(OP The spam score of the message, as has been classified via the
command
.Ic spamrate .
Shows only a replacement character if there is no spam support.
.It Ql %a
Message attribute character (status flag); the actual content can be
adjusted by setting
.Va attrlist .
.It Ql %d
The date when the message was received, or the date found in the
.Ql From:
header when the
.Va datefield
variable is set (optionally to a date display format string).
.It Ql %e
The indenting level in threaded mode.
.It Ql %f
The address of the message sender.
.It Ql %i
The message thread tree structure.
(Note that this format does not support a field width.)
.It Ql %l
The number of lines of the message, if available.
.It Ql %m
Message number.
.It Ql %o
The number of octets (bytes) in the message, if available.
.It Ql %s
Message subject (if any).
.It Ql %S
Message subject (if any) in double quotes.
.It Ql \&%T
Message recipient flags: is the addressee of the message a known or
subscribed mailing list \(en see
.Ic mlist
and
.Ic mlsubscribe .
.It Ql %t
The position in threaded/sorted order.
.El
.Pp
The default is
.Ql %>\&%a\&%m\ %-18f\ %16d\ %4l/%\-5o\ %i%-s ,
or
.Ql %>\&%a\&%m\ %20-f\ \ %16d\ %3l/%\-5o\ %i%-S
if
.Va bsdcompat
is set.
Also see
.Va attrlist
and
.Va headline-bidi .
.
.
.Mx
.It Va headline-bidi
Bidirectional text requires special treatment when displaying headers,
because numbers (in dates or for file sizes etc.) will not affect the
current text direction, in effect resulting in ugly line layouts when
arabic or other right-to-left text is to be displayed.
On the other hand only a minority of terminals is capable to correctly
handle direction changes, so that user interaction is necessary for
acceptable results.
Note that extended host system support is required nonetheless, e.g.,
detection of the terminal character set is one precondition;
and this feature only works in an Unicode (i.e., UTF-8) locale.
.Pp
In general setting this variable will cause \*(UA to encapsulate text
fields that may occur when displaying
.Va headline
(and some other fields, like dynamic expansions in
.Va prompt )
with special Unicode control sequences;
it is possible to fine-tune the terminal support level by assigning
a value:
no value (or any value other than
.Ql 1 ,
.Ql 2
and
.Ql 3 )
will make \*(UA assume that the terminal is capable to properly deal
with Unicode version 6.3, in which case text is embedded in a pair of
U+2068 (FIRST STRONG ISOLATE) and U+2069 (POP DIRECTIONAL ISOLATE)
characters.
In addition no space on the line is reserved for these characters.
.Pp
Weaker support is chosen by using the value
.Ql 1
(Unicode 6.3, but reserve the room of two spaces for writing the control
sequences onto the line).
The values
.Ql 2
and
.Ql 3
select Unicode 1.1 support (U+200E, LEFT-TO-RIGHT MARK); the latter
again reserves room for two spaces in addition.
.
.Mx
.It Va history-file
\*(OP If a line editor is available then this can be set to
name the (expandable) path of the location of a permanent history file.
.
.Mx
.It Va history-gabby
\*(BO\*(OP Add more entries to the history as is normally done.
.
.Mx
.It Va history-gabby-persist
\*(BO\*(OP \*(UA's own MLE will not save the additional
.Va history-gabby
entries in persistent storage unless this variable is set.
On the other hand it will not loose the knowledge of whether
a persistent entry was gabby or not.
Also see
.Va history-file .
.
.Mx
.It Va history-size
\*(OP If a line editor is available this value restricts the
amount of history entries that are saved into a set and valid
.Va history-file .
A value of less than 0 disables this feature;
note that loading and incorporation of
.Va history-file
upon program startup can also be suppressed by doing this.
If unset or 0, a default value will be used.
Dependent on the available line editor this will also define the
number of history entries in memory;
it is also editor-specific whether runtime updates of this value will
be honoured.
.
.Mx
.It Va hold
\*(BO This setting controls whether messages are held in the system
.Va inbox ,
and it is set by default.
.
.Mx
.It Va hostname
Use this string as hostname when expanding local addresses instead of
the value obtained from
.Xr uname 3
and
.Xr getaddrinfo 3 ,
i.e., in
.Ql Message-ID:
and
.Ql From:
fields.
Note that when SMTP transport is not used (via
.Va mta ) ,
then it is normally the responsibility of the MTA to create these
fields, \*(IN in conjunction with SMTP however
.Va smtp-hostname
also influences the results:
you should produce some test messages with the desired combination of
.Va \&\&hostname ,
and/or
.Va from ,
.Va sender
etc. first.
.
.Mx
.It Va idna-disable
\*(BO\*(OP Can be used to turn off the automatic conversion of domain
names according to the rules of IDNA (internationalized domain names
for applications).
Since the IDNA code assumes that domain names are specified with the
.Va ttycharset
character set, an UTF-8 locale charset is required to represent all
possible international domain names (before conversion, that is).
.
.Mx
.It Va ignore
\*(BO Ignore interrupt signals from the terminal while entering
messages; instead echo them as
.Ql @
characters and discard the current line.
.
.Mx
.It Va ignoreeof
\*(BO Ignore end-of-file conditions
.Pf ( Ql control-D )
in compose mode on message input and in interactive command input.
If set an interactive command input session can only be left by
explicitly using one of the commands
.Ic exit
and
.Ic quit ,
and message input in compose mode can only be terminated by entering
a period
.Ql \&.
on a line by itself or by using the
.Ic ~.
.Sx "COMMAND ESCAPES" ;
.Va ignoreeof
overrides a setting of
.Pf no Va dot .
.
.Mx
.It Va inbox
If this is set to a non-empty string it will be used for expansions of
.Ql % ,
see
.Ic file
for more.
The value supports a subset of filename expansions itself.
.
.Mx
.It Va indentprefix
String used by the
.Ic ~m , ~M
and
.Ic ~R
.Sx "COMMAND ESCAPES"
and by the
.Va quote
option for indenting messages,
in place of the normal tabulator character
.Ql ^I ,
which is the default.
Be sure to quote the value if it contains spaces or tabs.
.
.Mx
.It Va keep
\*(BO If set, an empty mailbox file is not removed.
This may improve the interoperability with other mail user agents
when using a common folder directory, and prevents malicious users
from creating fake mailboxes in a world-writable spool directory.
Note this only applies to local regular (MBOX) files, other mailbox
types will never be removed.
.
.Mx
.It Va keep-content-length
\*(BO When (editing messages and) writing
.Ev MBOX
mailbox files \*(UA can be told to keep the
.Ql Content-Length:
and
.Ql Lines:
header fields that some MUAs generate by setting this variable.
Since \*(UA does neither use nor update these non-standardized header
fields (which in itself shows one of their conceptual problems),
stripping them should increase interoperability in between MUAs that
work with with same mailbox files.
Note that, if this is not set but
.Va writebackedited ,
as below, is, a possibly performed automatic stripping of these header
fields already marks the message as being modified.
.
.Mx
.It Va keepsave
\*(BO When a message is saved it is usually discarded from the
originating folder when \*(UA is quit.
This setting causes all saved message to be retained.
.
.Mx
.It Va line-editor-disable
\*(BO Turn off any enhanced line editing capabilities (see
.Sx "On terminal control and line editor"
for more).
.
.Mx
.It Va line-editor-no-defaults
\*(BO\*(OP Do not establish any default key binding.
.
.Mx
.It Va markanswered
\*(BO When a message is replied to and this variable is set,
it is marked as having been answered.
This mark has no technical meaning in the mail system;
it just causes messages to be marked in the header summary,
and makes them specially addressable.
.
.Mx
.It Va memdebug
\*(BO Internal development variable.
.
.Mx
.It Va message-id-disable
\*(BO By setting this variable the generation of
.Ql Message-ID:
can be completely suppressed, effectively leaving this task up to the
.Va mta
(Mail-Transfer-Agent) or the SMTP server.
(According to RFC 5321 your SMTP server is not required to add this
field by itself, so you should ensure that it accepts messages without a
.Ql Message-ID . )
.
.Mx
.It Va message-inject-head
A string to put at the beginning of each new message.
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.
.Mx
.It Va message-inject-tail
A string to put at the end of each new message.
The escape sequences tabulator
.Ql \et
and newline
.Ql \en
are understood.
.
.Mx
.It Va metoo
\*(BO Usually, when an
.Ic alias
expansion contains the sender, the sender is removed from the expansion.
Setting this option suppresses these removals.
Note that a set
.Va metoo
also causes a
.Ql -m
option to be passed through to the
.Va mta
(Mail-Transfer-Agent); though most of the modern MTAs no longer document
this flag, no MTA is known which does not support it (for historical
compatibility).
.
.Mx
.It Va mime-allow-text-controls
\*(BO When sending messages, each part of the message is MIME-inspected
in order to classify the
.Ql Content-Type:
and
.Ql Content-Transfer-Encoding:
(see
.Va encoding )
that is required to send this part over mail transport, i.e.,
a computation rather similar to what the
.Xr file 1
command produces when used with the
.Ql --mime
option.
.Pp
This classification however treats text files which are encoded in
UTF-16 (seen for HTML files) and similar character sets as binary
octet-streams, forcefully changing any
.Ql text/plain
or
.Ql text/html
specification to
.Ql application/octet-stream :
If that actually happens a yet unset charset MIME parameter is set to
.Ql binary ,
effectively making it impossible for the receiving MUA to automatically
interpret the contents of the part.
.Pp
If this variable is set, and the data was unambiguously identified as
text data at first glance (by a
.Ql .txt
or
.Ql .html
file extension), then the original
.Ql Content-Type:
will not be overwritten.
.
.Mx
.It Va mime-alternative-favour-rich
\*(BO If this variable is set then rich MIME alternative parts (e.g.,
HTML) will be preferred in favour of included plain text versions when
displaying messages, provided that a handler exists which produces
output that can be (re)integrated into \*(UA's normal visual display.
(E.g., at the time of this writing some newsletters ship their full
content only in the rich HTML part, whereas the plain text part only
contains topic subjects.)
.
.Mx
.It Va mime-counter-evidence
Normally the
.Ql Content-Type:
field is used to decide how to handle MIME parts.
Some MUAs however do not use
.Xr mime.types 5
or a similar mechanism to correctly classify content, but simply specify
.Ql application/octet-stream ,
even for plain text attachments like
.Ql text/diff .
If this variable is set then \*(UA will try to classify such MIME
message parts on its own, if possible, for example via a possibly
existing attachment filename.
A non-empty value may also be given, in which case a number is expected,
actually a carrier of bits.
Creating the bit-carrying number is a simple addition:
.Bd -literal -offset indent
? !echo Value should be set to $((2 + 4 + 8))
Value should be set to 14
.Ed
.Pp
.Bl -bullet -compact
.It
If bit two is set (2) then the detected
.Dq real
content-type will be carried along with the message and be used for
deciding which
.Va pipe-TYPE/SUBTYPE
is responsible for the MIME part, shall that question arise;
when displaying such a MIME part the part-info will indicate the
overridden content-type by showing a plus-sign
.Ql + .
.It
If bit three is set (4) then the counter-evidence is always produced
and a positive result will be used as the MIME type, even forcefully
overriding the parts given MIME type.
.It
If bit four is set (8) then as a last resort the actual content of
.Ql application/octet-stream
parts will be inspected, so that data which looks like plain text can be
treated as such.
.El
.
.Mx
.It Va mimetypes-load-control
Can be used to control which of the
.Xr mime.types 5
databases are loaded by \*(UA, as furtherly described in the section
.Sx "The mime.types files" .
If the letter
.Ql u
is part of the option value, then the user's personal
.Pa ~/.mime.types
file will be loaded (if it exists); likewise the letter
.Ql s
controls loading of the system wide
.Pa /etc/mime.types ;
directives found in the user file take precedence, letter matching is
case-insensitive.
If this variable is not set \*(UA will try to load both files.
Incorporation of the \*(UA-builtin MIME types cannot be suppressed,
but they will be matched last (the order can be listed via
.Ic mimetype ) .
.Pp
More sources can be specified by using a different syntax: if the
value string contains an equals sign
.Ql =
then it is instead parsed as a comma-separated list of the described
letters plus
.Ql f=FILENAME
pairs; the given filenames will be expanded and loaded, and their
content may use the extended syntax that is described in the section
.Sx "The mime.types files" .
Directives found in such files always take precedence (are prepended to
the MIME type cache).
.
.
.Mx
.It Va mta
To choose an alternate Mail-Transfer-Agent, set this option to either
the full pathname of an executable (optionally prefixed with a
.Ql file://
protocol indicator), or \*(OPally a SMTP protocol URL, e.g., \*(IN
.Pp
.Dl smtps?://[user[:password]@]server[:port]
.Pp
(\*(OU:
.Ql [smtp://]server[:port] . )
The default has been chosen at compie time.
All supported data transfers are executed in child processes, which
run asynchronously, and without supervision, unless either the
.Va sendwait
or the
.Va verbose
variable is set.
If such a child receives a TERM signal, it will abort and
.Va save
the message to
.Ev DEAD ,
if so configured.
.
.Pp
For a file-based MTA it may be necessary to set
.Va mta-argv0
in in order to choose the right target of a modern
.Xr mailwrapper 8
environment.
It will be passed command line arguments from several possible sources:
from the variable
.Va mta-arguments
if set, from the command line if given and the variable
.Va expandargv
allows their use.
Argument processing of the MTA will be terminated with a
.Fl \&\&-
separator.
.
.Pp
The otherwise occurring implicit usage of the following MTA command
line arguments can be disabled by setting the boolean variable
.Va mta-no-default-arguments
(which will also disable passing
.Fl \&\&-
to the MTA):
.Fl \&\&i
(for not treating a line with only a dot
.Ql \&.
character as the end of input),
.Fl \&\&m
(shall the variable
.Va metoo
be set) and
.Fl \&\&v
(if the
.Va verbose
variable is set); in conjunction with the
.Fl r
command line option \*(UA will also pass
.Fl \&\&f
as well as possibly
.Fl \&\&F .
.
.Pp
\*(OP \*(UA can send mail over SMTP network connections to a single
defined SMTP smarthost, the access URL of which has to be assigned to
.Va mta .
To use this mode it is helpful to read
.Sx "On URL syntax and credential lookup" .
It may be necessary to set the
.Va smtp-hostname
variable in order to use a specific combination of
.Va from ,
.Va hostname
and
.Va mta
with some mail providers.
.
.Pp
.Bl -bullet -compact
.It
The plain SMTP protocol (RFC 5321) that normally lives on the
server port 25 and requires setting the
.Va smtp-use-starttls
variable to enter a SSL/TLS encrypted session state.
Assign a value like \*(IN
.Ql smtp://[user[:password]@]server[:port]
(\*(OU
.Ql smtp://server[:port] )
to choose this protocol.
.It
The so-called SMTPS which is supposed to live on server port 465
and is automatically SSL/TLS secured.
Unfortunately it never became a standardized protocol and may thus not
be supported by your hosts network service database
\(en in fact the port number has already been reassigned to other
protocols!
.Pp
SMTPS is nonetheless a commonly offered protocol and thus can be
chosen by assigning a value like \*(IN
.Ql smtps://[user[:password]@]server[:port]
(\*(OU
.Ql smtps://server[:port] ) ;
due to the mentioned problems it is usually necessary to explicitly
specify the port as
.Ql :465 ,
however.
.It
Finally there is the SUBMISSION protocol (RFC 6409), which usually
lives on server port 587 and is practically identically to the SMTP
protocol from \*(UA's point of view beside that; it requires setting the
.Va smtp-use-starttls
variable to enter a SSL/TLS secured session state.
Assign a value like \*(IN
.Ql submission://[user[:password]@]server[:port]
(\*(OU
.Ql submission://server[:port] ) .
.El
.
.
.Mx
.It Va mta-arguments
Arguments to pass through to a file-based
.Va mta
can be given via this variable, the content of which will be split up in
a vector of arguments, to be joined onto other possible MTA options:
.Pp
.Dl set mta-arguments='-t -X \&"/tmp/my log\&"'
.
.Mx
.It Va mta-no-default-arguments
\*(BO Unless this variable is set \*(UA will pass some well known
standard command line options to a file-based
.Va mta
(Mail-Transfer-Agent), see there for more.
.
.Mx
.It Va mta-argv0
Many systems use a so-called
.Xr mailwrapper 8
environment to ensure compatibility with
.Xr sendmail 1 .
This works by inspecting the name that was used to invoke the mail
delivery system.
If this variable is set then the mailwrapper (the program that is
actually executed when calling the file-based
.Va mta )
will treat its contents as that name.
The default is
.Ql sendmail .
.
.Mx
.It Va NAIL_EXTRA_RC
The name of an optional startup file to be read last.
This variable has an effect only if it is set in any of the
.Sx "Resource files" ,
it is not imported from the environment.
Use this file for commands that are not understood by other POSIX
.Xr mailx 1
implementations.
.
.Mx Va netrc-lookup
.It Va netrc-lookup-USER@HOST , netrc-lookup-HOST , netrc-lookup
\*(BO\*(IN\*(OP Used to control usage of the users
.Pa .netrc
file for lookup of account credentials, as documented in the section
.Sx "On URL syntax and credential lookup"
and for the command
.Ic netrc ;
the section
.Sx "The .netrc file"
documents the file format.
Also see
.Va netrc-pipe .
.
.Mx
.It Va netrc-pipe
\*(IN\*(OP When
.Pa .netrc
is loaded (see
.Ic netrc
and
.Va netrc-lookup )
then \*(UA will read the output of a shell pipe instead of the users
.Pa .netrc
file if this variable is set (to the desired shell command).
This can be used to, e.g., store
.Pa .netrc
in encrypted form:
.Pp
.Dl set netrc-pipe='gpg -qd ~/.netrc.pgp'
.
.Mx
.It Va newfolders
If this variable has the value
.Ql maildir ,
newly created local folders will be in Maildir format.
.
.Mx
.It Va newmail
Checks for new mail in the current folder each time the prompt is shown.
A Maildir folder must be re-scanned to determine if new mail has arrived.
If this variable is set to the special value
.Ql nopoll
then a Maildir folder will not be rescanned completely, but only
timestamp changes are detected.
.
.Mx
.Mx
.It Va on-compose-enter , on-compose-leave
\*(ID Macro hooks which will be executed before compose mode is
entered, and after composing has been finished, respectively.
Please note that this interface is very likely to change in v15, and
should therefore possibly even be seen as experimental.
.Ic localopts
are by default enabled for these hooks, causing any setting to be
forgotten after the message has been sent.
The following variables will be set temporarily during execution of the
macros.
.Pp
.Bl -tag -compact -width ".It Va compose_subject"
.It Va compose-from
.Va from .
.It Va compose-sender
.Va sender .
.It Va compose-to , compose-cc , compose-bcc
The list of receiver addresses as a space-separated list.
.It Va compose-subject
The subject.
.El
.
.Mx
.It Va outfolder
\*(BO Causes the filename given in the
.Va record
variable
and the sender-based filenames for the
.Ic Copy
and
.Ic Save
commands to be interpreted relative to the directory given in the
.Va folder
variable rather than to the current directory,
unless it is set to an absolute pathname.
.
.Mx
.It Va page
\*(BO If set, each message feed through the command given for
.Ic pipe
is followed by a formfeed character
.Ql \ef .
.
.Mx Va password
.It Va password-USER@HOST , password-HOST , password
\*(IN Variable chain that sets a password, which is used in case none has
been given in the protocol and account-specific URL;
as a last resort \*(UA will ask for a password on the user's terminal if
the authentication method requires a password.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
.
.It Va password-USER@HOST
\*(OU (see the chain above for \*(IN)
Set the password for
.Ql USER
when connecting to
.Ql HOST .
If no such variable is defined for a host,
the user will be asked for a password on standard input.
Specifying passwords in a startup file is generally a security risk;
the file should be readable by the invoking user only.
.
.Mx
.It Va piperaw
\*(BO Send messages to the
.Ic pipe
command without performing MIME and character set conversions.
.
.
.Mx
.It Va pipe-TYPE/SUBTYPE
When a MIME message part of type
.Ql TYPE/SUBTYPE
(case-insensitive) is displayed or quoted,
its text is filtered through the value of this variable interpreted as
a shell command.
The special value
.Ql @
forces interpretation of the message part as plain text, e.g.,
.Ql set pipe-application/xml=@
will henceforth display XML
.Dq as is .
(The same could also be achieved by adding a MIME type marker with the
.Ic mimetype
command.
And \*(OPally MIME type handlers may be defined via
.Sx "The Mailcap files"
\(em corresponding flag strings are shown in parenthesis below.)
.
.Pp
The special value
.Ql @
can in fact be used to adjust usage and behaviour of a following shell
command specification by appending trigger characters to it, e.g., the
following hypothetical command specification could be used:
.Bd -literal -offset indent
set pipe-X/Y='@*!++=@vim ${NAIL_FILENAME_TEMPORARY}'
.Ed
.
.Pp
.Bl -tag -compact -width ".It Ql __"
.It Ql *
Simply by using the special
.Ql @
prefix the MIME type (shell command) handler will only be invoked to
display or convert the MIME part if the message is addressed directly
and alone by itself.
Use this trigger to disable this and always invoke the handler
.Pf ( Cd x-mailx-always ) .
.
.It Ql #
If set the handler will not be invoked when a message is to be quoted,
but only when it will be displayed
.Pf ( Cd x-mailx-noquote ) .
.
.It Ql &
The command will be run asynchronously, i.e., without blocking \*(UA,
which may be a handy way to display a, e.g., PDF file while also
continuing to read the mail message
.Pf ( Cd x-mailx-async ) .
Asynchronous execution implies
.Ql # .
.
.It Ql \&!
The command must be run on an interactive terminal, \*(UA will
temporarily release the terminal to it
.Pf ( Cd needsterminal ) .
This flag is mutual exclusive with
.Ql & ,
will only be used in interactive mode and implies
.Ql # .
.
.It Ql +
Request creation of a zero-sized temporary file, the absolute pathname
of which will be made accessible via the environment variable
.Ev NAIL_FILENAME_TEMPORARY
.Pf ( Cd x-mailx-tmpfile ) .
If this trigger is given twice then the file will be unlinked
automatically by \*(UA when the command loop is entered again at latest
.Pf ( Cd x-mailx-tmpfile-unlink ) .
(Do not use this for asynchronous handlers.)
.
.It Ql =
Normally the MIME part content is passed to the handler via standard
input; if this flag is set then the data will instead be written into
.Ev NAIL_FILENAME_TEMPORARY
.Pf ( Cd x-mailx-tmpfile-fill ) ,
the creation of which is implied; note however that in order to cause
deletion of the temporary file you still have to use two plus signs
.Ql ++
explicitly!
.
.It Ql @
To avoid ambiguities with normal shell command content you can use
another at-sign to forcefully terminate interpretation of remaining
characters.
(Any character not in this list will have the same effect.)
.El
.
.Pp
Some information about the MIME part to be displayed is embedded into
the environment of the shell command:
.
.Pp
.Bl -tag -compact -width ".It Ev _AIL__ILENAME__ENERATED"
.Mx
.It Ev NAIL_CONTENT
The MIME content-type of the part, if known, the empty string otherwise.
.
.Mx
.It Ev NAIL_CONTENT_EVIDENCE
If
.Va mime-counter-evidence
includes the carry-around-bit (2), then this will be set to the detected
MIME content-type; not only then identical to
.Ev \&\&NAIL_CONTENT
otherwise.
.
.Mx
.It Ev NAIL_FILENAME
The filename, if any is set, the empty string otherwise.
.
.Mx
.It Ev NAIL_FILENAME_GENERATED
A random string.
.
.Mx
.It Ev NAIL_FILENAME_TEMPORARY
If temporary file creation has been requested through the command prefix
this variable will be set and contain the absolute pathname of the
temporary file.
.
.Mx
.It Ev NAIL_TMPDIR
The temporary directory that \*(UA uses.
Usually identical to
.Ev TMPDIR ,
but guaranteed to be set and usable by child processes;
to ensure the latter condition for
.Ev \&\&TMPDIR
also, it will be set.
.El
.
.
.Mx
.It Va pipe-EXTENSION
This is identical to
.Va pipe-TYPE/SUBTYPE
except that
.Ql EXTENSION
(normalized to lowercase using character mappings of the ASCII charset)
names a file extension, e.g.,
.Ql xhtml .
Handlers registered using this method take precedence.
.
.Mx Va pop3-auth
.It Va pop3-auth-USER@HOST , pop3-auth-HOST , pop3-auth
\*(OP\*(IN Variable chain that sets the POP3 authentication method.
The only possible value as of now is
.Ql plain ,
which is thus the default.
.
.Mx
.Mx Va pop3-bulk-load
.It Va pop3-bulk-load-USER@HOST , pop3-bulk-load-HOST , pop3-bulk-load
\*(BO\*(OP When accessing a POP3 server \*(UA loads the headers of
the messages, and only requests the message bodies on user request.
For the POP3 protocol this means that the message headers will be
downloaded twice.
If this variable is set then \*(UA will download only complete messages
from the given POP3 server(s) instead.
.
.Mx Va pop3-keepalive
.It Va pop3-keepalive-USER@HOST , pop3-keepalive-HOST , pop3-keepalive
\*(OP POP3 servers close the connection after a period of inactivity;
the standard requires this to be at least 10 minutes,
but practical experience may vary.
Setting this variable to a numeric value greater than
.Ql 0
causes a
.Ql NOOP
command to be sent each value seconds if no other operation is performed.
.
.Mx Va pop3-no-apop
.It Va pop3-no-apop-USER@HOST , pop3-no-apop-HOST , pop3-no-apop
\*(BO\*(OP Unless this variable is set the
.Ql APOP
authentication method will be used when connecting to a POP3 server that
advertises support.
The advantage of
.Ql APOP
is that the password is not sent in clear text over the wire and that
only a single packet is sent for the user/password tuple.
Note that
.Va pop3-no-apop-HOST
requires \*(IN.
.
.Mx Va pop3-use-starttls
.It Va pop3-use-starttls-USER@HOST , pop3-use-starttls-HOST , pop3-use-starttls
\*(BO\*(OP Causes \*(UA to issue a
.Ql STLS
command to make an unencrypted POP3 session SSL/TLS encrypted.
This functionality is not supported by all servers,
and is not used if the session is already encrypted by the POP3S method.
Note that
.Va pop3-use-starttls-HOST
requires \*(IN.
.
.Mx
.It Va print-alternatives
\*(BO When a MIME message part of type
.Ql multipart/alternative
is displayed and it contains a subpart of type
.Ql text/plain ,
other parts are normally discarded.
Setting this variable causes all subparts to be displayed,
just as if the surrounding part was of type
.Ql multipart/mixed .
.
.Mx
.It Va prompt
The string used as a prompt in interactive mode.
Whenever the variable is evaluated the value is shell-expanded using
dollar-single-quote expansion mode (see
.Sx COMMANDS ) ,
and it is an error if the prompt expands to more than a single token.
This (post-assignment, i.e., second) expansion can be used to embed
status information, for example
.Va -account-name ,
.Va -exit-status
or
.Va -mailbox-display .
In order to embed characters which should not be counted when
calculating the visual width of the resulting string, enclose the
characters of interest in a pair of reverse solidus escaped brackets:
.Ql \e[\eE[0m\e] .
Prompting may be prevented by setting this to the null string
(a.k.a.\|
.Ql set noprompt ) .
.
.Mx
.It Va prompt2
This string is used for secondary prompts, but is otherwise identical to
.Va prompt .
The default is
.Ql ..\0 .
.
.Mx
.It Va quiet
\*(BO Suppresses the printing of the version when first invoked.
.
.Mx
.It Va quote
If set, \*(UA starts a replying message with the original message
prefixed by the value of the variable
.Va indentprefix .
Normally, a heading consisting of
.Dq Fromheaderfield wrote:
is put before the quotation.
If the string
.Ql noheading
is assigned to the
.Va \&\&quote
variable, this heading is omitted.
If the string
.Ql headers
is assigned, the headers selected by the
.Ic ignore Ns / Ns Ic retain
commands are put above the message body,
thus
.Va \&\&quote
acts like an automatic
.Pf ` Ic ~m Ns '
.Sx "COMMAND ESCAPES"
command, then.
If the string
.Ql allheaders
is assigned, all headers are put above the message body and all MIME
parts are included, making
.Va \&\&quote
act like an automatic
.Pf ` Ic ~M Ns '
command; also see
.Va quote-as-attachment .
.
.Mx
.It Va quote-as-attachment
\*(BO Add the original message in its entirety as a
.Ql message/rfc822
MIME attachment when replying to a message.
Note this works regardless of the setting of
.Va quote .
.
.Mx
.It Va quote-fold
\*(OP Can be set in addition to
.Va indentprefix .
Setting this turns on a more fancy quotation algorithm in that leading
quotation characters are compressed and overlong lines are folded.
.Va \&\&quote-fold
can be set to either one or two (space separated) numeric values,
which are interpreted as the maximum (goal) and the minimum line length,
respectively, in a spirit rather equal to the
.Xr fmt 1
program, but line-, not paragraph-based.
If not set explicitly the minimum will reflect the goal algorithmically.
The goal cannot be smaller than the length of
.Va indentprefix
plus some additional pad.
Necessary adjustments take place silently.
.
.Mx
.It Va recipients-in-cc
\*(BO On group replies, specify only the sender of the original mail in
.Ql To:
and mention the other recipients in the secondary
.Ql Cc: .
By default all recipients of the original mail will be addressed via
.Ql To: .
.
.Mx
.It Va record
If defined, gives the pathname of the folder used to record all outgoing
mail.
If not defined, then outgoing mail is not saved.
When saving to this folder fails the message is not sent,
but instead saved to
.Ev DEAD .
.
.Mx
.It Va record-resent
\*(BO If both this variable and the
.Va record
variable are set,
the
.Ic resend
and
.Ic Resend
commands save messages to the
.Va record
folder as it is normally only done for newly composed messages.
.
.Mx
.It Va reply-in-same-charset
\*(BO If this variable is set \*(UA first tries to use the same
character set of the original message for replies.
If this fails, the mechanism described in
.Sx "Character sets"
is evaluated as usual.
.
.Mx
.It Va reply_strings
Can be set to a comma-separated list of (case-insensitive according to
ASCII rules) strings which shall be recognized in addition to the
builtin strings as
.Ql Subject:
reply message indicators \(en builtin are
.Ql Re: ,
which is mandated by RFC 5322, as well as the german
.Ql Aw: .
.
.Mx
.It Va replyto
A list of addresses to put into the
.Ql Reply-To:
field of the message header.
Members of this list are handled as if they were in the
.Ic alternates
list.
.
.Mx
.It Va reply-to-honour
Controls whether a
.Ql Reply-To:
header is honoured when replying to a message via
.Ic reply
or
.Ic Lreply .
This is a quadoption; if set without a value it defaults to
.Dq yes .
.
.Mx
.It Va rfc822-body-from_
\*(BO This variable can be used to force displaying a so-called
.Ql From_
line for messages that are embedded into an envelope mail via the
.Ql message/rfc822
MIME mechanism, for more visual convenience.
.
.Mx
.It Va save
\*(BO Enable saving of (partial) messages in
.Ev DEAD
upon interrupt or delivery error.
.
.Mx
.It Va screen
The number of lines that represents a
.Dq screenful
of lines, used in
.Ic headers
summary display,
.Ic from
.Ic search Ns
ing, message
.Ic top Ns
line display and scrolling via
.Ic z .
If this variable is not set \*(UA falls back to a calculation based upon
the detected terminal window size and the baud rate: the faster the
terminal, the more will be shown.
Overall screen dimensions and pager usage is influenced by the
environment variables
.Ev COLUMNS
and
.Ev LINES
and the variable
.Va crt .
.
.Mx
.It Va searchheaders
\*(BO Expand message-list specifiers in the form
.Ql /x:y
to all messages containing the substring
.Dq y
in the header field
.Ql x .
The string search is case insensitive.
.
.Mx
.It Va sendcharsets
\*(OP A comma-separated list of character set names that can be used in
outgoing internet mail.
The value of the variable
.Va charset-8bit
is automatically appended to this list of character-sets.
If no character set conversion capabilities are compiled into \*(UA then
the only supported charset is
.Va ttycharset .
Also see
.Va sendcharsets-else-ttycharset
and refer to the section
.Sx "Character sets"
for the complete picture of character set conversion in \*(UA.
.
.Mx
.It Va sendcharsets-else-ttycharset
\*(BO\*(OP If this variable is set, but
.Va sendcharsets
is not, then \*(UA acts as if
.Va sendcharsets
had been set to the value of the variable
.Va ttycharset .
In effect this combination passes through the message data in the
character set of the current locale (given that
.Va ttycharset
has not been set manually), i.e., without converting it to the
.Va charset-8bit
fallback character set.
Thus, mail message text will be in ISO-8859-1 encoding when send from
within a ISO-8859-1 locale, and in UTF-8 encoding when send from within
an UTF-8 locale.
If no character set conversion capabilities are available in \*(UA then
the only supported character set is
.Va ttycharset .
.
.Mx
.It Va sender
An address that is put into the
.Ql Sender:
field of outgoing messages, quoting RFC 5322: the mailbox of the agent
responsible for the actual transmission of the message.
This field should normally not be used unless the
.Ql From:
field contains more than one address, on which case it is required.
The
.Va \&\&sender
address is handled as if it were in the
.Ic alternates
list.
.
.Mx
.It Va sendmail
\*(OB Predecessor of
.Va mta .
.
.Mx
.It Va sendmail-arguments
\*(OB Predecessor of
.Va mta-arguments .
.
.Mx
.It Va sendmail-no-default-arguments
\*(OB\*(BO Predecessor of
.Va mta-no-default-arguments .
.
.Mx
.It Va sendmail-progname
\*(OB Predecessor of
.Va mta-argv0 .
.
.Mx
.It Va sendwait
\*(BO When sending a message wait until the
.Va mta
(including the builtin SMTP one) exits before accepting further commands.
.Sy Only
with this variable set errors reported by the MTA will be recognizable!
If the MTA returns a non-zero exit status,
the exit status of \*(UA will also be non-zero.
.
.Mx
.It Va showlast
\*(BO This setting causes \*(UA to start at the last message
instead of the first one when opening a mail folder.
.
.Mx
.It Va showname
\*(BO Causes \*(UA to use the sender's real name instead of the plain
address in the header field summary and in message specifications.
.
.Mx
.It Va showto
\*(BO Causes the recipient of the message to be shown in the header
summary if the message was sent by the user.
.
.Mx
.It Va Sign
The string to expand
.Ic ~A
to (see
.Sx "COMMAND ESCAPES" ) .
.
.Mx
.It Va sign
The string to expand
.Ic ~a
to (see
.Sx "COMMAND ESCAPES" ) .
.
.Mx
.It Va signature
Must correspond to the name of a readable file if set.
The file's content is then appended to each singlepart message
and to the first part of each multipart message.
Be warned that there is no possibility to edit the signature for an
individual message.
.
.Mx
.It Va skipemptybody
\*(BO If an outgoing message does not contain any text in its first or
only message part, do not send it but discard it silently (see also the
command line option
.Fl E ) .
.
.Mx
.It Va smime-ca-dir
\*(OP Specifies a directory with CA certificates in PEM (Privacy
Enhanced Mail) format for verification of S/MIME signed messages.
.
.Mx
.It Va smime-ca-file
\*(OP Specifies a file with CA certificates in PEM format for
verification of S/MIME signed messages.
.
.Mx Va smime-cipher
.It Va smime-cipher-USER@HOST , smime-cipher
\*(OP Specifies the cipher to use when generating S/MIME encrypted
messages (for the specified account).
RFC 5751 mandates a default of
.Ql aes128
(AES-128 CBC).
Possible values are (case-insensitive and) in decreasing cipher strength:
.Ql aes256
(AES-256 CBC),
.Ql aes192
(AES-192 CBC),
.Ql aes128
(AES-128 CBC),
.Ql des3
(DES EDE3 CBC, 168 bits; default if
.Ql aes128
is not available) and
.Ql des
(DES CBC, 56 bits).
.Pp
The actually available cipher algorithms depend on the cryptographic
library that \*(UA uses.
\*(OP Support for more cipher algorithms may be available through
dynamic loading via, e.g.,
.Xr EVP_get_cipherbyname 3
(OpenSSL) if \*(UA has been compiled to support this.
.
.Mx
.It Va smime-crl-dir
\*(OP Specifies a directory that contains files with CRLs in PEM format
to use when verifying S/MIME messages.
.
.Mx
.It Va smime-crl-file
\*(OP Specifies a file that contains a CRL in PEM format to use when
verifying S/MIME messages.
.
.Mx
.It Va smime-encrypt-USER@HOST
\*(OP If this variable is set, messages send to the given receiver are
encrypted before sending.
The value of the variable must be set to the name of a file that
contains a certificate in PEM format.
.Pp
If a message is sent to multiple recipients,
each of them for whom a corresponding variable is set will receive an
individually encrypted message;
other recipients will continue to receive the message in plain text
unless the
.Va smime-force-encryption
variable is set.
It is recommended to sign encrypted messages, i.e., to also set the
.Va smime-sign
variable.
.
.Mx
.It Va smime-force-encryption
\*(BO\*(OP Causes \*(UA to refuse sending unencrypted messages.
.
.Mx
.It Va smime-no-default-ca
\*(BO\*(OP Do not load default CA locations when verifying S/MIME
signed messages.
.
.Mx
.It Va smime-sign
\*(BO\*(OP S/MIME sign outgoing messages with the user's private key
and include the user's certificate as a MIME attachment.
Signing a message enables a recipient to verify that the sender used
a valid certificate,
that the email addresses in the certificate match those in the message
header and that the message content has not been altered.
It does not change the message text,
and people will be able to read the message as usual.
Also see
.Va smime-sign-cert , smime-sign-include-certs
and
.Va smime-sign-message-digest .
.
.Mx Va smime-sign-cert
.It Va smime-sign-cert-USER@HOST , smime-sign-cert
\*(OP Points to a file in PEM format.
For the purpose of signing and decryption this file needs to contain the
user's private key as well as his certificate.
.Pp
For message signing
.Ql USER@HOST
is always derived from the value of
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
For the purpose of encryption the recipient's public encryption key
(certificate) is expected; the command
.Ic certsave
can be used to save certificates of signed messages (the section
.Sx "Signed and encrypted messages with S/MIME"
gives some details).
This mode of operation is usually driven by the specialized form.
.Pp
When decrypting messages the account is derived from the recipient
fields
.Pf ( Ql To:
and
.Ql Cc: )
of the message, which are searched for addresses for which such
a variable is set.
\*(UA always uses the first address that matches,
so if the same message is sent to more than one of the user's addresses
using different encryption keys, decryption might fail.
.
.Mx Va smime-sign-include-certs
.It Va smime-sign-include-certs-USER@HOST , smime-sign-include-certs
\*(OP If used, this is supposed to a consist of a comma-separated list
of files, each of which containing a single certificate in PEM format to
be included in the S/MIME message in addition to the
.Va smime-sign-cert
certificate.
This is most useful for long certificate chains if it is desired to aid
the receiving parties verification process.
Note that top level certificates may also be included in the chain but
do not play a role for verification.
Also see
.Va smime-sign-cert .
Remember that for this
.Ql USER@HOST
refers to the variable
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
.
.Mx Va smime-sign-message-digest
.It Va smime-sign-message-digest-USER@HOST , smime-sign-message-digest
\*(OP Specifies the message digest to use when signing S/MIME messages.
RFC 5751 mandates a default of
.Ql sha1 .
Possible values are (case-insensitive and) in decreasing cipher strength:
.Ql sha512 ,
.Ql sha384 ,
.Ql sha256 ,
.Ql sha224
and
.Ql md5 .
.Pp
The actually available message digest algorithms depend on the
cryptographic library that \*(UA uses.
\*(OP Support for more message digest algorithms may be available
through dynamic loading via, e.g.,
.Xr EVP_get_digestbyname 3
(OpenSSL) if \*(UA has been compiled to support this.
Remember that for this
.Ql USER@HOST
refers to the variable
.Va from
(or, if that contains multiple addresses,
.Va sender ) .
.
.Mx
.It Va smtp
\*(OB\*(OP To use the builtin SMTP transport, specify a SMTP URL in
.Va mta .
\*(ID For compatibility reasons a set
.Va smtp
is used in preference of
.Va mta .
.
.Mx Va smtp-auth
.It Va smtp-auth-USER@HOST , smtp-auth-HOST , smtp-auth
\*(OP Variable chain that controls the SMTP
.Va mta
authentication method, possible values are
.Ql none
(\*(OU default),
.Ql plain
(\*(IN default),
.Ql login
as well as the \*(OPal methods
.Ql cram-md5
and
.Ql gssapi .
The
.Ql none
method does not need any user credentials,
.Ql gssapi
requires a user name and all other methods require a user name and
a password.
See \*(IN
.Va mta ,
.Va user
and
.Va password
(\*(OU
.Va smtp-auth-password
and
.Va smtp-auth-user ) .
Note that
.Va smtp-auth-HOST
is \*(IN.
\*(OU: Note for
.Va smtp-auth-USER@HOST :
may override dependent on sender address in the variable
.Va from .
.
.It Va smtp-auth-password
\*(OP\*(OU Sets the global fallback password for SMTP authentication.
If the authentication method requires a password, but neither
.Va smtp-auth-password
nor a matching
.Va smtp-auth-password-USER@HOST
can be found,
\*(UA will ask for a password on the user's terminal.
.
.It Va smtp-auth-password-USER@HOST
\*(OU Overrides
.Va smtp-auth-password
for specific values of sender addresses, dependent upon the variable
.Va from .
.
.It Va smtp-auth-user
\*(OP\*(OU Sets the global fallback user name for SMTP authentication.
If the authentication method requires a user name, but neither
.Va smtp-auth-user
nor a matching
.Va smtp-auth-user-USER@HOST
can be found,
\*(UA will ask for a user name on the user's terminal.
.
.It Va smtp-auth-user-USER@HOST
\*(OU Overrides
.Va smtp-auth-user
for specific values of sender addresses, dependent upon the variable
.Va from .
.
.Mx
.It Va smtp-hostname
\*(OP\*(IN Normally \*(UA uses the variable
.Va from
to derive the necessary
.Ql USER@HOST
information in order to issue a
.Ql MAIL FROM:<>
SMTP
.Va mta
command.
Setting
.Va smtp-hostname
can be used to use the
.Ql USER
from the SMTP account
.Pf ( Va mta
or the
.Va user
variable chain)
and the
.Ql HOST
from the content of this variable (or, if that is the empty string,
.Va hostname
or the local hostname as a last resort).
This often allows using an address that is itself valid but hosted by
a provider other than which (in
.Va from )
is about to send the message.
Setting this variable also influences the generated
.Ql Message-ID: .
.
.Mx Va smtp-use-starttls
.It Va smtp-use-starttls-USER@HOST , smtp-use-starttls-HOST , smtp-use-starttls
\*(BO\*(OP Causes \*(UA to issue a
.Ql STARTTLS
command to make an SMTP
.Va mta
session SSL/TLS encrypted, i.e., to enable transport layer security.
.
.
.Mx
.It Va spam-interface
\*(OP In order to use any of the spam-related commands (like, e.g.,
.Ic spamrate )
the desired spam interface must be defined by setting this variable.
Please refer to the manual section
.Sx "Handling spam"
for the complete picture of spam handling in \*(UA.
All or none of the following interfaces may be available:
.
.Bl -tag -width ".It Ql _ilte_"
.It Ql spamc
Interaction with
.Xr spamc 1
from the
.Xr spamassassin 1
.Pf ( Lk http://spamassassin.apache.org SpamAssassin )
suite.
Different to the generic filter interface \*(UA will automatically add
the correct arguments for a given command and has the necessary
knowledge to parse the program's output.
A default value for
.Va spamc-command
will have been compiled into the \*(UA binary if
.Xr spamc 1
has been found in
.Ev PATH
during compilation.
Shall it be necessary to define a specific connection type (rather than
using a configuration file for that), the variable
.Va spamc-arguments
can be used as in, e.g.,
.Ql -d server.example.com -p 783 .
It is also possible to specify a per-user configuration via
.Va spamc-user .
Note that this interface does not inspect the
.Ql is-spam
flag of a message for the command
.Ic spamforget .
.
.It Ql filter
generic spam filter support via freely configurable hooks.
This interface is meant for programs like
.Xr bogofilter 1
and requires according behaviour in respect to the hooks' exit
status for at least the command
.Ic spamrate
.Pf ( Ql 0
meaning a message is spam,
.Ql 1
for non-spam,
.Ql 2
for unsure and any other return value indicating a hard error);
since the hooks can include shell code snippets diverting behaviour
can be intercepted as necessary.
The hooks are
.Va spamfilter-ham , spamfilter-noham , spamfilter-nospam , \
  spamfilter-rate
and
.Va spamfilter-spam ;
the manual section
.Sx "Handling spam"
contains examples for some programs.
The process environment of the hooks will have the variables
.Ev NAIL_TMPDIR , TMPDIR
and
.Ev NAIL_FILENAME_GENERATED
set.
Note that spam score support for
.Ic spamrate
is not supported unless the \*(OPtional regular expression support is
available and the
.Va spamfilter-rate-scanscore
variable is set.
.El
.
.
.Mx
.It Va spam-maxsize
\*(OP Messages that exceed this size will not be passed through to the
configured
.Va spam-interface .
If unset or 0, the default of 420000 bytes is used.
.
.Mx
.It Va spamc-command
\*(OP The path to the
.Xr spamc 1
program for the
.Ql spamc
.Va spam-interface .
Note that the path is not expanded, but used
.Dq as is .
A fallback path will have been compiled into the \*(UA binary if the
executable had been found during compilation.
.
.Mx
.It Va spamc-arguments
\*(OP Even though \*(UA deals with most arguments for the
.Ql spamc
.Va spam-interface
automatically, it may at least sometimes be desirable to specify
connection-related ones via this variable, e.g.,
.Ql -d server.example.com -p 783 .
.
.Mx
.It Va spamc-user
\*(OP Specify a username for per-user configuration files for the
.Ql spamc
.Va spam-interface .
If this is set to the empty string then \*(UA will use the name of the
current
.Va user .
.
.Mx
.Mx
.Mx
.Mx
.Mx
.It Va spamfilter-ham , spamfilter-noham , \
  spamfilter-nospam , spamfilter-rate , spamfilter-spam
\*(OP Command and argument hooks for the
.Ql filter
.Va spam-interface .
The manual section
.Sx "Handling spam"
contains examples for some programs.
.
.Mx
.It Va spamfilter-rate-scanscore
\*(OP Because of the generic nature of the
.Ql filter
.Va spam-interface
spam scores are not supported for it by default, but if the \*(OPtional
regular expression support is available then setting this variable can
be used to overcome this restriction.
It is interpreted as follows: first a number (digits) is parsed that
must be followed by a semicolon
.Ql \&;
and an extended regular expression.
Then the latter is used to parse the first output line of the
.Va spamfilter-rate
hook, and, in case the evaluation is successful, the group that has been
specified via the number is interpreted as a floating point scan score.
.
.Mx
.It Va ssl-ca-dir
\*(OP Specifies a directory with CA certificates in PEM (Pricacy
Enhanced Mail) for verification of of SSL/TLS server certificates.
See
.Xr SSL_CTX_load_verify_locations 3
for more information.
.
.Mx
.It Va ssl-ca-file
\*(OP Specifies a file with CA certificates in PEM format for
verification of SSL/TLS server certificates.
See
.Xr SSL_CTX_load_verify_locations 3
for more information.
.
.Mx Va ssl-cert
.It Va ssl-cert-USER@HOST , ssl-cert-HOST , ssl-cert
\*(OP Variable chain that sets the file name for a SSL/TLS client
certificate required by some servers.
This is a direct interface to the
.Ql Certificate
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available.
.
.Mx Va ssl-cipher-list
.It Va ssl-cipher-list-USER@HOST , ssl-cipher-list-HOST , ssl-cipher-list
\*(OP Specifies a list of ciphers for SSL/TLS connections.
This is a direct interface to the
.Ql CipherString
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available; see
.Xr ciphers 1
for more information.
By default \*(UA does not set a list of ciphers, in effect using a
.Va ssl-protocol
specific cipher (protocol standards ship with a list of acceptable
ciphers), possibly cramped to what the actually used SSL/TLS library
supports \(en the manual section
.Sx "An example configuration"
also contains a SSL/TLS use case.
.
.Mx
.It Va ssl-config-file
\*(OP If this variable is set \*(UA will call
.Xr CONF_modules_load_file 3
to allow OpenSSL to be configured according to the host system wide
security settings.
If a non-empty value is given then this will be used to specify the
configuration file to be used instead of the global OpenSSL default;
note that in this case it is an error if the file cannot be loaded.
The application name will always be passed as
.Dq \*(uA .
.
.Mx
.It Va ssl-crl-file
\*(OP Specifies a file that contains a CRL in PEM format to use when
verifying SSL/TLS server certificates.
.
.Mx
.It Va ssl-crl-dir
\*(OP Specifies a directory that contains files with CRLs in PEM format
to use when verifying SSL/TLS server certificates.
.
.Mx Va ssl-key
.It Va ssl-key-USER@HOST , ssl-key-HOST , ssl-key
\*(OP Variable chain that sets the file name for the private key of
a SSL/TLS client certificate.
If unset, the name of the certificate file is used.
The file is expected to be in PEM format.
This is a direct interface to the
.Ql PrivateKey
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available.
.
.Mx Va ssl-method
.It Va ssl-method-USER@HOST , ssl-method-HOST , ssl-method
\*(OB\*(OP Please use the newer and more flexible
.Va ssl-protocol
instead: if both values are set,
.Va ssl-protocol
will take precedence!
Can be set to the following values, the actually used
.Va ssl-protocol
specification to which it is mapped is shown in parenthesis:
.Ql tls1.2
.Pf ( Ql -ALL, TLSv1.2 ) ,
.Ql tls1.1
.Pf ( Ql -ALL, TLSv1.1 ) ,
.Ql tls1
.Pf ( Ql -ALL, TLSv1 )
and
.Ql ssl3
.Pf ( Ql -ALL, SSLv3 ) ;
the special value
.Ql auto
is mapped to
.Ql ALL, -SSLv2
and thus includes the SSLv3 protocol.
Note that SSLv2 is no longer supported at all.
.
.Mx
.It Va ssl-no-default-ca
\*(BO\*(OP Do not load default CA locations to verify SSL/TLS server
certificates.
.
.Mx Va ssl-protocol
.It Va ssl-protocol-USER@HOST , ssl-protocol-HOST , ssl-protocol
\*(OP Specify the used SSL/TLS protocol.
This is a direct interface to the
.Ql Protocol
slot of the
.Xr SSL_CONF_cmd 3
function of the OpenSSL library, if available;
otherwise an \*(UA internal parser is used which understands the
following subset of (case-insensitive) command strings:
.Ql SSLv3 ,
.Ql TLSv1 ,
.Ql TLSv1.1
and
.Ql TLSv1.2 ,
as well as the special value
.Ql ALL .
Multiple specifications may be given via a comma-separated list which
ignores any whitespace.
An optional
.Ql +
plus prefix will enable a protocol, a
.Ql -
minus prefix will disable it, so that
.Ql -ALL, TLSv1.2
will enable only the TLSv1.2 protocol.
.Pp
It depends upon the used TLS/SSL library which protocols are actually
supported and which protocols are used if
.Va ssl-protocol
is not set, but note that SSLv2 is no longer supported at all and
actively disabled.
Especially for older protocols explicitly securing
.Va ssl-cipher-list
may be worthwile, see
.Sx "An example configuration" .
.
.Mx
.It Va ssl-rand-egd
\*(OP Gives the pathname to an entropy daemon socket, see
.Xr RAND_egd 3 .
Not all SSL/TLS libraries support this.
.
.Mx
.It Va ssl-rand-file
\*(OP Gives the filename to a file with random entropy data, see
.Xr RAND_load_file 3 .
If this variable is not set, or set to the empty string, or if the
filename expansion failed, then
.Xr RAND_file_name 3
will be used to create the filename if, and only if,
.Xr RAND_status 3
documents that the SSL PRNG is not yet sufficiently seeded.
If \*(UA successfully seeded the SSL PRNG then it will update the file
.Pf ( Xr RAND_write_file 3 ) .
This variable is only used if
.Va ssl-rand-egd
is not set (or not supported by the SSL/TLS library).
.
.Mx Va ssl-verify
.It Va ssl-verify-USER@HOST , ssl-verify-HOST , ssl-verify
\*(OP Variable chain that sets the action to be performed if an error
occurs during SSL/TLS server certificate validation.
Valid (case-insensitive) values are
.Ql strict
(fail and close connection immediately),
.Ql ask
(ask whether to continue on standard input),
.Ql warn
(show a warning and continue),
.Ql ignore
(do not perform validation).
The default is
.Ql ask .
.
.Mx
.It Va stealthmua
If only set without an assigned value, then this setting inhibits the
generation of the
.Ql Message-ID:
and
.Ql User-Agent:
header fields that include obvious references to \*(UA.
There are two pitfalls associated with this:
First, the message id of outgoing messages is not known anymore.
Second, an expert may still use the remaining information in the header
to track down the originating mail user agent.
If set to the value
.Ql noagent ,
then the mentioned
.Ql Message-ID:
suppression does not occur.
.
.
.Mx
.It Va termcap
(\*(OP) This specifies a comma-separated list of
.Lb libterminfo
and/or
.Lb libtermcap
capabilities (see
.Sx "On terminal control and line editor" ,
escape commas with reverse solidus) to be used to overwrite or define
entries.
Note that this variable will only be queried once at program startup and
can thus only be specified in resource files or on the command line.
.
.Pp
String capabilities form
.Ql cap=value
pairs and are expected unless noted otherwise.
Numerics have to be notated as
.Ql cap#number
where the number is expected in normal decimal notation.
Finally, booleans do not have any value but indicate a true or false
state simply by being defined or not; this indeed means that \*(UA
does not support undefining an existing boolean.
String capability values will undergo some expansions before use:
for one notations like
.Ql ^LETTER
stand for
.Ql control-LETTER ,
and for clarification purposes
.Ql \eE
can be used to specify
.Ql escape
(the control notation
.Ql ^[
could lead to misreadings when a left bracket follows, which it does for
the standard CSI sequence);
finally three letter octal sequences, as in
.Ql \e061 ,
are supported.
To specify that a terminal supports 256-colours, and to define sequences
that home the cursor and produce an audible bell, one might write:
.
.Bd -literal -offset indent
set termcap='Co#256,home=\eE[H,bel=^G'
.Ed
.
.Pp
The following terminal capabilities are or may be meaningful for the
operation of the builtin line editor or \*(UA in general:
.
.Pp
.Bl -tag -compact -width yay
.\" HAVE_COLOUR
.It Cd colors Ns \0or Cd Co
.Cd max_colors :
numeric capability specifying the maximum number of colours.
Note that \*(UA does not actually care about the terminal beside that,
but always emits ANSI / ISO 6429 escape sequences.
.
.\" HAVE_TERMCAP
.It Cd rmcup Ns \0or Cd te Ns \0/ Cd smcup Ns \0or Cd ti
.Cd exit_ca_mode
and
.Cd enter_ca_mode ,
respectively: exit and enter the alternative screen
.Dq ca-mode ,
effectively turning \*(UA into a fullscreen application.
To disable that, set (at least) one to the empty string.
.
.It Cd smkx Ns \0or Cd ks Ns \0/ Cd rmkx Ns \0or Cd ke
.Cd keypad_xmit
and
.Cd keypad_local ,
respectively: enable and disable the keypad.
This is always enabled if available, because it seems even keyboards
without keypads generate other key codes for, e.g., cursor keys in that
case, and only if enabled we see the codes that we are interested in.
.
.It Cd ed Ns \0or Cd cd
.Cd clr_eos :
clear the screen.
.
.It Cd clear Ns \0or Cd cl
.Cd clear_screen :
clear the screen and home cursor.
(Will be simulated via
.Cd ho
plus
.Cd cd . )
.
.It Cd home Ns \0or Cd ho
.Cd cursor_home :
home cursor.
.
.\" HAVE_MLE
.It Cd el Ns \0or Cd ce
.Cd clr_eol :
clear to the end of line.
(Will be simulated via
.Cd ch
plus repetitions of space characters.)
.
.It Cd hpa Ns \0or Cd ch
.Cd column_address :
move the cursor (to the given column parameter) in the current row.
(Will be simulated via
.Cd cr
plus
.Cd nd . )
.
.It Cd cr
.Cd carriage_return :
move to the first column in the current row.
The default builtin fallback is
.Ql \er .
.
.It Cd cub1 Ns \0or Cd le
.Cd cursor_left :
move the cursor left one space (non-destructively).
The default builtin fallback is
.Ql \eb .
.
.It Cd cuf1 Ns \0or Cd nd
.Cd cursor_right :
move the cursor right one space (non-destructively).
The default builtin fallback is
.Ql \eE[C ,
which is used by most terminals.
Less often occur
.Ql \eEC
and
.Ql \eEOC .
.El
.
.Pp
Many more capabilities which describe key-sequences are documented for
.Ic bind .
.
.Mx
.It Va termcap-disable
\*(OP Disable any interaction with a terminal control library.
If set only some generic fallback builtins and possibly the content of
.Va termcap
describe the terminal to \*(UA.
.Sy Note
that this variable will only be queried once at program startup and can
thus only be specified in resource files or on the command line.
.
.Mx
.It Va toplines
If defined, gives the number of lines of a message to be displayed
with the command
.Ic top ;
if unset, the first five lines are printed, if set to 0 the variable
.Va screen
is inspected.
If the value is negative then its absolute value will be used for right
shifting the
.Va screen
height;  (shifting bitwise is like dividing algorithmically, but since
it takes away bits the value decreases pretty fast).
.
.Mx
.It Va topsqueeze
\*(BO If set then the
.Ic top
command series will strip adjacent empty lines and quotations.
.
.Mx
.It Va ttycharset
The character set of the terminal \*(UA operates on,
and the one and only supported character set that \*(UA can use if no
character set conversion capabilities have been compiled into it,
in which case it defaults to ISO-8859-1 unless it can deduce a value
from the
.Ev LC_CTYPE
locale environment.
Refer to the section
.Sx "Character sets"
for the complete picture about character sets.
.
.Mx
.It Va typescript-mode
\*(BO A special multiplex variable that disables all variables and
settings which result in behaviour that interferes with running \*(UA in
.Xr script 1 ,
e.g., it sets
.Va colour-disable ,
.Va line-editor-disable
and (before startup completed only)
.Va termcap-disable .
Unsetting it does not restore the former state of the covered settings.
.
.Mx
.It Va umask
For a safety-by-default policy \*(UA sets its process
.Xr umask 2
to
.Ql 0077 ,
but this variable can be used to override that:
set it to an empty value to do not change the (current) setting,
otherwise the process file mode creation mask is updated to the new value.
Child processes inherit the process file mode creation mask.
.
.Mx Va user
.It Va user-HOST , user
\*(IN Variable chain that sets a global fallback user name, which is
used in case none has been given in the protocol and account-specific
URL.
This variable defaults to the name of the user who runs \*(UA.
.
.Mx
.It Va v15-compat
\*(BO Setting this enables upward compatibility with \*(UA
version 15.0 in respect to which configuration options are available and
how they are handled.
This manual uses \*(IN and \*(OU to refer to the new and the old way of
doing things, respectively.
.
.Mx
.It Va verbose
\*(BO This setting, also controllable via the command line option
.Fl v ,
causes \*(UA to be more verbose, e.g., it will display obsoletion
warnings and SSL/TLS certificate chains.
Even though marked \*(BO this option may be set twice in order to
increase the level of verbosity even more, in which case even details of
the actual message delivery and protocol conversations are shown.
A single
.Pf no Va verbose
is sufficient to disable verbosity as such.
.
.Mx
.Mx
.Mx
.Mx
.It Va version , version-major , version-minor , version-update
\*(RO \*(UA version information: the first variable contains a string
containing the complete version identification, the latter three contain
only digits: the major, minor and update version numbers.
The output of the command
.Ic version
will include this information.
.
.Mx
.It Va writebackedited
If this variable is set messages modified using the
.Ic edit
or
.Ic visual
commands are written back to the current folder when it is quit;
it is only honoured for writable folders in MBOX format, though.
Note that the editor will be pointed to the raw message content in that
case, i.e., neither MIME decoding nor decryption will have been
performed, and proper RFC 4155
.Ql From_
quoting of newly added or edited content is also left as an excercise to
the user.
.El
.\" }}} (Variables)
.\" }}} (INTERNAL VARIABLES)
.
.
.\" .Sh ENVIRONMENT {{{
.Sh ENVIRONMENT
.
The term
.Dq environment variable
should be considered an indication that these variables are either
standardized as vivid parts of process environments, or that they are
commonly found in there.
The process environment is inherited from the
.Xr sh 1
once \*(UA is started, and unless otherwise explicitly noted handling of
the following variables transparently integrates into that of the
.Sx "INTERNAL VARIABLES"
from \*(UA's point of view.
This means that, e.g., they can be managed via
.Ic set
and
.Ic unset ,
causing automatic program environment updates (to be inherited by
newly created child processes).
.
.Pp
In order to transparently integrate other environment variables equally
they need to be imported (linked) with the command
.Ic environ .
This command can also be used to set and unset non-integrated
environment variables from scratch, sufficient system support provided.
The following example, applicable to a POSIX shell, sets the
.Ev COLUMNS
environment variable for \*(UA only, and beforehand exports the
.Ev EDITOR
in order to affect any further processing in the running shell:
.
.Bd -literal -offset indent
$ EDITOR="vim -u ${HOME}/.vimrc"
$ export EDITOR
$ COLUMNS=80 \*(uA -R
.Ed
.
.Bl -tag -width ".It Ev _AILR_"
.Mx
.It Ev COLUMNS
The user's preferred width in column positions for the terminal screen
or window.
Queried and used once on program startup, actively managed for child
processes and the MLE (see
.Sx "On terminal control and line editor" )
in interactive mode thereafter.
.
.Mx
.It Ev DEAD
The name of the (mailbox)
.Ic file
to use for saving aborted messages if
.Va save
is set; this defaults to
.Pa dead.letter
in the user's
.Ev HOME
directory.
If the variable
.Va debug
is set no output will be generated, otherwise the contents of the file
will be replaced.
.
.Mx
.It Ev EDITOR
Pathname of the text editor to use in the
.Ic edit
command and
.Ic ~e
.Sx "COMMAND ESCAPES" .
A default editor is used if this value is not defined.
.
.Mx
.It Ev HOME
The user's home directory.
This variable is only used when it resides in the process environment.
.
.Mx
.Mx
.Mx
.Mx
.Mx
.It Ev LANG , LC_ALL , LC_COLLATE , LC_CTYPE , LC_MESSAGES
See
.Xr locale 7
and
.Sx "Character sets" .
.
.Mx
.It Ev LINES
The user's preferred number of lines on a page or the vertical screen
or window size in lines.
Queried and used once on program startup, actively managed for child
processes in interactive mode thereafter.
.
.Mx
.It Ev LISTER
Pathname of the directory lister to use in the
.Ic folders
command when operating on local mailboxes.
Default is
.Xr ls 1
(path search through
.Ev SHELL ) .
.
.Mx
.It Ev LOGNAME
Upon startup \*(UA will actively ensure that this variable refers to the
name of the user who runs \*(UA, in order to be able to pass a verified
name to any newly created child process.
.
.Mx
.It Ev MAIL
Is used as the user's primary system mailbox, unless
.Va inbox
is set, see
.Ic file .
This is assumed to be an absolute pathname.
.
.Mx
.It Ev MAILCAPS
\*(OP Overrides the default path search for
.Sx "The Mailcap files" ,
which is defined in the standard RFC 1524 as
.Ql ~/.mailcap:\:/etc/mailcap:\:/usr/etc/mailcap:\:/usr/local/etc/mailcap .
.\" TODO we should have a mailcaps-default virtual RDONLY option!
(\*(UA makes it a configuration option, however.)
Note this is not a search path, but a path search.
.
.Mx
.It Ev MAILRC
Is used as a startup file instead of
.Pa \*(ur
if set.
When \*(UA scripts are invoked on behalf of other users,
either this variable should be set to
.Pa /dev/null
or the
.Fl \&:
command line option should be used in order to avoid side-effects from
reading their configuration files.
This variable is only used when it resides in the process environment.
.
.Mx
.It Ev MBOX
The name of the user's mbox file.
A logical subset of the special conventions that are documented for the
.Ic file
command and the internal variable
.Va folder
may be used.
The fallback default is
.Pa mbox
in the user's
.Ev HOME
directory.
Traditionally this secondary mailbox is used as the file to save
messages from the primary system mailbox that have been read.
Also see
.Sx "Message states" .
.
.Mx
.It Ev NAIL_NO_SYSTEM_RC
If this variable is set then reading of
.Pa \*(UR
at startup is inhibited, i.e., the same effect is achieved as if \*(UA
had been started up with the option
.Fl n .
This variable is only used when it resides in the process environment.
.
.Mx
.It Ev NETRC
\*(IN\*(OP This variable overrides the default location of the user's
.Pa .netrc
file.
.
.Mx
.It Ev PAGER
Pathname of the program to use for backing the command
.Ic more ,
and when the
.Va crt
variable enforces usage of a pager for output.
The default paginator is
.Xr more 1
(path search through
.Ev SHELL ) .
.Pp
\*(UA inspects the contents of this variable: if its contains the string
.Dq less
then a non-existing environment variable
.Va LESS
will be set to
.Ql FRXi ,
.Ql FRi
or
.Ql Ri ,
dependent on whether terminal control support is available and whether
that supports full (alternative) screen mode or not (also see
.Sx "On terminal control and line editor" ) .
Likewise for
.Dq lv
.Va LV
will optionally be set to
.Dq -c .
Alse see
.Va colour-pager .
.
.Mx
.It Ev PATH
A colon-separated list of directories that is searched by the shell when
looking for commands, e.g.,
.Ql /bin:/usr/bin:/usr/local/bin .
.
.Mx
.It Ev SHELL
The shell to use for the commands
.Ic \&! ,
.Ic shell ,
the
.Ic ~!
.Sx "COMMAND ESCAPES"
and when starting subprocesses.
A default shell is used if this environment variable is not defined.
.
.Mx
.It Ev SOURCE_DATE_EPOCH
If set, this specifies a time in seconds since the Unix epoch
(1970-01-01) to be used in place of the current time.
This is for the sake of reproduceability of tests, to be used during
development or by software packagers.
.
.Mx
.It Ev TERM
\*(OP The terminal type for which output is to be prepared.
For extended colour and font control please refer to
.Sx "Coloured display" ,
and for terminal management in general to
.Sx "On terminal control and line editor" .
.
.Mx
.It Ev TMPDIR
Used as directory for temporary files instead of
.Pa /tmp ,
if set.
This variable is only used when it resides in the process environment.
.
.Mx
.It Ev USER
Identical to
.Ev LOGNAME
(see there), but this variable is not standardized, should therefore not
be used, and is only corrected if already set.
.
.Mx
.It Ev VISUAL
Pathname of the text editor to use in the
.Ic visual
command and
.Ic ~v
.Sx "COMMAND ESCAPES" .
.El
.\" }}}
.
.
.\" .Sh FILES {{{
.Sh FILES
.
.Bl -tag -width ".It Pa _etc/mime.type_"
.It Pa \*(ur
File giving initial commands.
.
.It Pa \*(UR
System wide initialization file.
.
.Mx
.It Pa ~/.mailcap
\*(OP Personal MIME type handler definition file, see
.Sx "The Mailcap files" .
(RFC 1524 location, the actual path is a configuration option.)
.
.Mx
.It Pa /etc/mailcap
\*(OP System wide MIME type handler definition file, see
.Sx "The Mailcap files" .
(RFC 1524 location, the actual path is a configuration option.)
.
.Mx
.It Pa ~/.mime.types
Personal MIME types, see
.Sx "The mime.types files" .
.
.Mx
.It Pa /etc/mime.types
System wide MIME types, see
.Sx "The mime.types files" .
.
.Mx
.It Pa ~/.netrc
\*(IN\*(OP The default location of the users
.Pa .netrc
file \(en the section
.Sx "The .netrc file"
documents the file format.
.El
.
.\" .Ss "The mime.types files" {{{
.Ss "The mime.types files"
.
When sending messages \*(UA tries to determine the content type of all
attachments.
When displaying message content or attachments \*(UA uses the content
type to decide whether it can directly display data or whether it needs
to deal with content handlers.
It learns about M(ultipurpose) I(nternet) M(ail) E(xtensions) types and
how to treat them by reading
.Pa mime.types
files, the loading of which can be controlled by setting the variable
.Va mimetypes-load-control .
(The command
.Ic mimetype
can also be used to deal with MIME types.)
.Pa mime.types
files have the following syntax:
.
.Pp
.Dl type/subtype extension [extension ...]
.
.Pp
where
.Ql type/subtype
are strings describing the file contents, and one or multiple
.Ql extension Ns
s, separated by whitespace, name the part of a filename starting after
the last dot (of interest).
Comments may be introduced anywhere on a line with a number sign
.Ql # ,
causing the remaining line to be discarded.
.
\*(UA also supports an extended, non-portable syntax in specially
crafted files, which can be loaded via the alternative value syntax of
.Va mimetypes-load-control
and prepends an optional
.Ql type-marker :
.
.Pp
.Dl [type-marker ]type/subtype extension [extension ...]
.
.Pp
The following type markers are supported:
.
.Pp
.Bl -tag -compact -width ".It Ar _n_u"
.It Ar @
Treat message parts with this content as plain text.
.It Ar @t@
The same as plain
.Ar @ .
.It Ar @h@
Treat message parts with this content as HTML tagsoup.
If the \*(OPal HTML-tagsoup-to-text converter is not available treat
the content as plain text instead.
.It Ar @H@
Likewise
.Ar @h@
but instead of falling back to plain text require an explicit content
handler to be defined.
.El
.
.Pp
Further reading:
for sending messages:
.Ic mimetype ,
.Va mime-allow-text-controls ,
.Va mimetypes-load-control .
For reading etc. messages:
.Sx "HTML mail and MIME attachments" ,
.Sx "The Mailcap files" ,
.Ic mimetype ,
.Va mime-counter-evidence ,
.Va mimetypes-load-control ,
.Va pipe-TYPE/SUBTYPE ,
.Va pipe-EXTENSION .
.\" }}}
.
.\" .Ss "The Mailcap files" {{{
.Ss "The Mailcap files"
.
RFC 1524 defines a
.Dq User Agent Configuration Mechanism
which \*(UA \*(OPally supports.
It defines a file format to be used to inform mail user agent programs
about the locally-installed facilities for handling various data
formats, i.e., about commands and how they can be used to display, edit
etc. MIME part contents, as well as a default path search that includes
multiple possible locations of
.Dq mailcap
files and the
.Ev MAILCAPS
environment variable that can be used to overwrite that (repeating here
that it is not a search path, but instead a path search specification).
Any existing files will be loaded in sequence, appending any content to
the list of MIME type handler directives.
.
.Pp
.Dq Mailcap
files consist of a set of newline separated entries.
Comment lines start with a number sign
.Ql #
(in the first column!) and are ignored.
Empty lines are also ignored.
All other lines form individual entries that must adhere to the syntax
described below.
To extend a single entry (not comment) its line can be continued on
follow lines if newline characters are
.Dq escaped
by preceding them with the reverse solidus character
.Ql \e .
The standard does not specify how leading whitespace of follow lines
is to be treated, therefore \*(UA retains it.
.
.Pp
.Dq Mailcap
entries consist of a number of semicolon
.Ql \&;
separated fields, and the reverse solidus
.Ql \e
character can be used to escape any following character including
semicolon and itself.
The first two fields are mandatory and must occur in the specified
order, the remaining fields are optional and may appear in any order.
Leading and trailing whitespace of content is ignored (removed).
.
.Pp
The first field defines the MIME
.Ql TYPE/SUBTYPE
the entry is about to handle (case-insensitively, and no reverse solidus
escaping is possible in this field).
If the subtype is specified as an asterisk
.Ql *
the entry is meant to match all subtypes of the named type, e.g.,
.Ql audio/*
would match any audio type.
The second field defines the shell command which shall be used to
.Dq display
MIME parts of the given type; it is implicitly called the
.Cd view
command.
.
.Pp
For data
.Dq consuming
shell commands message (MIME part) data is passed via standard input
unless the given shell command includes one or more instances of the
(unquoted) string
.Ql %s ,
in which case these instances will be replaced with a temporary filename
and the data will have been stored in the file that is being pointed to.
Likewise, for data
.Dq producing
shell commands data is assumed to be generated on standard output unless
the given command includes (one ore multiple)
.Ql %s .
In any case any given
.Ql %s
format is replaced with a(n already) properly quoted filename.
Note that when a command makes use of a temporary file via
.Ql %s
then \*(UA will remove it again, as if the
.Cd x-mailx-tmpfile ,
.Cd x-mailx-tmpfile-fill
and
.Cd x-mailx-tmpfile-unlink
flags had been set; see below for more.
.
.Pp
The optional fields either define a shell command or an attribute (flag)
value, the latter being a single word and the former being a keyword
naming the field followed by an equals sign
.Ql =
succeeded by a shell command, and as usual for any
.Dq Mailcap
content any whitespace surrounding the equals sign will be removed, too.
Optional fields include the following:
.
.
.Bl -tag -width textualnewlines
.It Cd compose
A program that can be used to compose a new body or body part in the
given format.
(Currently unused.)
.
.It Cd composetyped
Similar to the
.Cd compose
field, but is to be used when the composing program needs to specify the
.Ql Content-type:
header field to be applied to the composed data.
(Currently unused.)
.
.It Cd edit
A program that can be used to edit a body or body part in the given
format.
(Currently unused.)
.
.It Cd print
A program that can be used to print a message or body part in the given
format.
(Currently unused.)
.
.It Cd test
Specifies a program to be run to test some condition, e.g., the machine
architecture, or the window system in use, to determine whether or not
this mailcap entry applies.
If the test fails, a subsequent mailcap entry should be sought; also see
.Cd x-mailx-test-once .
.
.It Cd needsterminal
This flag field indicates that the given shell command must be run on
an interactive terminal.
\*(UA will temporarily release the terminal to the given command in
interactive mode, in non-interactive mode this entry will be entirely
ignored; this flag implies
.Cd x-mailx-noquote .
.
.It Cd copiousoutput
A flag field which indicates that the output of the
.Cd view
command will be an extended stream of textual output that can be
(re)integrated into \*(UA's normal visual display.
It is mutually exclusive with
.Cd needsterminal
and implies
.Cd x-mailx-always .
.
.It Cd textualnewlines
A flag field which indicates that this type of data is line-oriented and
that, if encoded in
.Ql base64 ,
all newlines should be converted to canonical form (CRLF) before
encoding, and will be in that form after decoding.
(Currently unused.)
.
.It Cd nametemplate
This field gives a file name format, in which
.Ql %s
will be replaced by a random string, the joined combination of which
will be used as the filename denoted by
.Ev NAIL_FILENAME_TEMPORARY .
One could specify that a GIF file being passed to an image viewer should
have a name ending in
.Ql .gif
by using
.Ql nametemplate=%s.gif .
Note that \*(UA ignores the name template unless that solely specifies
a filename suffix that consists of (ASCII) alphabetic and numeric
characters, the underscore and dot only.
.
.It Cd x11-bitmap
Names a file, in X11 bitmap (xbm) format, which points to an appropriate
icon to be used to visually denote the presence of this kind of data.
This field is not used by \*(UA.
.
.It Cd description
A textual description that describes this type of data.
.
.It Cd x-mailx-always
Extension flag field that denotes that the given
.Cd view
command shall be executed even if multiple messages will be displayed
at once.
Normally messages which require external viewers that produce output
which does not integrate into \*(UA's visual display (i.e., do not have
.Cd copiousoutput
set) have to be addressed directly and individually.
(To avoid cases where, e.g., a thousand PDF viewer instances are spawned
in sequence.)
.
.It Cd x-mailx-even-if-not-interactive
An extension flag test field \(em by default handlers without
.Cd copiousoutput
are entirely ignored in non-interactive mode, but if this flag is set
then their use will be considered.
It is an error if this flag is set for commands that use the flag
.Cd needsterminal .
.
.It Cd x-mailx-noquote
An extension flag field that indicates that even a
.Cd copiousoutput
.Cd view
command shall not be used to generate message quotes
(as it would be by default).
.
.It Cd x-mailx-async
Extension flag field that denotes that the given
.Cd view
command shall be executed asynchronously, without blocking \*(UA.
Cannot be used in conjunction with
.Cd needsterminal .
.
.It Cd x-mailx-test-once
Extension flag which denotes whether the given
.Cd test
command shall be evaluated once only and the (boolean) result be cached.
This is handy if some global unchanging condition is to be queried, like
.Dq running under the X Window System .
.
.It Cd x-mailx-tmpfile
Extension flag field that requests creation of a zero-sized temporary
file, the name of which is to be placed in the environment variable
.Ev NAIL_FILENAME_TEMPORARY .
It is an error to use this flag with commands that include a
.Ql %s
format.
.
.It Cd x-mailx-tmpfile-fill
Normally the MIME part content is passed to the handler via standard
input; if this flag is set then the data will instead be written into
the implied
.Cd x-mailx-tmpfile .
In order to cause deletion of the temporary file you will have to set
.Cd x-mailx-tmpfile-unlink
explicitly!
It is an error to use this flag with commands that include a
.Ql %s
format.
.
.It Cd x-mailx-tmpfile-unlink
Extension flag field that requests that the temporary file shall be
deleted automatically when the command loop is entered again at latest.
(Do not use this for asynchronous handlers.)
It is an error to use this flag with commands that include a
.Ql %s
format, or without also setting
.Cd x-mailx-tmpfile
or
.Cd x-mailx-tmpfile-fill .
.
.It Cd x-mailx-tmpfile-keep
Using the string
.Ql %s
implies the three tmpfile related flags above, but if you want, e.g.,
.Cd x-mailx-async
and deal with the temporary file yourself, you can add in this flag to
forcefully ignore
.Cd x-mailx-tmpfile-unlink .
.El
.
.
.Pp
The standard includes the possibility to define any number of additional
entry fields, prefixed by
.Ql x- .
Flag fields apply to the entire
.Dq Mailcap
entry \(em in some unusual cases, this may not be desirable, but
differentiation can be accomplished via separate entries, taking
advantage of the fact that subsequent entries are searched if an earlier
one does not provide enough information.
E.g., if a
.Cd view
command needs to specify the
.Cd needsterminal
flag, but the
.Cd compose
command shall not, the following will help out the latter (with enabled
.Va debug
or an increased
.Va verbose
level \*(UA will show information about handler evaluation):
.
.Bd -literal -offset indent
application/postscript; ps-to-terminal %s; needsterminal
application/postscript; ps-to-terminal %s; compose=idraw %s
.Ed
.
.Pp
In fields any occurrence of the format string
.Ql %t
will be replaced by the
.Ql TYPE/SUBTYPE
specification.
Named parameters from the
.Ql Content-type:
field may be placed in the command execution line using
.Ql %{
followed by the parameter name and a closing
.Ql }
character.
The entire parameter should appear as a single command line argument,
regardless of embedded spaces; thus:
.
.Bd -literal -offset indent
# Message
Content-type:  multipart/mixed; boundary=42

# Mailcap file
multipart/*; /usr/local/bin/showmulti \e
  %t %{boundary}  ;  composetyped  = /usr/local/bin/makemulti

# Executed shell command
/usr/local/bin/showmulti multipart/mixed 42
.Ed
.
.Pp
.\" TODO v15: Mailcap: %n,%F
Note that \*(UA does not support handlers for multipart MIME parts as
shown in this example (as of today).
\*(UA does not support the additional formats
.Ql %n
and
.Ql %F .
An example file, also showing how to properly deal with the expansion of
.Ql %s ,
which includes any quotes that are necessary to make it a valid shell
argument by itself and thus will cause undesired behaviour when placed
in additional user-provided quotes:
.
.Bd -literal -offset indent
# Comment line
text/richtext; richtext %s; copiousoutput

text/x-perl; perl -cWT %s

application/pdf; \e
  infile=%s\e; \e
    trap "rm -f ${infile}" EXIT\e; \e
    trap "exit 75" INT QUIT TERM\e; \e
    mupdf %s; \e
  x-mailx-async; x-mailx-tmpfile-keep

application/*; echo "This is \e"%t\e" but \e
    is 50 \e% Greek to me" \e; < %s head -c 1024 | cat -vET; \e
  copiousoutput; x-mailx-noquote
.Ed
.
.Pp
Further reading:
.Sx "HTML mail and MIME attachments" ,
.Sx "The mime.types files" ,
.Ic mimetype ,
.Ev MAILCAPS ,
.Va mime-counter-evidence ,
.Va pipe-TYPE/SUBTYPE ,
.Va pipe-EXTENSION .
.\" }}}
.
.\" .Ss "The .netrc file" {{{
.Ss "The .netrc file"
.
The
.Pa .netrc
file contains user credentials for machine accounts.
The default location in the user's
.Ev HOME
directory may be overridden by the
.Ev NETRC
environment variable.
The file consists of space, tabulator or newline separated tokens.
\*(UA implements a parser that supports a superset of the original BSD
syntax, but users should nonetheless be aware of portability glitches
of that file format, shall their
.Pa .netrc
be usable across multiple programs and platforms:
.
.Pp
.Bl -bullet -compact
.It
BSD does not support single, but only double quotation marks, e.g.,
.Ql password="pass with spaces" .
.It
BSD (only?) supports escaping of single characters via a reverse solidus
(e.g., a space can be escaped via
.Ql \e\0 ) ,
in- as well as outside of a quoted string.
.It
BSD does not require a final quotation mark of the last user input token.
.It
The original BSD (Berknet) parser also supported a format which allowed
tokens to be separated with commas \(en whereas at least Hewlett-Packard
still seems to support this syntax, \*(UA does not!
.It
As a non-portable extension some widely-used programs support
shell-style comments: if an input line starts, after any amount of
whitespace, with a number sign
.Ql # ,
then the rest of the line is ignored.
.It
Whereas other programs may require that the
.Pa .netrc
file is accessible by only the user if it contains a
.Cd password
token for any other
.Cd login
than
.Dq anonymous ,
\*(UA will always require these strict permissions.
.El
.
.Pp
Of the following list of supported tokens \*(UA only uses (and caches)
.Cd machine ,
.Cd login
and
.Cd password .
At runtime the command
.Ic netrc
can be used to control \*(UA's
.Pa .netrc
cache.
.
.Bl -tag -width password
.It Cd machine Ar name
The hostname of the entries' machine, lowercase-normalized by \*(UA
before use.
Any further file content, until either end-of-file or the occurrence
of another
.Cd machine
or a
.Cd default
first-class token is bound (only related) to the machine
.Ar name .
.Pp
As an extension that should not be the cause of any worries
\*(UA supports a single wildcard prefix for
.Ar name :
.Bd -literal -offset indent
machine *.example.com login USER password PASS
machine pop3.example.com login USER password PASS
machine smtp.example.com login USER password PASS
.Ed
.Pp
which would match
.Ql xy.example.com
as well as
.Ql pop3.example.com ,
but neither
.Ql example.com
nor
.Ql local.smtp.example.com .
Note that in the example neither
.Ql pop3.example.com
nor
.Ql smtp.example.com
will be matched by the wildcard, since the exact matches take
precedence (it is however faster to specify it the other way around).
.
.It Cd default
This is the same as
.Cd machine
except that it is a fallback entry that is used shall none of the
specified machines match; only one default token may be specified,
and it must be the last first-class token.
.
.It Cd login Ar name
The user name on the remote machine.
.
.It Cd password Ar string
The user's password on the remote machine.
.
.It Cd account Ar string
Supply an additional account password.
This is merely for FTP purposes.
.
.It Cd macdef Ar name
Define a macro.
A macro is defined with the specified
.Ar name ;
it is formed from all lines beginning with the next line and continuing
until a blank line is (consecutive newline characters are) encountered.
(Note that
.Cd macdef
entries cannot be utilized by multiple machines, too, but must be
defined following the
.Ic machine
they are intended to be used with.)
If a macro named
.Ar init
exists, it is automatically run as the last step of the login process.
This is merely for FTP purposes.
.El
.\" }}}
.
.\" }}}
.
.
.\" .Sh EXAMPLES {{{
.Sh EXAMPLES
.
.\" .Ss "An example configuration" {{{
.Ss "An example configuration"
.
.Bd -literal -offset indent
# This example assumes v15.0 compatibility mode
set v15-compat

# Where are the up-to-date SSL certificates?
#set ssl-ca-dir=/etc/ssl/certs
set ssl-ca-file=/etc/ssl/certs/ca-certificates.crt

# (Since we manage up-to-date ones explicitly, do not use any,
# possibly outdated, default certificates shipped with OpenSSL)
set ssl-no-default-ca

# Do not use protocols older than TLS v1.2.
# Change this only when the remote server does not support it:
# maybe use ssl-protocol-HOST (or -USER@HOST) syntax to define
# such explicit exceptions, then
set ssl-protocol='-ALL,+TLSv1.2'

# Explicitly define the list of ciphers, which may improve security,
# especially with protocols older than TLS v1.2.  See ciphers(1).
# Including "@STRENGTH" will sort the final list by algorithm strength.
# In reality it is possibly best to only use ssl-cipher-list-HOST
# (or -USER@HOST), as necessary, again..
set ssl-cipher-list=TLSv1.2:!aNULL:!eNULL:!MEDIUM:!LOW:!EXPORT:@STRENGTH
# ALL:!aNULL:!MEDIUM:!LOW:!MD5:!RC4:!EXPORT:@STRENGTH

# Request strict transport security checks!
set ssl-verify=strict

# Essential setting: select allowed character sets
set sendcharsets=utf-8,iso-8859-1

# A very kind option: when replying to a message, first try to
# use the same encoding that the original poster used herself!
set reply-in-same-charset

# When replying to or forwarding a message the comment and name
# parts of email addresses are removed unless this variable is set
set fullnames

# When sending messages, wait until the Mail-Transfer-Agent finishs.
# Only like this you will be able to see errors reported through the
# exit status of the MTA (including the builtin SMTP one)!
set sendwait

# Only use builtin MIME types, no mime.types(5) files
set mimetypes-load-control

# Default directory where we act in (relative to $HOME)
set folder=mail
# A leading "+" (often) means: under *folder*
# *record* is used to save copies of sent messages
set MBOX=+mbox.mbox record=+sent.mbox DEAD=+dead.txt

# Make "file mymbox" and "file myrec" go to..
shortcut mymbox %:+mbox.mbox myrec +sent.mbox

# Not really optional, e.g., for S/MIME
set from='Your Name <address@exam.ple>'

# It may be necessary to set hostname and/or smtp-hostname
# if the "SERVER" of mta and "domain" of from do not match.
# The `urlencode' command can be used to encode USER and PASS
set mta=(smtps?|submission)://[USER[:PASS]@]SERVER[:PORT] \e
  smtp-auth=login/plain... \e
  smtp-use-starttls

# Never refuse to start into interactive mode, and more
set emptystart \e
  colour-pager crt= \e
  followup-to followup-to-honour=ask-yes \e
  history-file=+.\*(uAhist history-size=-1 history-gabby \e
  mime-counter-evidence=0xE \e
  prompt='[\e${-account-name} \e${-mailbox-display}]? ' \e
  reply-to-honour=ask-yes \e
  umask=

# When `t'yping messages, show only these headers
# (use `T'ype for all headers and `S'how for raw message)
retain date from to cc subject

# Some mailing lists
mlist '@xyz-editor\e.xyz$' '@xyzf\e.xyz$'
mlsubscribe '^xfans@xfans\e.xyz$'

# A real life example of a very huge free mail provider
account XooglX {
  set folder=~/spool/XooglX inbox=+syste.mbox sent=+sent
  set from='Your Name <address@examp.ple>'
  set mta=smtp://USER:PASS@smtp.gmXil.com smtp-use-starttls
}

# Here is a pretty large one which does not allow sending mails
# if there is a domain name mismatch on the SMTP protocol level,
# which would bite us if the value of from does not match, e.g.,
# for people who have a sXXXXeforge project and want to speak
# with the mailing list under their project account (in from),
# still sending the message through their normal mail provider
account XandeX {
  set folder=~/spool/XandeX inbox=+syste.mbox sent=+sent
  set from='Your Name <address@exam.ple>'
  set mta=smtps://USER:PASS@smtp.yaXXex.ru:465 \e
    hostname=yaXXex.com smtp-hostname=
}

# Create some new commands so that, e.g., `ls /tmp' will..
wysh ghost lls '!ls ${LS_COLOR_FLAG} -aFlrS'
wysh ghost llS '!ls ${LS_COLOR_FLAG} -aFlS'
wysh ghost ls '!ls ${LS_COLOR_FLAG} -aFrS'
wysh ghost lS '!ls ${LS_COLOR_FLAG} -aFS'
wysh ghost lla '!ls ${LS_COLOR_FLAG} -aFlr'
wysh ghost llA '!ls ${LS_COLOR_FLAG} -aFl'
wysh ghost la '!ls ${LS_COLOR_FLAG} -aFr'
wysh ghost lA '!ls ${LS_COLOR_FLAG} -aF'
wysh ghost ll '!ls ${LS_COLOR_FLAG} -aFltr'
wysh ghost lL '!ls ${LS_COLOR_FLAG} -aFlt'
wysh ghost l '!ls ${LS_COLOR_FLAG} -aFtr'
wysh ghost L '!ls ${LS_COLOR_FLAG} -aFt'

# We do not support gpg(1) directly yet.  But simple --clearsign'd
# message parts can be dealt with as follows:
define V {
  wysh set pipe-text/plain=$'@*#++=@\e
    < "${NAIL_FILENAME_TEMPORARY}" awk \e
        -v TMPFILE="${NAIL_FILENAME_TEMPORARY}" \e'\e
      BEGIN {done=0}\e
      /^-----BEGIN PGP SIGNED MESSAGE-----/,/^$/{\e
        if (done++ != 0)\e
          next;\e
        print "--- GPG --verify ---";\e
        system("gpg --verify " TMPFILE " 2>&1");\e
        print "--- GPG --verify ---";\e
        print "";\e
        next;\e
      }\e
      /^-----BEGIN PGP SIGNATURE-----/,\e
          /^-----END PGP SIGNATURE-----/{\e
        next;\e
      }\e
      {print}\e
      \e''
  print
}
ghost V call V

define RK {
  !printf 'Key IDs to gpg --recv-keys: ';\e
    read keyids;\e
    gpg --recv-keys ${keyids};
}
ghost RK call RK
.Ed
.
.Pp
When storing passwords in
.Pa \*(ur
appropriate permissions should be set on this file with
.Ql $ chmod 0600 \*(ur .
If the \*(OPal
.Va netrc-lookup
is available user credentials can be stored in the central
.Pa .netrc
file instead; e.g., here is a different version of the example account
that sets up SMTP and POP3:
.
.Bd -literal -offset indent
account XandeX {
  set folder=~/spool/XandeX inbox=+syste.mbox sent=+sent
  set from='Your Name <address@exam.ple>'
  set netrc-lookup
  # Load an encrypted ~/.netrc by uncommenting the next line
  #set netrc-pipe='gpg -qd ~/.netrc.pgp'

  set mta=smtps://smtp.yXXXXx.ru:465 \e
      smtp-hostname= hostname=yXXXXx.com
  set pop3-keepalive=240 pop3-no-apop-pop.yXXXXx.ru
  ghost xp fi pop3s://pop.yXXXXx.ru
}
.Ed
.
.Pp
and, in the
.Pa .netrc
file:
.
.Bd -literal -offset indent
machine *.yXXXXx.ru login USER password PASS
.Ed
.
.Pp
This configuration should now work just fine:
.
.Pp
.Dl $ echo text | \*(uA -vv -AXandeX -s Subject user@exam.ple
.\" }}}
.
.\" .Ss "Signed and encrypted messages with S/MIME" {{{
.Ss "Signed and encrypted messages with S/MIME"
.
\*(OP S/MIME provides two central mechanisms:
message signing and message encryption.
A signed message contains some data in addition to the regular text.
The data can be used to verify that the message was sent using a valid
certificate, that the sender's address in the message header matches
that in the certificate, and that the message text has not been altered.
Signing a message does not change its regular text;
it can be read regardless of whether the recipient's software is able to
handle S/MIME.
.
.Pp
It is thus usually possible to sign all outgoing messages if so desired.
Encryption, in contrast, makes the message text invisible for all people
except those who have access to the secret decryption key.
To encrypt a message, the specific recipient's public encryption key
must be known.
It is therefore not possible to send encrypted mail to people unless their
key has been retrieved from either previous communication or public key
directories.
A message should always be signed before it is encrypted.
Otherwise, it is still possible that the encrypted message text is
altered.
.
.Pp
A central concept to S/MIME is that of the certification authority (CA).
A CA is a trusted institution that issues certificates.
For each of these certificates it can be verified that it really
originates from the CA, provided that the CA's own certificate is
previously known.
A set of CA certificates is usually delivered with OpenSSL and installed
on your system.
If you trust the source of your OpenSSL software installation,
this offers reasonable security for S/MIME on the Internet.
Otherwise set
.Va smime-no-default-ca
to avoid using the default certificate and point
.Va smime-ca-file
and/or
.Va smime-ca-dir
to a trusted pool of certificates.
In general, a certificate cannot be more secure than the method its CA
certificate has been retrieved with.
.
.Pp
The first thing you need for participating in S/MIME message exchange is
your personal certificate, including a private key.
The certificate contains public information, in particular your name and
your email address(es), and the public key that is used by others to
encrypt messages for you,
and to verify signed messages they supposedly received from you.
The certificate is included in each signed message you send.
The private key must be kept secret.
It is used to decrypt messages that were previously encrypted with your
public key, and to sign messages.
.
.Pp
For personal use it is recommended that you get a S/MIME certificate
from one of the major CAs on the Internet using your WWW browser.
Many CAs offer such certificates for free.
There is also
.Lk https://www.CAcert.org
which issues client and server certificates to members of their
community for free; their root certificate
.Pf ( Lk https://\:www.cacert.org/\:certs/\:root.crt )
is often not in the default set of trusted CA root certificates, though,
which means you will have to download their root certificate separately
and ensure it is part of our S/MIME certificate validation chain by
including it in
.Va smime-ca-dir
or as a vivid member of the
.Va smime-ca-file .
But let us take a step-by-step tour on how to setup S/MIME with
a certificate from CAcert.org despite this situation!
.
.Pp
First of all you will have to become a member of the CAcert.org
community, simply by registrating yourself via the web interface.
Once you are, create and verify all email addresses you want to be able
to create signed and encrypted messages for/with using the corresponding
entries of the web interface.
Now ready to create S/MIME certificates, so let us create a new
.Dq client certificate ,
ensure to include all email addresses that should be covered by the
certificate in the following web form, and also to use your name as the
.Dq common name .
.
.Pp
Create a private key and a certificate request on your local computer
(please see the manual pages of the used commands for more in-depth
knowledge on what the used arguments etc. do):
.
.Pp
.Dl openssl req -nodes -newkey rsa:4096 -keyout key.pem -out creq.pem
.
.Pp
Afterwards copy-and-paste the content of
.Dq creq.pem
into the certificate-request (CSR) field of the web form on the
CAcert.org website (you may need to unfold some
.Dq advanced options
to see the corresponding text field).
This last step will ensure that your private key (which never left your
box) and the certificate belong together (through the public key that
will find its way into the certificate via the certificate-request).
You are now ready and can create your CAcert certified certificate.
Download and store or copy-and-paste it as
.Dq pub.crt .
.
.Pp
Yay.
In order to use your new S/MIME setup you will have to create
a combined private key/public key (certificate) file:
.
.Pp
.Dl cat key.pem pub.crt > ME@HERE.com.paired
.
.Pp
This is the file \*(UA will work with.
If you have created your private key with a passphrase then \*(UA will
ask you for it whenever a message is signed or decrypted.
Set the following variables to henceforth use S/MIME (setting
.Va smime-ca-file
is of interest for verification only):
.
.Bd -literal -offset indent
set smime-ca-file=ALL-TRUSTED-ROOT-CERTS-HERE \e
  smime-sign-cert=ME@HERE.com.paired \e
  smime-sign-message-digest=SHA256 \e
  smime-sign
.Ed
.
.Pp
From each signed message you send, the recipient can fetch your
certificate and use it to send encrypted mail back to you.
Accordingly if somebody sends you a signed message, you can do the same,
and use the
.Ic verify
command to check the validity of the certificate.
.
.Pp
Variables of interest for S/MIME signing:
.Va smime-ca-dir ,
.Va smime-ca-file ,
.Va smime-crl-dir ,
.Va smime-crl-file ,
.Va smime-no-default-ca ,
.Va smime-sign ,
.Va smime-sign-cert ,
.Va smime-sign-include-certs
and
.Va smime-sign-message-digest .
.
.Pp
After it has been verified save the certificate via
.Ic certsave
and tell \*(UA that it should use it for encryption for further
communication with that somebody:
.
.Bd -literal -offset indent
certsave FILENAME
set smime-encrypt-USER@HOST=FILENAME \e
    smime-cipher-USER@HOST=AES256
.Ed
.
.Pp
Additional variables of interest for S/MIME en- and decryption:
.Va smime-cipher
and
.Va smime-encrypt-USER@HOST .
.
.Pp
You should carefully consider if you prefer to store encrypted messages
in decrypted form.
If you do, anybody who has access to your mail folders can read them,
but if you do not, you might be unable to read them yourself later if
you happen to lose your private key.
The
.Ic decrypt
command saves messages in decrypted form, while the
.Ic save , copy ,
and
.Ic move
commands leave them encrypted.
.
.Pp
Note that neither S/MIME signing nor encryption applies to message
subjects or other header fields yet.
Thus they may not contain sensitive information for encrypted messages,
and cannot be trusted even if the message content has been verified.
When sending signed messages,
it is recommended to repeat any important header information in the
message text.
.\" }}}
.
.\" .Ss "Using CRLs with S/MIME or SSL/TLS" {{{
.Ss "Using CRLs with S/MIME or SSL/TLS"
.
\*(OP Certification authorities (CAs) issue certificate revocation
lists (CRLs) on a regular basis.
These lists contain the serial numbers of certificates that have been
declared invalid after they have been issued.
Such usually happens because the private key for the certificate has
been compromised,
because the owner of the certificate has left the organization that is
mentioned in the certificate, etc.
To seriously use S/MIME or SSL/TLS verification,
an up-to-date CRL is required for each trusted CA.
There is otherwise no method to distinguish between valid and
invalidated certificates.
\*(UA currently offers no mechanism to fetch CRLs, nor to access them on
the Internet, so you have to retrieve them by some external mechanism.
.
.Pp
\*(UA accepts CRLs in PEM format only;
CRLs in DER format must be converted, like, e.\|g.:
.
.Pp
.Dl $ openssl crl \-inform DER \-in crl.der \-out crl.pem
.
.Pp
To tell \*(UA about the CRLs, a directory that contains all CRL files
(and no other files) must be created.
The
.Va smime-crl-dir
or
.Va ssl-crl-dir
variables, respectively, must then be set to point to that directory.
After that, \*(UA requires a CRL to be present for each CA that is used
to verify a certificate.
.\" }}}
.
.\" .Ss "Handling spam" {{{
.Ss "Handling spam"
.
\*(OP \*(UA can make use of several spam interfaces for the purpose of
identification of, and, in general, dealing with spam messages.
A precondition of most commands in order to function is that the
.Va spam-interface
variable is set to one of the supported interfaces.
Once messages have been identified as spam their (volatile)
.Ql is-spam
state can be prompted: the
.Ql Ar :s
and
.Ql Ar :S
message specifications will address respective messages and their
.Va attrlist
entries will be used when displaying the
.Va headline
in the header display.
.
.Bl -bullet
.It
.Ic spamrate
rates the given messages and sets their
.Ql is-spam
flag accordingly.
If the spam interface offers spam scores those can also be displayed in
the header display by including the
.Ql %$
format in the
.Va headline
variable.
.It
.Ic spamham ,
.Ic spamspam
and
.Ic spamforget
will interact with the Bayesian filter of the chosen interface and learn
the given messages as
.Dq ham
or
.Dq spam ,
respectively; the last command can be used to cause
.Dq unlearning
of messages; it adheres to their current
.Ql is-spam
state and thus reverts previous teachings.
.It
.Ic spamclear
and
.Ic spamset
will simply set and clear, respectively, the mentioned volatile
.Ql is-spam
message flag, without any interface interaction.
.El
.
.Pp
The
.Xr spamassassin 1
based
.Va spam-interface
.Ql spamc
requires a running instance of the
.Xr spamd 1
server in order to function, started with the option
.Fl -allow-tell
shall Bayesian filter learning be possible.
.
.Bd -literal -offset indent
$ spamd -i localhost:2142 -i /tmp/.spamsock -d [-L] [-l]
$ spamd --listen=localhost:2142 --listen=/tmp/.spamsock \e
    --daemonize [--local] [--allow-tell]
.Ed
.
.Pp
Thereafter \*(UA can make use of these interfaces:
.
.Bd -literal -offset indent
$ \*(uA -Sspam-interface=spamc -Sspam-maxsize=500000 \e
    -Sspamc-command=/usr/local/bin/spamc \e
    -Sspamc-arguments="-U /tmp/.spamsock" -Sspamc-user=
or
$ \*(uA -Sspam-interface=spamc -Sspam-maxsize=500000 \e
    -Sspamc-command=/usr/local/bin/spamc \e
    -Sspamc-arguments="-d localhost -p 2142" -Sspamc-user=
.Ed
.
.Pp
Using the generic filter approach allows usage of programs like
.Xr bogofilter 1 .
Here is an example, requiring it to be accessible via
.Ev PATH :
.
.Bd -literal -offset indent
$ \*(uA -Sspam-interface=filter -Sspam-maxsize=500000 \e
    -Sspamfilter-ham="bogofilter -n" \e
    -Sspamfilter-noham="bogofilter -N" \e
    -Sspamfilter-nospam="bogofilter -S" \e
    -Sspamfilter-rate="bogofilter -TTu 2>/dev/null" \e
    -Sspamfilter-spam="bogofilter -s" \e
    -Sspamfilter-rate-scanscore="1;^(.+)$"
.Ed
.
.Pp
Because messages must exist on local storage in order to be scored (or
used for Bayesian filter training), it is possibly a good idea to
perform the local spam check last:
.
.Bd -literal -offset indent
define spamdelhook {
  # Server side DCC
  spamset (header x-dcc-brand-metrics "bulk")
  # Server-side spamassassin(1)
  spamset (header x-spam-flag "YES")
  del :s # TODO we HAVE to be able to do `spamrate :u ! :sS'
  move :S +maybe-spam
  spamrate :u
  del :s
  move :S +maybe-spam
}
set folder-hook-FOLDER=spamdelhook
.Ed
.
.Pp
See also the documentation for the variables
.Va spam-interface , spam-maxsize ,
.Va spamc-command , spamc-arguments , spamc-user ,
.Va spamfilter-ham , spamfilter-noham , spamfilter-nospam , \
  spamfilter-rate
and
.Va spamfilter-rate-scanscore .
.\" }}}
.\" }}} (Examples)
.
.
.\" .Sh "FAQ" {{{
.Sh "FAQ"
.
In general it is a good idea to turn on
.Va debug
.Pf ( Fl d )
and / or
.Va verbose
.Pf ( Fl v ,
twice) if something does not work well.
Very often a diagnostic message can be produced that leads to the
problems' solution.
.
.\" .Ss "\*(UA shortly hangs on startup" {{{
.Ss "\*(UA shortly hangs on startup"
.
This can have two reasons, one is the necessity to wait for a file lock
and cannot be helped, the other being that \*(UA calls the function
.Xr uname 2
in order to query the nodename of the box (sometimes the real one is
needed instead of the one represented by the internal variable
.Va hostname ) .
You may have varying success by ensuring that the real hostname and
.Ql localhost
have entries in
.Pa /etc/hosts ,
or, more generally, that the name service is properly setup \(en
and does
.Xr hostname 1
return what you would expect?
Does this local hostname has a domain suffix?
RFC 6762 standardized the link-local top-level domain
.Ql .local .
.\" }}}
.
.\" .Ss "\*(UA exits quick, and output is cleared away" {{{
.Ss "\*(UA exits quick, and output is cleared away"
.
When this happens even with
.Va emptystart
set, then this most likely indicates a problem with the creation of
so-called dotlock files: setting
.Va dotlock-ignore-error
should overcome this situation.
This only avoids symptoms, it does not address the problem, though.
Since the output is cleared away \*(UA has support for
.Sx "On terminal control and line editor" ,
and switches to the
.Dq ca-mode ,
which causes the output clearance: by doing
.Ql set termcap='smcup='
this mode can be suppressed, and by setting
.Va verbose
(twice) the actual problem should be reported.
.\" }}}
.
.\" .Ss "I cannot login to Google mail aka GMail" {{{
.Ss "I cannot login to Google mail aka GMail"
.
Since 2014 some free service providers classify programs as
.Dq less secure
unless they use a special authentification method (OAuth 2.0) which
was not standardized for non-HTTP protocol authentication token query
until August 2015 (RFC 7628).
.
.Pp
Different to Kerberos / GSSAPI, which is developed since the mid of the
1980s, where a user can easily create a local authentication ticket for
her- and himself with the locally installed
.Xr kinit 1
program, that protocol has no such local part but instead requires
a world-wide-web query to create or fetch a token; since there is no
local cache this query has to be performed whenever \*(UA is invoked
from the command line (in interactive sessions situation may differ).
.
.Pp
\*(UA does not support OAuth.
Because of this it is necessary to declare \*(UA a
.Dq less secure app
(on the providers account web page) in order to read and send mail.
However, it also seems possible to take the following steps instead:
.
.Pp
.Bl -enum -compact
.It
give the provider the number of a mobile phone,
.It
enable
.Dq 2-Step Verification ,
.It
create an application specific password (16 characters), and
.It
use that special password instead of your real Google account password in
\*(UA (for more on that see the section
.Sx "On URL syntax and credential lookup" ) .
.El
.\" }}}
.
.\" .Ss "Not \(dqdefunctional\(dq, but the editor key does not work" {{{
.Ss "Not \(dqdefunctional\(dq, but the editor key does not work"
.
It can happen that the terminal library (see
.Sx "On terminal control and line editor",
.Ic bind ,
.Va termcap )
reports different codes than the terminal really sends, in which case
\*(UA will tell that a key binding is functional, but will not be able to
recognize it because the received data does not match anything expected.
The verbose listing of
.Ic bind Ns
ings will show the byte sequences that are expected.
.
.Pp
To overcome the situation, use, e.g., the program
.Xr cat 1 ,
in conjunction with the
.Fl \&\&v
flag if available, to see the byte sequences which are actually produced
by keypresses, and use the variable
.Va termcap
to make \*(UA aware of them.
E.g., the terminal this is typed on produces some false sequences, here
an example showing the shifted home key:
.
.Bd -literal -offset indent
? set verbose
? bind*
# 1B 5B=[ 31=1 3B=; 32=2 48=H
  bind base :kHOM z0
? x
$ cat -v
^[[H
? \*(uA -v -Stermcap='kHOM=\eE[H'
? bind*
# 1B 5B=[ 48=H
  bind base :kHOM z0
.Ed
.\" }}}
.\" }}}
.
.
.\" .Sh "SEE ALSO" {{{
.Sh "SEE ALSO"
.
.Xr bogofilter 1 ,
.Xr gpg 1 ,
.Xr more 1 ,
.Xr newaliases 1 ,
.Xr openssl 1 ,
.Xr sendmail 1 ,
.Xr sh 1 ,
.Xr spamassassin 1 ,
.Xr iconv 3 ,
.Xr setlocale 3 ,
.Xr aliases 5 ,
.Xr termcap 5 ,
.Xr terminfo 5 ,
.Xr locale 7 ,
.Xr mailaddr 7 ,
.Xr re_format 7 ,
.Xr mailwrapper 8 ,
.Xr sendmail 8
.\" }}}
.
.
.\" .Sh HISTORY {{{
.Sh HISTORY
.
M. Douglas McIlroy writes in his article
.Dq A Research UNIX Reader: Annotated Excerpts \
from the Programmer's Manual, 1971-1986
a
.Xr mail 1
command already appeared in First Edition
.Ux
in 1971:
.
.Bd -ragged -offset indent
Electronic mail was there from the start.
Never satisfied with its exact behavior, everybody touched it at one
time or another: to assure the safety of simultaneous access, to improve
privacy, to survive crashes, to exploit uucp, to screen out foreign
freeloaders, or whatever.
Not until v7 did the interface change (Thompson).
Later, as mail became global in its reach, Dave Presotto took charge and
brought order to communications with a grab-bag of external networks
(v8).
.Ed
.
.Pp
.Bx
Mail was written in 1978 by Kurt Shoens and developed as part of the
.Bx
.Ux
distribution until 1995.
Mail has then seen further development in open source
.Bx
variants, noticeably by Christos Zoulas in
.Pf Net Bx .
Basing upon this Nail, later Heirloom Mailx, was developed by Gunnar
Ritter in the years 2000 until 2008.
Since 2012 S-nail is maintained by Steffen (Daode) Nurpmeso.
This man page is derived from
.Dq The Mail Reference Manual
that was originally written by Kurt Shoens.
.\" }}}
.
.
.Sh AUTHORS
.
.An "Kurt Shoens" ,
.An "Edward Wang" ,
.An "Keith Bostic" ,
.An "Christos Zoulas" ,
.An "Gunnar Ritter" ,
.An "Steffen Nurpmeso" Aq Mt s-nail-users@lists.sourceforge.net
(later
.Mt s-mailx@sdaoden.eu ) .
.
.
.\" .Sh CAVEATS {{{
.Sh CAVEATS
.
\*(ID Interrupting an operation via
.Dv \&\&SIGINT
aka
.Ql control-C
is often problematic: many library functions cannot deal with the
.Fn siglongjmp 3
that this software (still) performs.
.
.Pp
The SMTP and POP3 protocol support of \*(UA is very basic.
Also, if it fails to contact its upstream SMTP server, it will not make
further attempts to transfer the message at a later time (setting
.Va save
and
.Va sendwait
may be useful).
If this is a concern, it might be better to set up a local SMTP server
that is capable of message queuing.
.\" }}}
.
.
.Sh BUGS
.
After deleting some message of a POP3 mailbox the header summary falsely
claims that there are no messages to display, you need to perform
a scroll or dot movement to restore proper state.
.
In threaded display a power user may encounter crashes very
occasionally (this is may and very).
.
The file
.Pa TODO
in the source repository lists future directions.
.\" s-ts-mode
