I n s t a l l i n g  S - n a i l
================================

1.  Compilation
1.1 How can i enable debugging?
2.  Special notes for the latest release
3.  Current codebase state

1. Compilation
--------------

System specific notes can be found in the next section.
Any (optional) feature is adjustable and documented in `make.rc'.
Adjustments may also take place, and are usually done, from the command
line, overriding those made in `make.rc' (if any):

  $ [make &&] make install
  $ make uninstall          # Won't remove the system wide startup file!
  $ make distclean          # *Completely* cleanup working directory

With adjustments:

  $ make WANT_IMAP=no WANT_SMTP=require install
  $ make WANT_NCL=false PREFIX=/some/nasty/prefix install

There are also some predefined restricted configuration sets available,
which take precedence over anything else:

. CONFIG=MINIMAL
  This is the most plain mailx(1)-alike mode, but with MIME support and
  (if available) character set conversion and regular expressions
  builtin (here mostly ment for mailing list matching).  That's it.

. CONFIG=MEDIUM
  Like MINIMAL, but with documentation strings, the builtin command line
  editor with history support (if possible), basic colour support and
  IDNA addresses.  Also adds in generic spam filter support.

  Possibly what people want who need nothing but a MIME-capable mailx(1)
  and don't regret improved usability for the rare interactive use
  occasions.

. CONFIG=NETSEND
  WANT_SMTP as a requirement.
  NETSEND also tries to add SSL/TLS, GSSAPI, .netrc file parsing as well
  as external password *agent-lookup* on top of MEDIUM, on the other
  hand spam filter support is removed.

  Sending messages directly to the mail provider via the SMTP protocol,
  instead of requiring a local mail-transfer-agent (MTA) who does.

. CONFIG=MAXIMAL
  Anything on (though none of which as a requirement).

  S-nail(1) gains mail fetching capabilities and heads more toward being
  a full-featured mail-user-agent (MUA) with this.

E.g.:

  $ make CONFIG=MINIMAL DESTDIR=xtest install

would create a `s-nail' binary and install a `s-nail' manual etc.
under the prefix `/usr/local' but rooted under [./]`xtest', i.e., the
binary would be installed as `[./]xtest/usr/local/bin/s-nail'.
The following make(1) target exists:

. all         Create / check and update configuration, build.
. install     Create / check and update configuration, build, install.
. clean       Remove anything which can be rebuild.
. distclean   Remove anything which can be rebuild or reconfigured.
. uninstall   Uninstall (if configured).

. config      Only create or check and update the configuration.
. build       Only build (using the existing configuration).
. test        Run ./cc-test.sh in --check-only mode on the built binary.
. packager-install
              Only install using the built files of the existing
              configuration.  It is possible to overwrite DESTDIR= when
              using this target nonetheless (a following `uninstall'
              won't know about that overwritten value, however).

Setting the make(1) variable `VERBOSE' to an arbitrary value, as in
"$ make VERBOSE=xy install", will change the output of the build,
install etc. processes to a different, more verbose one.
If some libraries are missing that you know are installed on your
system, or if other errors occur due to missing files but which you know
exist, please ensure that the environment variable `C_INCLUDE_PATH'
includes the necessary `include/' paths and the environment variable
`LD_LIBRARY_PATH' includes the necessary `lib/'rary paths.

The S-nail make system will inspect these two environment variables and
*automatically* convert them to cc(1) (c99(1)) -I and -L options (since
these environment variables are, different to the command line options,
not part of the POSIX standard).
To set these environment variables, the following can be done in
a Bourne/Korn/POSIX compatible shell:

  $ C_INCLUDE_PATH="${C_INCLUDE_PATH}:/usr/local/include"
  $ LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib"
  $ export C_INCLUDE_PATH LD_LIBRARY_PATH
  $ make install

The S-nail make system will also automatically integrate pkgsrc(7) paths
into this mechanism.  pkgsrc(7) is used to handle building (compilation),
installation and removal of software packages on a lot of operating
systems, including all BSD systems, Linux, Solaris ...
And if all else fails you can also pass in prefilled $LIBS and $INCS:

  $ INCS=-I/mypath/lib LIBS=-l/mypath/iconv make install

1.1 How can i enable debugging?
-------------------------------

Please ensure WANT_DEBUG=yes is enabled during compilation, as in

  $ make CONFIG=MAXIMAL WANT_DEBUG=yes

If WANT_AUTOCC is enabled then the build system should automatically
adjust the compiler flags accordingly, please see `make.rc' for more.
There is also a `devel'opment target which does most of this by itself:

  $ make devel

WANT_DEBUG (`devel') will enable memory bound debug canaries and
Not-Yet-Dead function graph listings etc.  Whereas the latter will try
to write its listing into a file named after your favourite MUA in your
$TMPDIR, only falling back to STDERR shall such a file already exist,
the debug facilities in general make their appearance on the standard
error channel; because this can be a quite long output, then, it is
possibly a good idea to redirect it to a file:

  $ s-nail -dvv 2> error.log

Should you really discover any problems with S-nail it would be very
useful for development if you would contact s-nail-users@!
Thank you!

2. Special notes for the latest release
---------------------------------------

S-nail(1) has been or is used regulary on these systems (`uname -srm').
It is assumed that S-nail(1) should work practically everywhere.
Unless otherwise noted the following applies to saying "$ make".
(But on the developer branch without IMAP.  IMAP won't get any better
until it will be readded after v15.0.)

. All systems:
  - I've turned off -Wstrict-overflow warnings unless WANT_DEVEL is
    defined (talking about WANT_AUTOCC=yes here).  With gcc 5.1 the
    number of warnings exploded (for no user benefit).
  - You may see warnings on unused returns from write(2), ftruncate(2)
    and a few other I/O functions.  These will vanish after the large
    I/O and MIME rewrite that comes next.  These mostly refer to debug
    dumping, truncating a(n open) file to zero size and freopen(3)ing
    one of the standard channels.  I refrained from adding abort(3)
    calls as return value checks.

. All 32-bit systems:
  - There _may_ be warnings about format strings, like, e.g.,
      auxlily.c:1610:10: warning: format '%lu' expects type 'long
      unsigned int', but argument 3 has type 'size_t'
    The S-nail codebase is ISO C89, so we have no %z printf(3) format.
    However, `nail.h' tries hard to detect the real type size and
    defines the `PRI[du]Z' macros which end up with the correct size,
    which is also compile-time asserted via PRIxZ_FMT_CTA() in main.c.

    You can completely overcome this situation by forcing ISO C99 mode
    when compiling, e.g., with gcc(1) and clang(1): if you use
    WANT_AUTOCC then also pass "ADDCFLAGS=-std=c99", otherwise ensure
    -std=c99 is set in your $CFLAGS.

. ArchLinux <https://www.archlinux.org/>
  Linux 3.17.6-1-ARCH x86_64
  - gcc (GCC) 4.9.2 20150304 (prerelease) [gcc-4.9.2-4-x86_64]
    + I think faulty message on longjmp() clobbering of a const variable?
  - gcc 5.1.0 [gcc 5.1.0-1 from testing]
    + False warning on "'gl.gl_group' may be used uninitialized".
      I had explicitly committed "Clarify condition (hopefully fix
      -Wmaybe-uninit, too), 2015-04-28" on [topic/gcc51], but it didn't
      help.
  - clang version 3.6.0 (tags/RELEASE_360/final) [clang-3.6.0-4]
    + :)

. Void Linux <http://www.voidlinux.eu/>
  Void GNU/Linux 3.19.3_1 i686
  - gcc (GCC) 4.9.2 [gcc-4.9.2_2]
    + Faulty message on longjmp() clobbering (of a const variable).

. CRUX Linux <http://www.crux.nu/>
  CRUX 3.1 (rc1) Linux 3.12.17 x86_64.
  - gcc (CRUX) 4.8.2.
    + :)

. FreeBSD <https://www.freebsd.org/>
  FreeBSD 10.1-RELEASE amd64
  - FreeBSD clang version 3.4.1 (tags/RELEASE_34/dot1-final 208032) 20140512
    + :)

. OpenBSD <http://www.openbsd.org/>
  OpenBSD 5.7-current (GENERIC) #753: Thu Mar 26 14:56:52 MDT 2015
  - gcc (GCC) 4.2.1 20070719.
    + Faulty message on longjmp() clobbering (of a const variable).

. DragonFly BSD <https://www.dragonflybsd.org/>
  DragonFly 4.0-RELEASE x86_64 [4.0.5]
  - gcc 4.7.4 [DragonFly] Release/2014-06-12
    + I will never get iconv(3) right for DragonFly it seems.

. NetBSD <https://www.netbsd.org/>
  + Show work.

. Mac OS X <https://www.apple.com/>
  (Snow Leopard) Darwin 10.8.0 i386
  + Worked a thousand hours.
  - gcc-mp-4.8 (MacPorts gcc48 4.8.2_0) 4.8.2.
  - clang version 3.4 (branches/release_34 197314)
    Target: x86_64-apple-darwin10.8.0
    Thread model: posix.
  - i686-apple-darwin10-gcc-4.2.1 (GCC) 4.2.1 (Apple Inc. build 5666)
    (dot 3).
  - Apple clang version 1.7 (tags/Apple/clang-77) (based on LLVM
    2.9svn).

. UnixWare 7.1.4.
  + Note: it is no longer possible to use the `install' rule -- mk-mk.in
    uses shell functions to ease the task of directory creation etc.
    (especially useful due to VERBOSE=), and that won't work due to bugs
    (in the system make(1) program i presume).
  + You'll see some harmless and ignorable warnings.

3. Current codebase state
-------------------------

Since i've forked Heirloom mailx(1) (the former "nail" for real) as
S-nail(1) on 2012-09-18 i make my way through the codebase, and i'm
getting more and more used to it as time goes by -- of course, i'm
thinking object and thus this codebase and i are antipodes.
I'll hope to be able to release S-nail v20 on 2018-03-25, the 40th
anniversary of Berkeley Mail, as a good one.  Also see `TODO'.

For S-nail, v15.0 (not before 2017) is dedicated to a Send- and
MIME-layer rewrite that will bring the possibility to access each
message part individually. Because the Berkeley codebase and its nail
fork have design flaws in respect to mailbox handling and non-local code
jumps (due to / and signals), whereas the (MIME capable) NetBSD and
OpenBSD forks have instead addressed this problem, more or less
complete, in one or the other way, v15.0 will also have to address
signal handling, because only like that we have the possibility to ever
reach a clean state from which we can actually think about re-extending
this MUA. It is not unlikely that IMAP support will be dropped
temporarily, leaving only the plain mailx(1) plus Maildir, SMTP and POP3
functionality. It has to move under the headline reduce to the max.

# s-ts-mode
