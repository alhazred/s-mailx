I n s t a l l i n g  S - n a i l
================================

Compilation
-----------

Configurable compile-time options are defined, documented and adjustable
in `user.conf'; the adjustment may also take place from the command line.

  $ [make &&] make install # ("make install" alone is also sufficient)
  $ make uninstall         # (Will not remove the example configuration)
  $ make distclean         # *Completely* cleanup working directory

With adjustments:

  $ make WANT_IMAP=0 install
  $ make WANT_LINE_EDITOR=0 PREFIX=/some/nasty/prefix install

There are also some predefined restricted configuration sets available,
which overwrite the `user.conf' settings, if used:

. CONFIG=MINIMAL  little is left but some air to breathe; no internet
                  connectivity, no internationalized domain names,
                  no command line editor, no documentation strings.

. CONFIG=NETSEND  WANT_SMTP and WANT_SSL settings are enabled,
                  internationalized domain names will be supported if
                  the necessary libraries are available, the builtin
                  command line editor will be used if possible,
                  otherwise identical to MINIMAL.

E.g.:

  $ make CONFIG=MINIMAL DESTDIR=xtest SID=mini- install

would create a `mini-nail' binary and install a `mini-nail' manual etc.
under the prefix /usr/local but rooted under [./]xtest, i.e., the binary
would be installed as `[./]xtest/usr/local/bin/mini-nail'.  Note that
for `make uninstall' the *exact* command line should be repeated. XXX

If some libraries are missing that you know are installed on your
system, or if other errors occur due to missing files but which you know
exist, please ensure that the environment variable C_INCLUDE_PATH
includes the necessary include/ paths and the environment variable
LD_LIBRARY_PATH includes the necessary lib/rary paths.

The S-nail make system will inspect these two environment variables and
*automatically* convert them to cc(1) (c99(1)) -I and -L options (since
these environment variables are, different to the command line options,
not part of the POSIX standard).
To set these environment variables, the following can be done in
a Bourne/Korn/POSIX compatible shell:

  $ C_INCLUDE_PATH=${C_INCLUDE_PATH}:/usr/local/include
  $ LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib
  $ export C_INCLUDE_PATH LD_LIBRARY_PATH
  $ make install

The S-nail make system will also automatically integrate pkgsrc(7) paths
into this mechanism.  pkgsrc(7) is used to handle building (compilation),
installation and removal of software packages on a lot of operating
systems, including all BSD systems, Linux, Solaris ...

Notes for S-nail(1) v14.*
-------------------------

S-nail(1) is known to be driven withouth errors by the `./cc-test.sh'
shell script, with the extended CFLAGS and WARN variables uncommented in
the Makefile, on the following operating systems:

o Mac OS X Snow Leopard (x86_64).
  gcc(1) and clang(1).

o DragonFly BSD v3.4.1-RELEASE.
  gcc 4.7.2 [DragonFly] Release/2012-09-2.
  (*All* optional features turn to green on this one by default.)

o FreeBSD 10.0 (amd64).
  clang version 3.3 (trunk 178860) 20130405.

o NetBSD 6.99.19 (amd64).
  gcc (NetBSD nb1 20120916) 4.5.4.

o OpenBSD 5.3 (i386).

o Slackware 14 3.2.29-smp (i386).
  gcc (GCC) 4.7.1.
  clang version 3.0 (tags/RELEASE_30/final).

o UnixWare 7.1.4.
  You need to pass CFLAGS='-v -O' to the make(1) run.
  (The -v compiler option gives some harmless warnings.)

Program features yet to be overhauled
-------------------------------------

Since i've forked Heirloom mailx(1) (for real) as S-nail(1) on
2012-09-18 i make my way through the codebase, but have not yet taken
a look (rather: at all) into the following modules/parts:

  List view/threading, Maildir, SSL, IMAP, POP3, SMTP, GSSAPI, Caching

These will remain features of S-nail(1) and they will be looked at, and
of course i will fix bugs when i notice them, but they are not yet part
of the overhauled "S-nail core" (though SMTP and POP are in daily use,
and IMAP is slowly coming along).  All that'll take *years*, though.
You may also want to have a look at the file TODO.
