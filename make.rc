#@ make.rc defined the set of features and values used.
#@ Reading INSTALL first is beneficial.
#@
#@ - Choosing a predefined CONFIG= disallows further option fine-tuning.
#@   (With some exceptions, e.g., OPT_DEBUG.)
#@
#@ - Values have a VAL_ prefix, and are assigned strings, for example
#@       VAL_PREFIX="/usr/local"
#@
#@   Values which are only used during configuration, building, and / or
#@   installation have no prefix, e.g., DESTDIR, VERBOSE, awk, sed;
#@
#@   Some values exist which offer "multiple choice", e.g., VAL_RANDOM
#@   (without accompanying feature option) and VAL_IDNA (with OPT_IDNA).
#@   This is used if different implementations exist, and can then be
#@   used to choose the desired one(s).
#@   The value is interpreted as a whitespace separated list of strings,
#@   like "idn2 idn idnkit", case is ignored, order is important.
#@   The special strings "all" and "any" as well as the empty value
#@   are wildcard matches; if any entry in the list is a wildcard match,
#@   the rest of the list is ignored.
#@   The special string "error" will abort configuration once its list
#@   position is reached; this is only supported if documented, and not
#@   with an accompanying OPT_ (which then offers "require", as below).
#@
#@ - Features / options have an OPT_ prefix and usually need to be
#@   assigned a boolean value, as in OPT_IDNA=yes.  Booleans are 1/0,
#@   y/n, true/false, yes/no and on/off (case doesn't matter).
#@
#@   The value "require" is also a true boolean, but will in addition
#@   cause configuration to fail if the requested condition cannot be
#@   satisfied.  This functionality is available where documented.
#@
#@ - Specifying settings on the command line will take precedence over
#@   the variables in here (correctly triggering build updates as
#@   necessary, too).
#@
#@ - This file is parsed by the shell: it is in sh(1), not in make(1)
#@   syntax.  Evaluation occurs *after* it has been read, so command
#@   line overwrites take effect.  To use multiline values, escape the
#@   newlines on all lines but the last with a reverse solidus (back-
#@   slash), as in "LINE \".
#@   To embed a shell variable unexpanded, use two: "XY=\\${HOME}".
#@   The parsing is sequential top-to-bottom (nonetheless), so that
#@   shell snippets in a value can refer only to stuff yet defined.
#@
#@ - You may NOT comment out anything in here -- if you want to disable
#@   a feature, set it to a false boolean.

## IDENTITIES, PATHS AND PROGRAMS ##

# Contact info (*contact-mail* and *contact-web*, respectively).
VAL_CONTACT_MAIL=s-mailx@lists.sdaoden.eu
VAL_CONTACT_WEB=https://www.sdaoden.eu/code.html

# The user ID our small privilege-separated helper program will be
# SETUID to, shall it be included ($OPT_DOTLOCK).
# Installation will then require the chown(1) program (as below) and
# sufficient privileges to perform a SETUID to this user ID.
VAL_PRIVSEP_USER=root

# General prefix where S-nail should be installed.
VAL_PREFIX=/usr/local

# Fine tune individual locations, normally under $VAL_PREFIX.
# . the place of the S-nail program.
VAL_BINDIR="${VAL_PREFIX}/bin"
# . the place of the privilege-separated helper program, the name
#   of which is [$VAL_SID$VAL_MAILX]-privsep (see below for $VAL_SID &
#   $VAL_MAILX).
#   (Only with $OPT_DOTLOCK.)
VAL_LIBEXECDIR="${VAL_PREFIX}/libexec"
# . of the manual.
VAL_MANDIR="${VAL_PREFIX}/share/man"
# . of the exemplary resource file.
VAL_SYSCONFDIR="${VAL_PREFIX}/etc"

# The variable $DESTDIR is prepended to all the paths from above at
# installation time; this feature can be used for, e.g., package
# building: if $VAL_PREFIX is "/usr/local", but $DESTDIR is set to "here",
# then S-nail will still think its $VAL_PREFIX is "/usr/local" whereas the
# build system will instead use "here/usr/local".
# NOTE: it cannot be set in here, but must be given on the command line
# when invoking the "install" make(1) (directly or indirectly).
# (That is, if you uncomment it, it'll be update-tracked...)
#DESTDIR=

# Where the local mail system stores user $MAIL files.
VAL_MAIL=`\
   if [ -d /var/spool/mail ]; then \
      echo /var/spool/mail;\
   else \
      echo /var/mail;\
   fi`

# Path to the local MTA (Mail-Transfer-Agent).
VAL_MTA=`\
   if [ -x /usr/bin/sendmail ]; then \
      echo /usr/bin/sendmail;\
   elif [ -x /usr/lib/sendmail ]; then \
      echo /usr/lib/sendmail;\
   else \
      echo /usr/sbin/sendmail;\
   fi`

# Today a lot of systems no longer use sendmail(1), but a different MTA.
# To ensure compatibility with sendmail(1), a system called
# mailwrapper(8) is often used, which selects the required service by
# looking at the name by which the program actually has been invoked.
# This variable can be used to adjust this name as necessary.
VAL_MTA_ARGV0=sendmail

# Default $SHELL (sh(1) path).
# Sometimes we simply invoke a command directly via execlp(2) instead of
# indirectly through *SHELL* -- in these cases execlp(2) may fallback to
# it's own built-in sh(1) path.
VAL_SHELL=/bin/sh

# Some more default fallback values, some of which are standardized
# and (thus)/or documented in the manual (changes not reflected there!).
# Note that default paths are often not (shell) quoted when displayed.
VAL_DEAD_BASENAME=dead.letter
VAL_DEAD="~/${VAL_DEAD_BASENAME}"
VAL_EDITOR=ed
VAL_LISTER=ls
VAL_MAILRC=~/.mailrc
VAL_MBOX=~/mbox
VAL_NETRC=~/.netrc
VAL_PAGER=more
VAL_TMPDIR=/tmp
VAL_VISUAL=vi

# Default locations of mime.types(5).
VAL_MIME_TYPES_USR=~/.mime.types
VAL_MIME_TYPES_SYS=/etc/mime.types

# The following tools may be provided a.k.a. overwritten,
# `command -v NAME` is used to query the utility otherwise:
#  MAKE=, STRIP=, awk=, basename=, cat=, chmod=, cp=, cmp=, cksum=,
#     grep=, mkdir=, mv=, rm=, sed=, sort=, tee=, tr=, uname=
# Usually in administrator paths:
#  chown= [$OPT_DOTLOCK]
# Note that awk(1), rm(1), tr(1) and uname(1) are needed before this
# file is read, all other utilities will be checked afterwards only.
# uname(1) is in fact needed before the initial OS setup and thus no OS
# specific adjustments (e.g., $PATH) have been performed yet, but its
# use can be circumvented by setting $OS (uname -s), $OSENV (uname
# -sm) and $OSFULLSPEC (uname -a: this is not baked into the binary, it
# is only used to recognize build environment changes).
# $OS must be all-lowercase.
# Due to the evaluation order of the build system all those programs are
# usually needed, but by setting any of the variables to true(1), as in
# chown=/usr/bin/true, availability of unneeded programs can be faked.

## FEATURE SET ##

# Some operating systems only support the C/POSIX (7-bit, but eight bit
# bytes are passed through unchanged) and UTF-8 based locales, e.g.,
# Plan9, Musl based Linux variants and newer OpenBSD.  For such
# environments we can avoid a lot of tests and may enable support for
# features which would otherwise not be available.
# Note: $OS is available as normalized all-lowercase upon evaluation.
OPT_ALWAYS_UNICODE_LOCALE=`\
   if [ "${OS}" = openbsd ] || [ -f /lib/ld-musl-x86_64.so.1 ]; then \
      echo yes;\
   else \
      echo no;\
   fi`

# For cross-compilation purposes it may be useful to not actually run
# systemcall etc. tests (link and run the executable) but only to
# perform the link tests necessary to detect host environment.
OPT_CROSS_BUILD=no

# Whether package system, for example pkgsrc(7) on NetBSD and more,
# OpenCSW on SunOS/Solaris, etc., specific paths shall be automatically
# included in $C_INCLUDE_PATH and $LD_LIBRARY_PATH when seen?
OPT_USE_PKGSYS=yes

# Shall S-nail try to automatically detect a compiler and detect and
# provide a set of known-good compiler flags?  It will use $CC if this
# variable is set, otherwise a compiler is actively searched for.
# If this option is chosen additions to flags may still be provided
# by setting $EXTRA_CFLAGS and $EXTRA_LDFLAGS to whatever is desired.
# Thus: set this to false and use your normal $CC / $CFLAGS / $LDFLAGS,
# otherwise pass additional flags via $EXTRA_CFLAGS / $EXTRA_LDFLAGS:
#     $ make EXTRA_CFLAGS=-std=c99 tangerine
# Whatever you do, the configuration is fixated and updates will force
# rebuilds.  And far below in this file there is $OPT_FORCED_STACKPROT,
# too, which can be used to cause injection of stack protectors, but
# which normally happens for development and debug builds only.
# (Remember, file is parsed from top to bottom, sorry.)
OPT_AUTOCC=yes

# It is possible to compile S-nail as a "single-source", meaning that
# all source files are injected into a single compilation unit, which is
# then compiled.  This allows the compiler to perform much more
# optimizations, and also reduces the management overhead that is used
# for / needed by the linker.
OPT_AMALGAMATION=no

# Character set conversion enables reading and sending of mails in
# multiple character sets through usage of the iconv(3) library.  Please
# read the manual section "Character sets" for the complete picture.
# This should usually be enabled; it can be "require"d.
OPT_ICONV=yes

# Major switch to toggle *all* network related protocols
# (POP3,SMTP,IMAP) and related/dependent stuff (GSS-API,SSL);
# can be "require"d.
OPT_SOCKETS=yes

# If $OPT_SOCKETS: support for Secure Socket Layer (Transport Layer
# Security, TLS), i.e., encrypted socket connections; can be "require"d.
# It also automatically enables support for S/MIME message signing,
# verification, en- and decryption.
# This needs the OpenSSL (https://www.openssl.org) or LibreSSL
# (http://www.libressl.org) libraries.
OPT_SSL=yes

# If $OPT_SSL: shall S-nail (try to) use mechanisms to support more
# digest and cipher algorithms than the few that are documented?  For
# S/MIME *smime-cipher* for example this will cause
# EVP_get_cipherbyname(3) to be tried shall the (S-nail-) built-in
# knowledge not suffice to understand the user request.  Will create
# a large statically linked binary; dynamically linked the costs only
# arise once the extended lookup is actually needed (the first time).
# Some SSL libraries will always support all algorithms.
# This can be "require"d.
OPT_SSL_ALL_ALGORITHMS=yes

# If $OPT_SOCKETS: support for SMTP protocol?
# (Directly sending mails over the network)  Can be "require"d.
OPT_SMTP=yes

# If $OPT_SOCKETS: support for POP3 protocol?
# (Download of mails via POP protocol)  Can be "require"d.
OPT_POP3=yes

# If $OPT_SOCKETS: support for IMAP protocol?
# Requires $OPT_ICONV unless $OPT_ALWAYS_UNICODE_LOCALE, in which case
#  it only warns.
# (Reading of mails directly on the server)  Can be "require"d.
OPT_IMAP=yes

# If $OPT_SOCKETS: support for GSS-API (Generic Security Services
# Application Programming Interface) based authentication, e.g.,
# Kerberos v5?  Available for IMAP and SMTP; can be "require"d.
OPT_GSSAPI=yes

# Enabling the MD5 message digest adds support for several
# authentication possibilities: POP3 (APOP), IMAP and SMTP (CRAM-MD5).
# If you don't need those, you may turn them off by excluding MD5.
OPT_MD5=yes

# If $OPT_SOCKETS: support for parsing of user and password credentials
# from the ~/.netrc file ($NETRC; see *netrc-lookup* manual entry).
OPT_NETRC=yes

# If $OPT_SOCKETS: passwords can also be looked up through an external
# "agent" in order to allow for encrypted password storage (see
# *agent-shell-lookup*).
# [Obsolete] Even though marked *v15-compat* this feature has been
# obsoleted; please use an encrypted .netrc file (via *netrc-pipe*) or
# encrypt a complete resource file and load this like, e.g.,
#     source "gpg -qd ~/.mailprivate.gpg | "
OPT_AGENT=yes

# IDNA (internationalized domain names for applications) offers users
# the possibility to use domain names in their native language, i.e., to
# use non-US-ASCII content, as in, e.g., <www.räksmörgåsa.example>,
# which the IDNA algorithm would convert to
# <www.xn--rksmrgsa-0zap8p.example>.  :)
# Multiple implementations are supported:
# . idnkit - idnkit, https://www.nic.ad.jp/ja/idn/idnkit/download,
#     either of version 1 for IDNA 2003 or version 2 for IDNA 2008.
# . idn2 - GNU Libidn2 for IDNA 2008, https://www.gnu.org/software/libidn/,
# . idn - GNU Libidn for IDNA 2003, same,
# OPT_IDNA can be "require"d.
OPT_IDNA=yes
VAL_IDNA="idnkit idn2 idn"

# IMAP-style SEARCH expressions can be supported.  This addressing mode
# is available with all types of folders; for folders not located on
# IMAP servers, or for servers unable to execute the SEARCH command, the
# search is performed locally.
OPT_IMAP_SEARCH=yes

# Several different P(seudo) R(andom number) G(enerator) possibilities.
# No need for somewhat strong random is necessary.
# The following will be used as sole PRG implementations.
# . arc4 - we search for arc4random(3).
# . ssl - if OPT_SSL is available the PRG of the SSL library can be used.
# The following will only be used to seed our builtin ARC4 PRG.
# . libgetrandom - getrandom(3) via C library.
# . sysgetrandom - getrandom(2) via SYSCALL.
# . urandom - reading from /dev/urandom.
# . builtin - a builtin ARC4 implementation with unscientific seeding.
# . (error - bail out)
VAL_RANDOM="arc4 ssl libgetrandom sysgetrandom urandom builtin"

# Regular expression (re_format(7)) support for searches, conditional
# expressions etc., we use the extended ones, then; can be "require"d.
OPT_REGEX=yes

# Line editing and -history (manual "On terminal and line editor").
# . OPT_MLE
#   If ISO C (ISO/IEC 9899:1990/Amendment 1:1995) is supported on the
#   system then our built-in MLE (Mailx-Line-Editor) version can be used.
#   An enabled & available OPT_TERMCAP may affect and improve the MLE.
#   Can be "require"d.
OPT_MLE=yes
# Add support for history management.
OPT_HISTORY=yes
# Add support for `(un)?bind'ing of key sequences.
OPT_KEY_BINDINGS=yes

# Use termcap(5) for terminal control; can be "require"d.
# Today most environments ship a termcap(5) that in fact is part of
# terminfo(5), and acts as a converting wrapper for this library.
# To avoid this redundancy we also support terminfo(5), and use it
# instead if we find it (assuming that termcap(5) is a stub, then).
# Note that terminfo(5) offers access to more key sequences, e.g.,
# kLFT5, for which no termcap(5) entry exists.
# terminfo(5) support can (thus) be "require"d.
OPT_TERMCAP=yes
OPT_TERMCAP_VIA_TERMINFO=yes

# Enable the `errors' command; S-nail is a console-based application and
# thus errors may fly by pretty fast as other operations are in
# progress; or $PAGERs are started and clear errors off the screen.  If
# enabled errors are duplicated as they happen and the `errors' command
# will show them when asked to.
OPT_ERRORS=yes

# We may include `help' etc. strings for commands, increasing size a bit.
OPT_DOCSTRINGS=yes

# It is possible to strip out (almost) all user interface and error messages.
# This might be interesting for automated use cases (only).
OPT_UISTRINGS=yes

# Interaction with a spam email filter is possible.
# Refer to all commands and variables with a "spam" prefix, and
# see the manual example section "Handling spam".
# . OPT_SPAM_SPAMC:
#   Support for interaction with spamassassin(1)s spamc(1).
# . [Obsolete] OPT_SPAM_SPAMD:
#   Direct communication with spamassassin(1)s spamd(1).
#   Needs unix(4) domain sockets (checked).  Can be "require"d.
# . OPT_SPAM_FILTER:
#   Generic filter hook which can be used with e.g. bogofilter(1)
#   and sylfilter(1): see documentation for the *spam-filter-**
#   variables for expected application behaviour.
OPT_SPAM_SPAMC=no
OPT_SPAM_SPAMD=no
OPT_SPAM_FILTER=yes

# A simple line-based quoting mechanism can be made available via the
# *quote-fold* mechanism.  This will be turned off automatically if the
# required character classification is not available on the host.
# Can be "require"d.
# TODO shouldn't wrap lines when only WS or a NL-escaping \ follows
OPT_QUOTE_FOLD=yes

# We do have a very primitive HTML tagsoup filter which can be used to
# convert HTML to plain text for display purposes.  If enabled it will
# be used for all MIME types which have the @h@ or @H@ type markers
# (more on this in the manual section "The mime.types files").  And
# which do not have any user defined MIME type handler, of course.
OPT_FILTER_HTML_TAGSOUP=yes

# A simple form of coloured output can optionally be produced.
OPT_COLOUR=yes

# File dotlocking is performed for "system mailbox" (%[USER] and
# %:ANYFILE) MBOX files: when synchronizing any such FILE a FILE.lock
# file will be created in the directory of FILE, for the duration of the
# synchronization: set $OPT_DOTLOCK to support this traditional mail
# spool file locking.
# $VAL_MAIL(s) where normal system mailboxes reside are usually not
# writable by normal users, except that a user may read and write his
# own mailbox.  But this means that a program run by the user cannot
# create a .lock file!  The solution is to install a privilege-separated
# mini-program that has the sole purpose and functionality of managing
# the dotlock file in such situations -- and only then, as a last
# ressort.  With it dotlock files can be created for any mailbox for
# which the invoking user has read (or read-write) permissions, and
# under the UID and GID of the mailbox itself!  We call it -privsep.
# $OPT_DOTLOCK can be "require"d.
OPT_DOTLOCK=yes

##  --  >8  --  8<  --  ##
## Normal users should not need to read any further

## PATHS AND PROGRAMS, DEVELOPMENT ##

# To ease the life of forkers and packagers "our" name can be changed.
# The name is build by concatenating $VAL_SID and $VAL_MAILX, i.e.,
# $(VAL_SID)$(VAL_MAILX).  Note that the final string must be longer
# than two characters and may not contain any whitespace.
VAL_SID=s-
VAL_MAILX=nail

# The name of the exemplary resource template.
# Note 1: not overwritten by "make install" if yet existent!
VAL_SYSCONFRC="${VAL_SID}${VAL_MAILX}.rc"

## FEATURE SET, DEVELOPMENT ##

# Use debug compiler flags, enable some additional commands and code
# assertions.  Note that setting this also enables our own memory
# canaries, which require a rather large amount of runtime memory.
OPT_DEBUG=no

# Experimental code etc.
# Note: this forcefully enables OPT_DEBUG
OPT_DEVEL=no

# We use the crypto libraries' MD5 implementation if possible, unless..
OPT_NOEXTMD5=no

# With $OPT_AUTOCC we can make use of the ASan AddressSanitizer and ASan
# MemorySanitizer of Google
# (https://github.com/google/sanitizers/wiki/AddressSanitizer).
# These are definetely only useful for debugging.
# Also, external libraries are often problematic (e.g., ncursesw), and
# ASAN_MEMORY of the tried clang 4.0.0 (4.0.0-2 of ArchLinux) was faulty.
# Can be "require"d.
OPT_ASAN_ADDRESS=no
OPT_ASAN_MEMORY=no

# With $OPT_AUTOCC we will use stack protector guards shall the
# detected compiler support them; this goes in line with our own (heap)
# memory canaries and will detect buffer overflows.  It is usually only
# useful during development, i.e., in a debug environment that tests all
# aspects of a program.  But today it is often used even in shipout code.
OPT_FORCED_STACKPROT=`\
   if feat_yes DEVEL || feat_yes DEBUG; then \
      echo yes;\
   else \
      echo no;\
   fi`

# If $OPT_DEBUG is true we'll use a simple memory wrapper with
# canaries.  This interferes with memory debuggers like valgrind(1) or
# the LLVM -fsanitize stuff.  Enable this to not use our wrapper.
OPT_NOMEMDBG=`\
   if feat_yes ASAN_MEMORY || feat_yes ASAN_ADDRESS; then \
      echo yes;\
   else \
      echo no;\
   fi`

# Our functions are instrumented with Not-Yet-Dead chirps, which print
# a function call trace when the program crashes.  Whereas NYD will be
# used automatically when either of $OPT_DEBUG and $OPT_DEVEL is
# defined, an extended level of NYD is compiled in only on explicit
# request.
# TODO Separation in between NYD and NYD2 not yet fully done.
OPT_NYD2=no

# vim:set tw=72: s-it-mode
