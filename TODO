TODO reminder.
Before you start making additions to (Heirloom mailx and) S-nail,
subscribe to the development mailing list at
<https://lists.sourceforge.net/lists/listinfo/nail-devel>
to coordinate your efforts with the maintainer and other people.

Backward-compatibility breakers
-------------------------------

- Recipients specified on the command line should be added to those
  specified in the message when the -t option is set.

- The -q option makes me sad as it doesn't use *indentprefix* for the
  quoted file.  So either there should be -Q which does so, or -q should be
  changed.  Also see ~R below.
  [Note: i think i go for the latter.  Please complain.]

- At least optionally disallow silent discarding of invalid addresses,
  i.e., cause sending to be aborted if not all recipient addresses pass the
  validity test.

- Ditto if a resource file can't be found that has been explicitly set via
  environment variables there should be some feedback.

- I.e., it is fine to be silent unless an error occurs, but then please
  report errors and offer (in interactive mode) the possibility to act at
  a glance.

-- While there.  There should be some kind of "verbose" switch that - in
   interactive mode - also gives *positive* feedback, as in "added
   attachment X, charset Y", but without giving details about protocol
   delivery etc.

   [It is terrible that there is almost no feedback in the UI.  When
   i temporarily implemented a sorted cmdtab i've often used wrong commands,
   but got no feedback at all!  E.g., wanted to "undelete 14", first did "u
   14", then "und 14" and then realized my fault and did "undelete 14".
   *Nothing*.]

- [v13:started] IIRC some error messages go to STDOUT, some to STDERR.
  Only latter.

- POSIX says that, when written to DEAD: "If the file exists, the message
  shall be written to replace the contents of the file".  This is mentioned
  for ASYNCHRONOUS EVENTS, but it's the only description of what should be
  done in which way to DEAD.  savedeadletter() yet appends.  See ZOMBIE ,)

- Furthermore, *all* file operations yet append, even recipient target
  files are appended.  I don't know if this is really desirable behaviour,
  but i have not thought about that for real.  Maybe this should be at
  least configurable.

- POP3 APOP availability is promoted by servers which support it.
  The *pop3-use-apop* and *pop3-use-apop-user@host* variables should thus
  be dropped.  To support broken servers XY-no-apop-XY may be offered
  instead.

- Maybe we should not use pipes to pagers at all.
  This would also (beside getting rid of longjumps that cross allocations
  afaik etc.) make it possible to honour the *crt* variable in respect
  to what really is displayed, not in respect to message size.
  It irritates me that a message with 5 visible lines but 115 header lines
  goes through the pager, even if i have *crt=*.
  P.S.: we could simply count the headers in addition?

- I'm in doubt wether the WANT_JUNK and WANT_SCORE features should
  remain in the code.
  From a glance (also see
  <http://article.gmane.org/gmane.mail.nail.devel/1568>) it doesn't look
  promising, and i think it would be better if we could hook ourselfs
  into SpamAssassin or similar software, than sitting on top of a small
  locale, isolated closed-source database.

Non-breakers
------------

- We need a "void" box that can be jumped to, i.e., a state in which no box
  at all is active.

- (schdir(): realpath() local files before leaving CWD.., 2013-01-08)
  did a first step to avoid "getting stuck" when the current folder becomes
  unaccessible.
  That is however only a command-specific workaround for a deeper design
  problem.

-- When a MBOX mailbox is removed while it is opened then changing the
  folder is not possible.  (At least when the only mail that was present
  therein has been "move"d off that MBOX.)  While trying this i got
  a deallocation abort trap in lex.c:commands():385:
	if (linebuf)
		free(linebuf);
  Note that Berkeley Mail (NetBSD mail(1) that is) seems to have the same
  problem in respect to not allowing a hard-change, but only allows an exit
  (not a quit thus).  The error may still exist even there, it maybe that
  it simply doesn't show up because a stack buffer is used ...

  In interactive mode, dump the temporary file to the TMPDIR and inform the
  user; it's up to him to decide what should happen.

  Otherwise it must be possible to switch the folder (to the *void* one)
  forcefully.

-- Also, when the folder is modified concurrently we should bail, or, in an
  interactive session, prompt the user what to do.

- IDNA decoding.  It may be that this will never be supported.  But
  wouldn't it be nice for at least viewing messages?

- Mail-Followup-To:.

- Make it possible to reply to/save/write/xy part X.Y[.Z] by allowing its
  specification directly, as in, e.g., ':w 1.2'.  If doing so on an
  embedded message/rfc822, e.g., a message embedded in a digest, it should
  be possible to reply to the very message in respect to its header fields,
  but (optionally?) keep the original Cc:'d.  (Parts by Martin Neitzel)

-- In general i like the possibility of mutt(1) to toggle in between header
   and header-ignore mode with a simple switch (h), and that *this toggle
   is used when replying*.  Yes i know mutt(1) sucks beside that in respect
   to base64, MBOX, QP for CRLF files etc.

-- Also, mutt(1) quotes all text parts of a message, not only the first
   one!  This should at least be optionally available.

- If pipes fail for part viewers then at least the usual PART X.Y should be
  shown, maybe even including some error message.
  I had 'set pipe-text/html="lynx -dump -force_html /dev/stdin"' but NetBSD
  does not have lynx(1), and i thought i've found a S-nail(1) bug.
  And so it was.

= Update: (Change "Part X:" display message.., 2012-12-20) did one step,
  but we need to rewrite the entire layers to handle that the separating
  newline in between messages is considered to be part of it.

- I want to have a ~R tilde command that works like ~r except it performs
  quoting of the input just as ~m does.  Also see -q above.

- Offer the possibility to work with certificate fingerprints instead of
  full certificates, in equal spirit to the current maintainers S-Postman
  and Mercurial.  S-nail(1) could simply offer something in equal spirit to
  the formers --fingerprint, so that no other tool is necessary for
  certificate management (for at least secure transport).

- It would be nice if it would be possible to define a format string for
  *quote*, like 'set quote="format=some formats"'.
  In general the current approach is somewhat messy IMO.  I.e., it would
  make more sense to act rather like mutt(1) and as written elsewhere in
  this document, i.e., have some toggles that act on the display and use it
  for multiple modes (show/reply/forward etc.)
  Otherwise introduce commands which include all the headers plus, e.g.,
  "hreply" or "freply", and then the ditto series, i.e., "hReply" ...

-- This would also mean that interactive message editing would work
  accordingly.  PleasE!

- Deal with faulty message selection that may occur when selecting threads
  via & (when at least mixed with other selectors).

-- Also the thread sort doesn't get

    [A is deleted]
    B answers A
      C answers B
      D answers B
    E is unrelated
    F answers A

  The current sort fails to recognize that F and the thread starting at
  B are related, which results in a mess.

- On the long run -- try to add command line editing.

-- Note that the TTY is sick.  If ^C on input it simply jumps to next
   input, instead of saying "Interrupted, one more to die hard" or
   something (talking about ~@ charset selection prompts in particular).

- For those who use S-nail(1) only with a MTA it may be desirable to have
  some "smopts" expansion mechanism in equal spirit to NetBSD mailx(1).

- While talking about NetBSD mailx(1), the author can imagine that being
  able to use the optional -H:xy stuff is sometimes nice.

- Check against RFC 5322.
  Rework all the header parsing code.  Actually understand the content,
  classify the stuff so that it matches what is defined in RFC dependent on
  header field.  Place the result in objects that know what they represent.
  See the name extraction topic below.

- Also check against newest POSIX.
  Maybe add a bash(1)ish POSIXLY_CORRECT (or so) variable?  Though..

- Maybe there should be an additional ZOMBIE directive that is served in
  equal spirit to DEAD, but that could be a valid MBOX... ?
  What i want is a *real* resend, best if possible from command line.
  Meaning, also the possibility to postpone a message.  In general.

- POP3 doesn't support "newmail" for real.  If implemented, should it sync?
  Look at POP3 impl. in general..

- Having a newsreader would be a really cool thing.

- There should be a way to ignore the From_ line, as opposed to the From:
  line, i.e., distinctively.

- There should be a variable that controls wether leading and trailing
  empty lines of parts and/or messages as such should be printed or not.

- RFC 2387: multipart/related.

- Rewrite the make system again.  makeconfig -> configure.  Write the
  Makefile anew, so that it doesn't contain any variables no more, i.e.,
  fixate the first command line, so that a later 'make' recompiles
  everything the very identical way.  Also the manual, the resource file
  etc., all that should be created by the first run.

- rfc2384.txt etc.  I.e., Much better URL support.

- printhead()/hprf(): support %n newline format (%t tab?).
  Make it possible to use the *datefield* algorithm for plain From_ derived
  dates (needs a From_ parser, i.e., strptime()-alike).
  Once we have that, rename *datefield-markout-older* to
  *date-markout-older* ??

- The "top" command should honour ignoretab, or there should be a very
  special "top" ignoretab.  It simply doesn't make sense to "top" 5 lines
  when all that you get are Received: lines...

Low-Level
---------

- Revise the code:
  + [v13:messed up] Use NetBSD KNF in respect to parens for return+.
  + [v13:started] Add C99-likeish typedefs and use them everywhere.
  + [v13:started] Don't use magic constants/values.
  + [v13:started] Use const arguments whenever possible.  Yet started, but
    with ugly casts at some places because this is a can of worms.
  + Inline functions?  [Restrict pointers?]
  + [v13:started] Document the functions in the interface declarators.
  + [v13:started] Resort the functions and where they are implemented.
  + Make more use of struct str, and offer more support functions for it.
  + Make more use of value carriers in the call stack.  There are functions
    with an incredible amount of arguments, needlessly.
  ++ E.g., use a struct readlinectx.
  + Ftemp(): offer an operation mode enum that includes "do-unlink".
    In general: now there is O_CLOEXEC etc. ...
  + Lazy install sigchild handler etc.

- [v13:started] Improve name extraction rules.  And field parsing.  There
  are structured and unstructured fields.  There are quoted pairs and
  comments etc.  Rewrite the entire parsing mechanism to comply to RFC
  5322, and try to merge all those many subparsers around in the codebase,
  and accordingly.  So much duplicated work ...
  Name parsing has been improved a bit for v13, but it's still broken.
  yankword(), *extract(), etc.: RFC 5322 says that comments in address
  fields SHOULD NOT be used (mutt(1) maps them to full name-addr forms if
  approbiate, even if that actually changes content!!?), and that full
  name-addr SHOULD be used.  Our functions are yet quite silly (i.e.,
  leading comments remain, as in "(bier2) <a2@b2.de>", unless the address
  doesn't come in angle brackets, trailing go away, as in "<a6@b6.de>
  (bier6)", that becomes "<a6@b6.de>").
  Something silly like
    (co$mm1) abc@däf.de (cö,mm,2)   ('c'o"m"m.3)
  Should eventually become
    co$mm1 cö,mm,2 'c'o"m"m.3 <abc@xn--df-via.de>
  on the display, or, with IDNA decoding (and thus rather unlikely)
    co$mm1 cö,mm,2 'c'o"m"m.3 <abc@däf.de>
  It should NOT become this mutt(1)ism:
    "co$mm1 cö,mm,2 'c'omm.3" <abc@däf.de>
  Or?

- Think about a name bypass hashmap cache, and whenever we have to skin or
  nalloc() or whatever, look in there.  Maybe even an additional link for
  non GFULL(/GSKIN) and fully skinned struct name objects.
  The amount of duplicated work in this codebase is frustrating, but the
  real healing would make necessary a complete rewrite of the name handling!
  Such a cache would work without touching the current code flow ... or
  allow a smooth transition to a new one anyway.

- Think about a value() cache.

- Check all Popen() calls, i've had the impressions that Popen() doesn't
  close all resources on failure.  Also, Popen() callers often do a lot of
  work in respect to signals.  Try to find a solution that all problems are
  encapsulaten in Popen(), at least better than today.

- is_myname() shows it, others too - there are variables which are
  interpreted, and those should be interpreted once they are assigned, not
  over and over again.  Even better: lazy evalution -- use a special lookup
  method for those.  The mentioned method should indeed even go away?

- The current codebase assumes that in multibyte encodings plain ASCII
  characters can be tested "as-is".  This assumption is wrong for some
  encodings that use U+001B (escape) or another ASCII thing to introduce
  shift states.  The only real solution to this problem would be to rewrite
  the entire codebase and use UTF-8 everywhere.
  Unfortunately there is no standard way to do that.

- The char classification stuff can be improved; currently each character
  has exactly one classification bit set, even if multiple would apply
  (e.g., HT=\t == CNTRL|SPACE|ASCII|BLANK).  This would allow better
  testing using our own classification functions in quite some places.

- The quoted-printable Content-Transfer-Encoding: supports soft linebreaks;
  it happens that some stupid mailers (Apple Mail?) create HTML parts which
  solely consist of a single line, created via soft linebreaks.
  To handle such mess we need to be able to break out of the input-line ==
  output line relationship that is still fixated in the codebase.
  I.e., it is not even sufficient to convert "rest" into an array, but best
  would be if we would be able to sequentially work what we have, and
  detect when it is safe to "dump that out".

- I want a clean PTF interface for the actual layers.  There should be no
  switch() statements around that test for the type of BOX that is
  currently open.  Especially important for possible NEWS support, but the
  code is a mess in general...

- I hate longjmp()s and signals.  I suspect some pitfalls in the codebase.
  All that stuff should at least be collected in a single place.

  I would like to see that compilation with a C++ compiler is possible,
  though that would be a long way and be especially problematic due to the
  (C ish) way enums are used.

- I never used anything but the *datefield* option, and it would really be
  nice if the date strings would be parsed off into some 16 byte or what
  storage when about to producing the summary, so that it would be directly
  available and there would be no need to reread the mail.  Moreover, or
  even more than that - the m_date field exists and should possibly simply
  be init, at least in these cases.  (P.S.: this doesn't contradict the
  statement somewhere else in this file that the structure should be
  slacked; simply use multiple thereof or so)

- All error messages should not go to stderr but instead we should add our
  own n_warn() family and use that.  In the background we should have
  a ring of error messages (oldest fall off), and a command that is capable
  to display the ring.  The command loop should recognize whenever an error
  happened during the last command, and print something like "XY errors
  occurred", followed by a (truncated as necessary) error report.
  It simply doesn't make any sense to print errors on stderr if normal
  output goes to stdout and scrolls it off the screen.

- Dramatically pimp the cc-test.sh script, and recognize and report
  compilation errors, too.

Release S-nail v20 on 2018-03-25, the 40th anniversary of Mail.
With a clean, conforming and efficient codebase, then.

vim:set fenc=utf-8 syntax=txt ts=2 sts=0 sw=2 et tw=75:
