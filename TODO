TODO reminder.
Before you start making additions to (Heirloom mailx and) S-nail,
subscribe to the development mailing list at
<https://lists.sourceforge.net/lists/listinfo/nail-devel>
to coordinate your efforts with the maintainer and other people.

VIP
---

- When a MBOX mailbox is removed while it is opened then changing the
  folder is not possible.  (At least when the only mail that was present
  therein has been "move"d off that MBOX.)  While trying this i got
  a deallocation abort trap in lex.c:commands():385:
	if (linebuf)
		free(linebuf);
  Note that Berkeley Mail (NetBSD mail(1) that is) seems to have the same
  problem in respect to not allowing a hard-change, but only allows an exit
  (not a quit thus).  The error may still exist even there, it maybe that
  it simply doesn't show up because a stack buffer is used ...

- In general, when a MBOX is modified while S-nail(1) has an open instance
  to it, it may hard overwrite the modified content.
  But how to solve that problem?  At least something like vim(1), i.e.,
  "modified since, reopen()/write()/blabla".

Backward-compatibility breakers
-------------------------------

- Recipients specified on the command line should be added to those
  specified in the message when the -t option is set.

- The -q option makes me sad as it doesn't use *indentprefix* for the
  quoted file.  So either there should be -Q which does so, or -q should be
  changed.  Also see ~R below.
  [Note: i think i go for the latter.  Please complain.]

- At least optionally disallow silent discarding of invalid addresses,
  i.e., cause sending to be aborted if not all recipient addresses pass the
  validity test.

- Ditto if a resource file can't be found that has been explicitly set via
  environment variables there should be some feedback.

- [v13:started] IIRC some error messages go to STDOUT, some to STDERR.
  Only latter.

- IIRC i saw invocations that returned with a 0 exit status and that
  surprised me, then.  Errors should truly be reported.

- POSIX says that, when written to DEAD: "If the file exists, the message
  shall be written to replace the contents of the file".  This is mentioned
  for ASYNCHRONOUS EVENTS, but it's the only description of what should be
  done in which way to DEAD.  savedeadletter() yet appends.  See ZOMBIE ,)

- Furthermore, *all* file operations yet append, even recipient target
  files are appended.  I don't know if this is really desirable behaviour,
  but i have not thought about that for real.  Maybe this should be at
  least configurable.

- The current maintainer hates the way the command line arguments are
  processed.  Because, many things that come in from the command line may
  depend on what the configuration files say.
  It would be much better to collect the command line once, then load all
  the configuration files that are desired, then process the command line
  again (that way most likely faster than creating dynamic storage for all
  the command line arguments).  This will enable +PATH expansions for
  attachments, IDNA settings for addresses etc.  Until then -Svariable sets
  its argument after loading of the RC files as documented, *and* directly
  once parsed.
  Note that this two-pass will also allow situation-dependent buffers sizes
  for the string allocator.

- Conditionalize commands upon actual feature set.
  Sofar commands like, e.g., "noop" are compiled into the binary even if
  the functionality behind is not.  This is in spirit to the entire
  Heirloom nail source, which used function stubs for this purpose.  But it
  would be better if the command would simply not exist.

Non-breakers
------------

- [v13:started] Reformat the manual.
  roff style is fine, but lines should be ~70 characters, not only ~25.

- IDNA decoding.  It may be that this will never be supported.  But
  wouldn't it be nice for at least viewing messages?

- Mail-Followup-To:.

- Make it possible to reply to/save/write/xy part X.Y[.Z] by allowing its
  specification directly, as in, e.g., ':w 1.2'.  If doing so on an
  embedded message/rfc822, e.g., a message embedded in a digest, it should
  be possible to reply to the very message in respect to its header fields,
  but (optionally?) keep the original Cc:'d.  (Parts by Martin Neitzel)

- Yet the first part is used for forwarding and replying etc..  In MIME
  multipart messages it is however possible to make the HTML version the
  first, etc., so in case the normal "pick first part" algorithm is used
  that should maybe do "pick first plain text part if present, else first"
  insteadl.

- If pipes fail for part viewers then at least the usual PART X.Y should be
  shown, maybe even including some error message.
  I had 'set pipe-text/html="lynx -dump -force_html /dev/stdin"' but NetBSD
  does not have lynx(1), and i thought i've found a S-nail(1) bug.
  And so it was.
  In general it would be nice if not everything would be suppressed by
  default.  If i only see PART X.Y .. it may be just about anything, and
  i don't want to "P" all the header stuff just to see that.  One should
  see at a glance what content the part contains.
  By the way, the "print" command documents a different behaviour that
  sounds desirable..  And then the authors rfc822* variables seem almost
  superfluous.

= Update: (Change "Part X:" display message.., 2012-12-20) did one step,
  but we need to rewrite the entire layers to handle that the separating
  newline in between messages is considered to be part of it.

- I want to have a ~R tilde command that works like ~r except it performs
  quoting of the input just as ~m does.  Also see -q above.

- Offer the possibility to work with certificate fingerprints instead of
  full certificates, in equal spirit to the current maintainers S-Postman
  and Mercurial.  S-nail(1) could simply offer something in equal spirit to
  the formers --fingerprint, so that no other tool is necessary for
  certificate management (for secure transport at least).

- It would be nice if it would be possible to define a format string for
  *quote*, like 'set quote="format=some formats"'.

- Deal with faulty message selection that may occur when selecting threads
  via & (when at least mixed with other selectors).

- On the long run -- try to add command line editing.

- For those who use S-nail(1) only with a MTA it may be desirable to have
  some "smopts" expansion mechanism in equal spirit to NetBSD mailx(1).

- While talking about NetBSD mailx(1), the author can imagine that being
  able to use the optional -H:xy stuff is sometimes nice.

- Add the possibility to simply place whatever header in the editor (and
  in the mail read in due to the -t command line option, and...).

- Check against RFC 5322.
  Rework all the header parsing code.  Actually understand the content,
  classify the stuff so that it matches what is defined in RFC dependent on
  header field.  Place the result in objects that know what they represent.
  See the name extraction topic below.

- Also check against newest POSIX.
  Maybe add a bash(1)ish POSIXLY_CORRECT (or so) variable?  Though..

- Maybe there should be an additional ZOMBIE directive that is served in
  equal spirit to DEAD, but that could be a valid MBOX... ?
  What i want is a *real* resend, best if possible from command line.
  Meaning, also the possibility to postpone a message.  In general.

- It is terrible that there is almost no feedback in the UI.  When
  i temporarily implemented a sorted cmdtab i've often used wrong commands,
  but got no feedback at all!  E.g., wanted to "undelete 14", first did "u
  14", then "und 14" and then realized my fault and did "undelete 14".
  *Nothing*.

- POP3 doesn't support "newmail" for real.  If implemented, should it sync?
  Look at POP3 impl. in general..

Low-Level
---------

- Revise the code:
  + Add C99-likeish typedefs for integers and use them everywhere.
  + Don't use magic constants/values.
  + [v13:started] Use const arguments whenever possible.  Yet started, but
    with ugly casts at some places because this is a can of worms.
  + Inline functions?  [Restrict pointers?]
  + Document the functions in the interface declarators.
  + [v13:started] Resort the functions and where they are implemented.
    It's really terrible.  Just think about outof(), savedeadletter(),
    savemail() etc..
  + Make more use of struct str, and offer more support functions for it.
  + Make more use of value carriers in the call stack.  There are functions
    with an incredible amount of arguments, needlessly.
  + makeconfig: link_check/compile_check.  More of the latter suffice.

- [v13:started] Improve name extraction rules.  And field parsing.  There
  are structured and unstructured fields.  There are quoted pairs and
  comments etc.  Rewrite the entire parsing mechanism to comply to RFC
  5322, and try to merge all those many subparsers around in the codebase,
  and accordingly.  So much duplicated work ...
  Name parsing has been improved a bit for v13, but it's still broken.
  yankword(), *extract(), etc.: RFC 5322 says that comments in address
  fields SHOULD NOT be used (mutt(1) maps them to full name-addr forms if
  approbiate, even if that actually changes content!!?), and that full
  name-addr SHOULD be used.  Our functions are yet quite silly (i.e.,
  leading comments remain, as in "(bier2) <a2@b2.de>", unless the address
  doesn't come in angle brackets, trailing go away, as in "<a6@b6.de>
  (bier6)", that becomes "<a6@b6.de>").
  Something silly like
    (co$mm1) abc@däf.de (cö,mm,2)   ('c'o"m"m.3)
  Should eventually become
    co$mm1 cö,mm,2 'c'o"m"m.3 <abc@xn--df-via.de>
  on the display, or, with IDNA decoding (and thus rather unlikely)
    co$mm1 cö,mm,2 'c'o"m"m.3 <abc@däf.de>
  It should NOT become this mutt(1)ism:
    "co$mm1 cö,mm,2 'c'omm.3" <abc@däf.de>
  Or?

- [v13.3:started] (Implement RFC 4155 conforming MBOX parsing.., 2012-11-07).
  I'm not completely happy since S-nail *does* still quote those lines,
  how rare they may be -- it *does* modify message content.  mutt(1)
  implements something more clever and that is quoted-printable encoding
  of the "F" from "From", when seen at the beginning of a line.
  This, when applied to just *any* "^From", will be a non-modifying and
  all-compatible solution.

  For this i have to touch the MIME stuff for real which, however, will
  need more time, since so much has to be done .).
  As John Dobson pointed out, i.e., just compare NetBSD's
  mail/mime_attach.c:content_encoding_core() with S-nail's
  mime.c:get_mime_convert() (that calls mime.c:mime_isclean()) ...
  It is terribly inefficient and can be improved a lot.

- While at MIME.
  send.c:sendpart(): the
		while (convert == CONV_FROMQP && linelen >= 2 &&
				line[linelen - 2] == '=') {
  loop is actually entered for base64 encoded messages.  If in a "type"
  command that handles multiple messages it thus happens that the "Message
  XY:" message continues the last line of the message in question.
  Likewise problems for quoted-printable encoded parts if the last line
  ends in a = line-continuation request, but that only suppresses the
  separating newline in between messages, "Message XY:" does appear on
  a line of its own at least.  Berkeley Mail has the general problem that
  the separating newline in between messages is counted and (thus) handled
  as part of the message.  It seems that nail did not address this problem
  when it was extended.  The (*writebackedited* hack.., 2012-10-06) (and
  it's tweak on the same day) handles this for editing, but it seems more
  work is needed to get this done all through the system.

- Think about a name bypass hashmap cache, and whenever we have to skin or
  nalloc() or whatever, look in there.  Maybe even an additional link for
  non GFULL(/GSKIN) and fully skinned struct name objects.
  The amount of duplicated work in this codebase is frustrating, but the
  real healing would make necessary a complete rewrite of the name handling!
  Such a cache would work without touching the current code flow ... or
  allow a smooth transition to a new one anyway.

- Check all Popen() calls, i've had the impressions that Popen() doesn't
  close all resources on failure.  Also, Popen() callers often do a lot of
  work in respect to signals.  Try to find a solution that all problems are
  encapsulaten in Popen(), at least better than today.

- is_myname() shows it, others too - there are variables which are
  interpreted, and those should be interpreted once they are assigned, not
  over and over again.  Even better: lazy evalution -- use a special lookup
  method for those.  The mentioned method should indeed even go away?

- mime.c:prefixwrite() tracks state internally instead of having a cookie
  argument.  That doesn't really make sense.  Either it is capable to work
  with multiple files concurrently and prefix-quotes them correctly in the
  same fashion, or it doesn't track anything at all.  It even tracked those
  calls that do not write a prefix at all before, just to make this
  mechanism work ... Or not?  Well, if you track the last file and if there
  was a newline last, and you switch files, then the last newline state is
  lost, and you do write the prefix even if in the other file there was no
  newline last.

  In fact we should introduce carrier structs for these execution paths.
  This would also allow to gracefully detect MIME-escaped final newlines,
  reduce work that is done over and over again etc.

- The current codebase assumes that in multibyte encodings plain ASCII
  characters can be tested "as-is".  This assumption is wrong for some
  encodings that use U+001B (escape) or another ASCII thing to introduce
  shift states.  The only real solution to this problem would be to rewrite
  the entire codebase and use wide characters (IMO) everywhere.
  (Really.  For at least header content.)

- It seems some IMAP functions return OKAY even on error.  The current
  maintainer yet doesn't know what this is about, but surely wants to look
  at that again later.

- The current maintainer doesn't like longjmp()s.

- The current maintainer doesn't like signals.
  He suspects many signal related pitfalls in the codebase.

- The current maintainer would like to see that compilation with a C++
  compiler is possible, though that would be a long way and be especially
  problematic due to the (C ish) way enums are used.  He never understood
  why there is not "bitenum", btw.

- The current maintainer worked with all-tabs for almost one and a half
  decade and turned over to all-spaces afterwards.

Release S-nail v20 on 2018-03-25, the 40th anniversary of Mail.
With a clean, conforming and efficient codebase, then.

vim:set fenc=utf-8 syntax=txt ts=8 sts=2 sw=2 et tw=75:
